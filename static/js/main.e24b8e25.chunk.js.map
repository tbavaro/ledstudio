{"version":3,"sources":["PianoView.module.scss","BeatControlView.module.scss","hardware/FadecandyLedSender.ts","portable/base/Colors.ts","portable/VisualizationRegistry.ts","portable/base/FixedArray.ts","portable/base/ColorRow.ts","portable/visualizationUtils/RowColumnLedMapper.ts","portable/base/FancyValue.ts","portable/base/Visualization.ts","portable/visualizations/burrow/BeatRainVisualization.ts","portable/visualizationUtils/Utils.ts","portable/visualizations/burrow/ExpandingDashesVisualization.ts","portable/visualizations/burrow/FourierTwinkleVisualization.ts","portable/visualizations/burrow/midi/CenterSpreadVisualization.ts","portable/visualizations/burrow/midi/GlowWaveVisualization.ts","util/EMAHelper.ts","util/WindowStats.ts","portable/visualizationUtils/AudioWaveformSampler.ts","portable/visualizationUtils/BasicAudioHelper.ts","portable/visualizationUtils/SignalsHelper.ts","portable/visualizations/burrow/PulsingRainVisualization.ts","portable/visualizations/burrow/SparklesAndFlashesVisualization.ts","util/VectorUtils.ts","portable/visualizationUtils/AbstractVoronoiMapperVisualization.ts","portable/visualizations/burrow/SplotchesVisualization.ts","portable/visualizations/burrow/SpreadShootersAudioVisualization.ts","portable/visualizations/patterns/PatternClockVisualization.ts","portable/visualizations/patterns/PatternDotVisualization.ts","portable/visualizationUtils/StaticImageVisualization.ts","portable/visualizations/patterns/PatternFlagVisualization.ts","portable/visualizations/patterns/PatternMarquee2Visualization.ts","portable/visualizations/patterns/PatternMarqueeVisualization.ts","portable/visualizations/patterns/PatternOwlEyesVisualization.ts","util/Recycler.ts","util/RecycledSet.ts","portable/visualizations/patterns/PatternParticleFireVisualization.ts","portable/visualizations/patterns/PatternRain2Visualization.ts","portable/visualizations/patterns/PatternRainbowVisualization.ts","portable/visualizations/patterns/PatternSparklesVisualization.ts","portable/visualizations/patterns/PatternWingFlapVisualization.ts","portable/visualizations/patterns/PatternZapsVisualization.ts","portable/visualizations/patterns/PatternZoomVisualization.ts","portable/visualizationUtils/PlaylistVisualization.ts","portable/visualizations/playlists/BurrowPlaylistVisualization.ts","portable/visualizations/playlists/TestPlaylistVisualization.ts","portable/visualizations/tests/ScopeFFTVisualization.ts","portable/visualizations/tests/ScopeWaveformVisualization.ts","portable/visualizations/tests/TestAbletonLink.ts","portable/visualizations/tests/TestAudioAndAbletonLink.ts","portable/visualizations/tests/TestAudioPulseVisualization.ts","portable/visualizations/tests/TestAudioWaveformVisualization.ts","portable/visualizations/tests/TestControllerDialVisualization.ts","portable/visualizations/tests/TestKeyFadeVisualization.ts","portable/visualizations/tests/TestKeyVisualization.ts","portable/visualizations/tests/TestLevelsVisualization.ts","portable/visualizationUtils/MappedCanvasVisualization.ts","portable/visualizations/tests/TestMappedCanvasVisualization.ts","portable/visualizations/tests/lines.mp4","portable/visualizations/tests/TestMappedVideoVisualization.ts","portable/visualizations/tests/TestPitchVisualization.ts","portable/visualizations/tests/TestSignalsVisualization.ts","portable/visualizations/tests/TestStripAddressVisualization.ts","portable/visualizations/tests/TestTimeseriesDataVisualization.ts","portable/visualizations/tests/TestVisualizerExtraDisplayVisualization.ts","portable/visualizations/tests/TestWingTrianglesVisualization.ts","generated/Visualizations.ts","audioIn/AudioIn.ts","beat/AbletonLinkConnect.ts","beat/ManualBeatController.ts","BeatControlView.tsx","ControlsView.tsx","hardware/FadecandyClient.ts","portable/PianoHelpers.ts","portable/base/PianoState.ts","piano/MidiEvent.ts","piano/MidiEventListener.ts","util/CSSUtils.ts","PianoView.tsx","portable/base/ControllerState.ts","RightSidebar.tsx","simulator/SimulationRenderer.ts","simulator/SimulationViewport.tsx","simulator/SimulatorStickySettings.ts","simulator/TimeseriesView.tsx","simulator/VisualizerExtraDisplayContainer.tsx","TimingStatsView.tsx","VisualizationRunner.ts","LedStudioRoot.tsx","util/Units.ts","simulator/SimulationUtils.ts","scenes/SceneUtils.ts","scenes/BurrowVenue.ts","scenes/Scene.ts","scenes/BurrowRealWingsScene.ts","scenes/GarageRealWingsScene.ts","scenes/PianoThreeStripesScene.ts","scenes/Scenes.ts","App.tsx","registerServiceWorker.ts","index.tsx","util/Utils.ts"],"names":["module","exports","FadecandyLedSender","client","leds","timingHelper","MovingAverageHelper","channelToBufferMap","this","channelToIndicesMap","Map","forEach","led","indices","get","hardwareChannel","undefined","set","push","hardwareIndex","channelToLedCountMap","channel","sort","a","b","idx","i","Error","numLeds","length","buffer","Buffer","fill","writeUInt8","writeUInt16BE","colorRow","addTiming","ledRow","color","Colors","r","g","offset","sendData","movingAverage","MAX_VALUE","rgbUnchecked","splitRGB","cssColor","hex2Color","hex","startsWith","substr","codes","toLowerCase","apply","map","code","parseInt","bracket01","Utils","bracket0MAX","rgb","split","splitRgb","hsv","h","s","v","sector","Math","floor","f","p","q","t","hsvUnchecked","add","ar","ag","ab","br","bg","bb","multiply","factor","fadeLinearUnchecked","fromColor","toColor","createPaletteFadeLinear","size","BLACK","WHITE","RED","GREEN","BLUE","YELLOW","ORANGE","CYAN","PURPLE","CHARTREUSE","VisualizationRegistryImpl","groupedNames","flatMap","cachedGroupNames","Array","from","keys","groupName","valueOrThrow","visualizationName","config","name","ctor","has","visNamesInGroup","VisualizationRegistryBuilder","registry","built","FixedArray","initializer","items","or","value","strict","startIndex","count","func","mapToArray","toString","target","targetStart","sourceStart","sourceEnd","adjTargetStart","adjSourceStart","adjSourceEnd","min","n","arr","_","ColorRow","defaultColor","dc","getOr","colorToAdd","source","options","derezAmount","random","multiplyBy","RowColumnLedMapper","ledMetadatas","ledColors","ledRows","originalIndices","originalLedColors","originalLedMetadatas","cachedRowLedMetadatas","groupedByRowRaw","minRow","rowHint","maxRow","metadata","index","lmai","row","lmais","numRows","groupedByRowClean","lmaisForRow","position","x","rowIndices","rowNum","rowOriginalIndices","originalIndex","FancyValue","initialValue","NaN","amount","max","rate","interval","decayLinearAmount","halfLife","pow","isNaN","TimeSeriesValue","Visualization","scene","RowColumnMappedVisualization","ledRowMetadatas","rowColumnMapper","rowLedMetadatas","context","renderRows","finishFrame","SingleRowVisualization","overrideLength","cr","renderSingleRow","UNMAPPED_LED_COLOR","start","copy","DerezVisualization","delegate","derez","render","copyFancy","TOP_GLOW","DropHelper","fallGraph","rowIndex","nextRow","makeAddress","address","targets","PureVisualization","dropHelper","sparkles","ts","Set","createEasyTimeSeriesSet","signals","elapsedSeconds","deadSparkles","sparkle","millisUntilFall","newAddress","drop","delete","numSparkles","isNewBeat","lowLevel","red","multiplier","topRow","MyVisualization","schemeIdx","randomPalette","schemes","scheme","console","log","palette","ExpandingDashesVisualization","regularPalette","dropPalette","wingDashPaires","wingDashPairRatioes","ezTS","colorOffset","lastPaletteSwap","swapPalettes","round","Date","now","soundsLikeStrongBeat","white","beatsWithBeats","sum","audioValues","lowRMSZScore20","green","orange","lowRMSEMA20","inDropAfterGlow","beatsSinceDrop","rowIdx","wingRowLength","wingRowDashPaires","ledsPerDashPair","rowOffset","firstDashStart","ledsInFirstDash","firstDashLevel","fudgingFunction","highLevel","firstDashColorIdx","firstDashLeftColor","randomColor","firstDashRightColor","renderDash","secondDashStart","ledsInSecondDash","secondDashLevel","secondDashColorIdx","secondDashLeftColor","secondDashRightColor","dashStart","ledsInDash","radius","leftColor","rightColor","center","dashLo","dashHi","ceil","radiusInLeds","l","aliasing","abs","key","NUM_SAMPLES_RENDERED","NUM_SAMPLES","analyser","bucketLocations","prevBeatNumber","values","audioSource","AudioContext","createGain","AnalyserNode","fftSize","smoothingTimeConstant","connect","Uint8Array","frequencyBinCount","fillArray","shuffleLocations","includes","beatNumber","beatController","getByteFrequencyData","decayLinearRate","bumpTo","multiplyAll","freqPct","ledNum","hue","saturation","c","setFrameHeatmapValues","randomHue","CenterSpreadVisualization","info","time","keyToHue","elapsedMillis","pianoState","filter","kt","sumVelocity","changedKeys","keyVelocities","velocity","elapsed","hi","brightness","lo","si","findIndex","sparkleColor","doSymmetric","stepSize","direction","step","GlowWaveVisualization","pressedKeyColors","fadeFactors","nativeRows","rowLengths","middleRow","len","fc","initialColor","colors","NATIVE_WIDTH","waveCenter","waveNum","waveBrightness","pos","ledColor","widenedColors","k","outputRow","EMAHelper","alpha","emaValue","emvValue","zScoreValue","newValue","diff","incr","stddev","sqrt","emv","ema","CircularQueue","maxSize","nextIndex","sizeUnsafe","oldValue","callbackfn","initialAccum","accum","currentValue","AnalyserNodeAudioWaveformSampler","numSamples","currentSamples","cacheIsDirty","cachedMaxAmplitude","cachedRMSAmplitude","cachedRmsEma3","cachedRmsEma20","Float32Array","audioContext","createAnalyser","destination","getFloatTimeDomainData","data","maxAmplitude","sumSquares","amplitude","update","updateCachedValuesIfNeeded","createAnalyserHelpers","samplers","createAnalyserHelper","filteredAudioSource","type","BiquadFilterNode","sampler","direct","low","high","sampleAll","sample","AudioWaveformSamplerImplementation","AudioWaveformSampler","BasicAudioHelper","unfilteredSampler","lowSampler","highSampler","reusedValues","createFilter","samples","unfilteredRMS","unfilteredRMSEMA3","unfilteredRMSZScore3","unfilteredRMSEMA20","unfilteredRMSZScore20","unfilteredPeak","lowRMS","lowRMSEMA3","lowRMSZScore3","lowPeak","highRMS","highRMSEMA3","highRMSZScore3","highRMSEMA20","highRMSZScore20","highPeak","currentRMSAmplitude","currentRmsEma3","zScore","currentRmsEma20","currentMaxAmplitude","LevelsHelper","attrs","minThreshold","maxThreshold","vEMA","valueOrDefault","HALF_LIFE_MIN","decayExponential","bracket","SignalsHelper","audioHelper","lowDecaySignal","highDecaySignal","isDropValue","soundsLikeStrongBeatValue","soundsLikeNewBeatValue","lastBeat","dropBeat","beatSinceDropValue","prevBeatNum","beatOnBeat","getValues","processValue","beatNow","nearBeat","timeSinceLastBeat","progressToNextBeat","soundsLikeDance","soundsLikeNewBeat","beatNum","PulsingRainVisualization","numSparklesRemainder","fadeRate","beatMultiplier","sparkleRate","LinearDecayingValue","decayRate","SparklesAndFlashesVisualization","numLedsRemainder","flashBrightness","lowTS","highTS","flashBrightnessTS","createTimeSeries","decay","bump","flashColor","addAll","sparkleRateNormalized","getExtents2","points","firstX","firstY","y","minX","maxX","minY","maxY","MAX_DISTANCE","closestIndex","ps","maxDistance","bestIndex","bestDistance","distanceTo","p2","myDistance","cachedInitializationValues","VoronoiHelper","pixelsForPoint","height","width","valuesR","valuesG","valuesB","ledMapper","counts","Vector2","vs","canvas","ctx","imgData","getImageData","pixelIndexes","pointIndex","rTotal","gTotal","bTotal","pixelIndex","getContext","fillStyle","fillRect","ImageData","putImageData","drawColorsOnCanvas","initializeFor","canvasWidth","canvasHeight","allLeds","leds2d","extents","maxDimension","voronoiMaxDimension","mapToCanvas","wp","vector","points2d","maxDistancePixels","ledMapperScratchVector","helper","ledMetadata","point3d","mapTo2DSingle","AbstractVoronoiMapperVisualization","canvasContext","allLedMetadatas","document","createElement","style","backgroundColor","createCanvas","setExtraDisplay","renderToCanvas","colorsFromCanvas","mapTo2d","SplotchesVisualization","lastFrameBeatsCount","currentBeatsCount","newWholeBeatsSinceLastFrame","globalCompositeOperation","globalAlpha","numDots","randomLedPixelPosition","beginPath","arc","PI","DerezSplotchesVisualization","SpreadShootersAudioVisualization","reverseLedInfo","nChannels","infoRow","retval","speed","rib","shooters","ribIdx","ledIdx","sin","DerezSpreadShootersAudioVisualization","PatternClockVisualization","phase","phaseRadians","clockHandSize","cx","cy","strokeStyle","lineCap","lineWidth","moveTo","lineTo","cos","stroke","DerezPatternClockVisualization","PatternDotVisualization","degreesPerSecond","hz","DerezPatternDotVisualization","StaticImageVisualization","imageUrl","imgElement","onload","drawImage","src","PatternFlagVisualization","PatternMarquee2Visualization","paths","generateGaragePaths","path","ledAddress","indexesByHardwareChannel","results","getIndexesGroupedByHardwareChannel","headPath","pushAll","reverse","first","PatternMarqueeVisualization","ledAddresses","bottomRow","bottomRowCount","PatternOwlEyesVisualization","Recycler","objectCreator","deadObjects","pop","object","UnorderedRecycledSet","recycler","liveObjects","getOrCreate","lastObject","removeAtIndex","deadIndexes","forEachReverse","Particle","distance","angleRadians","PatternParticleFireVisualization","numParticlesToAddRemainder","particles","baseHue","withObjectCreator","numParticlesToAdd","particle","forEachAndFilter","DerezPatternParticleFireVisualization","PatternRain2Visualization","PatternRainbowVisualization","ludicrousSpeedButton","speedDial","createDialControl","minValue","maxValue","createButtonControl","ludicrousSpeed","mid","DerezPatternRainbowVisualization","PatternSparklesVisualization","PureWingFlapVisualization","positionTimeSeries","positionNormalized","rowV","rowColor","tippiness","PatternWingFlapVisualization","PatternZapsVisualization","ribChannels","channelValues","numColumns","rowLeds","rowChannels","myNumColumns","leftRow","rightRow","column","decayAmount","millisBetweenZaps","doZap","PatternZoomVisualization","ZOOM_SPEED","drawCircle","DerezPatternZoomVisualization","PlaylistVisualization","entries","lastVisualization","currentVisualization","currentVisualizationIndex","currentBranchedAudioNode","timeAtSwitch","secondsUntilSwitch","button","visualizations","switchToVisualization","entry","disconnect","audioNode","newNode","GainNode","branchAudioNode","reset","element","labelElement","innerText","displayName","fontSize","padding","appendChild","containerElement","buttonNumber","newConfig","newElement","innerHTML","vis","visualization","duration","pressedSinceLastFrame","goToNextVisualization","BurrowPlaylistVisualization","FourierTwinkleVisualization","TestPlaylistVisualization","dx","TestAbletonLink","duringBeatTimeSeries","progressToNextBeatTimeSeries","timeSinceLastBeatTimeSeries","duringBeat","TestAudioAndAbletonLink","analyserHelpers","loudnessTimeSeries","currentRMSAmplitudeTimeSeries","loudness","BasicFFTHelper","frequencyDataBuffer","FFT_SIZE","TestAudioPulseVisualization","fft","pulseValueTimeSeries","frequencyData","getFrequencyData","total","pulseValue","midPoint","pulseWidth","endIndex","CANVAS_SCALE","FloatDataCanvasHelper","scale","overrideData","TestAudioWaveformVisualization","canvasHelper","lowTimeSeries","highTimeSeries","TestControllerDialVisualization","rDial","gDial","bDial","timeSerieses","rValue","gValue","bValue","rDistance","gDistance","bDistance","blue","COLOR_PRESSED","COLOR_RELEASED","PALETTE","TestKeyFadeVisualization","colorForValue","TestKeyVisualization","isPressed","MultiLevelHelper","lowHelper","highHelper","TestBandsVisualization","low2TS","high2TS","memoize","physicalWidth","physicalHeight","ledDataOffsets","MappedCanvasVisualization","dataOffset","ledIndex","offsetX","offsetY","polarity","SQUARES_SIZE","video","VideoFile","autoplay","loop","display","noteColors","TestPitchVisualization","rawFreqTimeSeries","freqTimeSeries","amplitudeTimeSeries","sampleRate","maHelper","thresholdValue","findMeanPositiveValue","distanceBetweenPeaks","threshold","hasCrossedZeroSincePeak","peakIndices","currentPeakWeightedSum","currentPeakTotalWeight","weight","peakIndex","meanDistanceBetweenPeaks","sampledFreq","addValue","freq","note","log2","updateFuncs","attachBooleanTimeSeries","signalName","yValue","attachNumberTimeSeries","scaledMinY","scaledMaxY","mapToNormalizedValue","attachTimeSeries","CHANNEL_START_COLOR","TestStripAddressVisualization","timeCounter","pulseLocationFloat","channelHueIncrement","maxChannel","numChannels","pulseLocation","colorForPixel","TestTimeseriesDataVisualization","aTimeSeries","bTimeSeries","cTimeSeries","TestVisualizerExtraDisplayVisualization","totalMillis","fontFamily","TestWingTrianglesVisualization","ledConfigs","maxTriangleIdx","maxIndexForChannel","myData","hci","triangle","triangleHues","triangleHueStep","myLedData","isFirstOrLastLed","baseColor","ledConfig","registryBuilder","BeatRainVisualization","ScopeFFTVisualization","ScopeWaveformVisualization","TestLevelsVisualization","TestMappedCanvasVisualization","TestMappedVideoVisualization","TestSignalsVisualization","build","AudioIn","onAudioSourceChanged","inputDevicesInternal","deviceListChangedListeners","currentDeviceId","currentAudioContext","currentAudioSource","isValidId","id","inputDevices","find","d","setDevices","devices","kind","deviceId","label","listener","call","doAsyncInit","navigator","mediaDevices","getUserMedia","audio","enumerateDevices","then","defaultDevice","setCurrentAudioSource","audioConstraints","autoGainControl","echoCancellation","noiseSuppression","stream","createMediaStreamSource","splitter","createChannelSplitter","gain","channelCount","newAudioContext","newAudioSource","close","eventType","removeFirst","AbletonLinkConnect","instance","Implementation","getHz","requestStatus","ws","reconnectTimeout","aBeatTime","lastBeatSync","tryConnectNow","clearTimeout","WebSocket","onopen","onWebSocketOpen","onclose","onWebSocketClose","onmessage","onLinkMessage","protectedSend","ev","tryConnectSoon","msg","str","readyState","OPEN","send","TextEncoder","encode","blob","reader","FileReader","lines","result","match","parseFloat","beat","nowInSeconds","readAsText","setInterval","setTimeout","lag","period","beats","ManualBeatController","firstBeatStartTime","performance","beatLengthMillis","prevPressTime","tapsInSequence","BeatControlView","onMouseDown","props","onTap","setState","bpm","buttonRef","setButtonRef","newRef","animate","labelRef","setLabelRef","label2Ref","setLabel2Ref","isAlive","requestAnimationFrame","beatPhase","className","styles","root","renderButton","ref","React","MyButton","setButtonValue","addEventListener","onMouseUp","removeListeners","removeEventListener","MyDial","state","isDragging","startDragValue","startDragX","event","pageX","onMouseMove","setDialValue","join","transform","ControlsView","stateChangeTimeout","controllerState","setButtonState","forceUpdate","dialValues","renderButtons","renderDials","render4by2","buttonStates","renderFunc","flipped","FadecandyClient","resetAllKeysMidiDatas","output","midiKey","NUM_KEYS","VisualizationStateHelper","applyPressOrReleaseEvent","isPress","toHex","MidiEvent","suppressDisplay","isNoteworthy","pianoEvent","statusDescription","describeStatusByte","PianoHelpers","parts","Object","JSON","stringify","MidiEventEmitter","listeners","onMidiEvent","QueuedMidiEventEmitter","pendingEvents","nextTimeout","latestTimestamp","dequeueEvents","head","timestamp","shift","fire","scheduleDequeueIfNeeded","nextTimestamp","delay","cm","classes","resultParts","args","arg","isBlackKey","WHITE_KEY_WIDTH_PCT","WHITE_KEY_WIDTH_PCT_STR","BLACK_KEY_WIDTH_PCT","BLACK_KEY_WIDTH_PCT_STR","PianoKey","isBlack","pressed","left","PianoView","registeredMidiEventEmitter","keyRefs","refreshMidiEventEmitter","whiteKeys","blackKeys","piano","unregisterMidiEventEmitter","current","setIsPressed","setKeyPressed","midiEventEmitter","addListener","removeListener","arrayOf8Values","ControllerState","pressesSinceLastFrame","releasesSinceLastFrame","removeAll","oldDerez","oldBrightness","statusByte","buttonIndex","dialIndex","valueNormalized","RightSidebar","renderSceneSelector","renderVisualizationGroupSelector","renderVisualizationSelector","renderAudioInputDevices","renderPianoMidiInputDevices","renderPianoMidiThruDevices","renderControllerMidiDevices","renderBeatControllerDevices","process","renderDropDownOption","currentOption","selectedSceneName","sceneNames","optionToValueFunc","identity","onChange","actions","setSelectedSceneName","selectedVisualizationGroupName","visualizationGroupNames","setSelectedVisualizationGroupName","selectedVisualizationName","visualizationNames","setSelectedVisualizationName","audioInputs","selectedAudioInput","opt","optionToLabelFunc","setAudioInput","renderMidiDropDownOption","selectedPianoMidiInput","midiInputs","setPianoMidiInput","selectedPianoMidiThru","midiOutputs","setPianoMidiThru","selectedControllerMidiInput","setControllerMidiInput","selectedBeatControllerType","setBeatControllerType","optionValues","optionLabels","indexOf","tabIndex","initializeScene","renderScene","Three","light","castShadow","receiveShadow","LedMesh","geometry","material","removeFromScene","MATERIAL","clone","mesh","remove","side","LedMeshFactory","ledRadius","ledGeometry","LedSceneStrip","ledMeshes","onSend","averageSendTime","setColor","setRange","LedScene","doRender","ledStrip","factory","createAt","m","SimulationRenderer","renderer","composer","renderPass","bloomPass","camera","controls","ledScene","frameDidRender","enableBloom","startTime","renderMillis","updateSizes","container","clientWidth","clientHeight","effectivePixelRatio","window","devicePixelRatio","aspect","updateProjectionMatrix","setSize","setPixelRatio","antialias","preserveDrawingBuffer","outputEncoding","sRGBEncoding","OrbitControls","domElement","EffectComposer","RenderPass","UnrealBloomPass","addPass","oldContainer","removeChild","newScene","newRenderScene","loadModel","model","cameraStartPosition","cameraTarget","simulationLedStrip","newVisualizationRunner","SimulationViewport","simulationRenderer","setContainer","onWindowBlur","active","onWindowFocus","destroy","visualizationRunner","LOCAL_STORAGE_PREFIX","json","localStorage","getItem","parse","validateFunc","defaultValue","setItem","HeatmapDrawHelper","targetContext","heatmap","targetCanvas","dy","TimeseriesView","heatmapDrawHelper","setRef","imageData","drawHeatmapColumn","VisualizerExtraDisplayContainer","currentElement","currentRef","nextProps","prevState","TARGET_MILLIS","TimingStatsView","message","lastUpdateTime","updateInterval","timings","getTimings","timeElapsed","fps","framesRenderedSinceLastCall","vLoad","visualizationMillis","fLoad","fadeCandyMillis","rLoad","load","clearInterval","message2","MyFrameContext","frameHeatmapValues","UNSET","startFrame","endFrame","applyEvent","DEFAULT_COLOR_ORDER","TimeSeriesHelper","usedColors","nextDefaultColor","MyDialControl","dialNumber","MyButtonControl","ASSIGNABLE_DIAL_NUMBERS","ASSIGNABLE_BUTTON_NUMBERS","ControllerStateHelper","forceUpdateUI","usedDialNumbers","usedButtonNumbers","nextDialNumber","nextButtonNumber","VisualizationRunner","lastRenderTime","hardwareLedSender","adjustedLeds","frameContext","timeSeriesHelper","brightnessDial","derezDial","signalsHelper","controllerStateHelper","visualizationConfig","setVisualizerExtraDisplay","yellow","visualizationRegistry","createVisualization","visTimeMillis","sendToStrips","frameTimeseriesPoints","applyPianoEvent","strip","TARGET_FRAME_MILLIS","tryGetById","objs","obj","createIsValidIdFunc","getByStickyIdKeyOrFirst","idOrNull","SimulatorStickySettings","getById","LedStudioRoot","midiControllerEventEmitter","fadecandyClient","audioIn","configureVisualization","_isMounted","handleClickSimulationToggleSwitch","simulationEnabled","getMessage2","displayMessage","setMidiInput","midiInput","onMidiInputMessage","resetAllKeys","setMidiControllerInput","midiControllerInput","onMidiControllerInputMessage","setMidiOutput","midiOutput","updateMidiDevices","midiState","status","webMidi","inputs","outputs","createBeatControllerType","actionManager","scenes","visualizationGroupName","visualizationNamesInGroup","newId","setCurrentDeviceId","handleEvent","updateControlsView","myMidiListener","onPianoEvent","animating","prevAnimationStartTimeTarget","nextAnimationTimeout","scheduleNextAnimationFrame","nextAnimationStartTime","renderFrame","framesRenderedSinceLastTimingsCall","timeseriesViewRef","displayData","fadecandyLedSender","averageRenderTime","renderTimingHelper","simulationFrameDidRender","updateAudioInDevices","isInitialization","initialAudioInDevice","setTimeseriesViewRef","controlsViewRef","setControlsViewRef","onStateChange","initialScene","initialVisualizationGroupName","initialVisualizationName","initialSimulationEnabled","initialBeatController","requestMIDIAccess","defaultInput","defaultControllerInput","defaultOutput","catch","reason","midiFailureReason","startAnimation","stopAnimation","visualizerExtraDisplay","renderSimulationToggleSwitch","renderSidebarContents","onClick","beatControllerType","groupNames","midiEventEmitters","doNotSetState","isInConfigure","newVisualizerExtraDisplay","runner","firstKey","defaultDeviceId","inputDeviceById","location","search","LedStudioRootWrapper","counter","INCH","METER","FOOT","map2dTo3d","rightDelta","rightDirection","normalize","upDelta","upDirection","angle","angleTo","point","bottomLeft","addScaledVector","boxHelper","depth","translate","translateBy","z","EXTRA_OBJECT_MATERIAL_GREEN","transparent","banquetTable","tableWidth","tableDepth","legHeight","Vector3","riserHeight","leg","thisLeg","legX","legZ","riser","rotateY","children","translateY","createBurrowVenue","tablesTranslateZ","keyboardInFront","keyboardTranslateZ","shoulderHeight","hideKeyboard","url","extraObjects","djTables","FLOOR_MATERIAL","Scene","def","lazyModelPromise","displayValues","cachedDisplayMessage","setDisplayValue","promisify","callback","modelDef","GLTFLoader","gltf","boundingBox","setFromObject","getCenter","bottomY","translateX","translateZ","error","addExtraObjects","floorSizeOverride","floorSize","floorGeometry","rotateX","startPosition","initialDisplayValues","initDisplayValuesIfNeeded","LED_SPACING","SMALL_TRIANGLE_LED_COUNTS","LARGE_TRIANGLE_LED_COUNTS","smallDeltaX","makeRib","end","toward","sub","multiplyScalar","delta","shortenBy","skipFirst","spacing","nextPoint","firstPoint","numPoints","nPointsInDirection","SimulationUtils","createTrianglePositions2d","deltaX","deltaY","ledCounts","BurrowRealWingsScene","positions2d","smallLeftRibs","largeLeftRibs","allLeftRibs","interleave","flipX","allRightRibs","calculateLedPositions2d","ribLengths","positions3d","ribPositions","ribIndex","postPositionX","venue","createVenue","moveToPositionAndRotate","useLastLed","angleDegrees","origin","ledToMoveToOrigin","last","innerLeds","rotateAround","GarageRealWingsScene","smallSeparation","largeSeparation","MeshBasicMaterial","DoubleSide","makeLedSegments","segments","firstRowHint","rowHintOffset","segment","endPoint","startPoint","divideScalar","PianoThreeStripesScene","App","Scenes","Visualizations","Boolean","hostname","ReactDOM","getElementById","serviceWorker","ready","registration","unregister","updateValues","floatToString","precision","roundAdjustment","intPart","fracPart","slice","createBracketFunc","item","splice","numValues","valueOrUndefined","iterator","Symbol","next","done","ai"],"mappings":"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","file":"static/js/main.e24b8e25.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"PianoView_root__1Twcj\",\"pressed\":\"PianoView_pressed__2NrJK\",\"piano\":\"PianoView_piano__26Z1l\",\"whiteKey\":\"PianoView_whiteKey__3Xlsl\",\"blackKey\":\"PianoView_blackKey__oQHdZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"BeatControlView_root__3iwF6\",\"button\":\"BeatControlView_button__2Gt_2\",\"pressed\":\"BeatControlView_pressed__-CDyy\"};","import * as Colors from \"../portable/base/Colors\";\nimport FixedArray from \"../portable/base/FixedArray\";\nimport LedMetadata from \"../portable/base/LedMetadata\";\nimport { MovingAverageHelper } from \"../util/Utils\";\nimport FadecandyClient from \"./FadecandyClient\";\n\nconst HEADER_LENGTH = 4;\n\nexport default class FadecandyLedSender {\n  private readonly client: FadecandyClient;\n  private readonly timingHelper: MovingAverageHelper = new MovingAverageHelper(\n    20\n  );\n  private readonly channelToBufferMap: Map<number, Buffer>;\n  private readonly leds: LedMetadata[];\n\n  constructor(client: FadecandyClient, leds: LedMetadata[]) {\n    this.client = client;\n    this.leds = leds;\n\n    const channelToIndicesMap = new Map<number, number[]>();\n    leds.forEach(led => {\n      let indices = channelToIndicesMap.get(led.hardwareChannel);\n      if (indices === undefined) {\n        indices = [];\n        channelToIndicesMap.set(led.hardwareChannel, indices);\n      }\n      indices.push(led.hardwareIndex);\n    });\n\n    this.channelToBufferMap = new Map();\n    const channelToLedCountMap = new Map<number, number>();\n    channelToIndicesMap.forEach((indices: number[], channel: number) => {\n      // validate\n      indices.sort((a, b) => a - b);\n      indices.forEach((idx, i) => {\n        if (idx < i) {\n          throw new Error(`channel ${channel} has duplicate index ${i}`);\n        } else if (idx > i) {\n          throw new Error(`channel ${channel} skipped index before ${i}`);\n        }\n      });\n\n      // initialize buffer\n      const numLeds = indices.length;\n      channelToLedCountMap.set(channel, numLeds);\n      const buffer = new Buffer(HEADER_LENGTH + 3 * numLeds).fill(0);\n      buffer.writeUInt8(channel, 0); // channel\n      buffer.writeUInt8(0, 1); // command\n      buffer.writeUInt16BE(0, 2); // length is supposed to be 0 over websocket\n\n      this.channelToBufferMap.set(channel, buffer);\n    });\n  }\n\n  public send(colorRow: FixedArray<Colors.Color>) {\n    this.timingHelper.addTiming(() => {\n      // update buffers with these colors\n      const ledRow = this.leds;\n      if (colorRow.length !== ledRow.length) {\n        throw new Error(\"colorRow length doesn't match led row length\");\n      }\n\n      colorRow.forEach((color, i) => {\n        const led = ledRow[i];\n        const buffer = this.channelToBufferMap.get(led.hardwareChannel);\n        if (buffer === undefined) {\n          throw new Error(\"couldn't find buffer for channel\");\n        }\n\n        const [r, g, b] = Colors.splitRGB(color);\n        const offset = HEADER_LENGTH + led.hardwareIndex * 3;\n        buffer.writeUInt8(r, offset);\n        buffer.writeUInt8(g, offset + 1);\n        buffer.writeUInt8(b, offset + 2);\n      });\n    });\n\n    // send the buffers\n    this.channelToBufferMap.forEach(buffer => {\n      this.client.sendData(buffer);\n    });\n  }\n\n  public get averageSendTime() {\n    return this.timingHelper.movingAverage;\n  }\n}\n","import * as Utils from \"../../util/Utils\";\n\nexport type Color = number;\n\nconst MAX_VALUE = 0xff;\n\n// 0-MAX_VALUE for each\nexport function rgbUnchecked(r: number, g: number, b: number): Color {\n  // tslint:disable-next-line: no-bitwise\n  return (r << 16) | (g << 8) | b;\n}\n\nexport function splitRGB(color: Color): [number, number, number] {\n  // tslint:disable-next-line: no-bitwise\n  return [(color >> 16) & 0xff, (color >> 8) & 0xff, color & 0xff];\n}\n\nexport function cssColor(color: Color): string {\n  const [r, g, b] = splitRGB(color);\n  return `rgb(${r}, ${g}, ${b})`;\n}\n\nexport function hex2Color(hex: string): Color {\n  if (hex.startsWith(\"#\")) {\n    hex = hex.substr(1);\n  }\n  hex = hex.toLowerCase();\n  const codes = [hex.substr(0, 2), hex.substr(2, 2), hex.substr(4, 2)];\n  return rgbUnchecked.apply(\n    null,\n    codes.map(code => parseInt(code, 16)) as [number, number, number]\n  );\n}\n\n// h in [0., 360.0)\n// s in [0, 1]\n// b in [0, 1]\nfunction hsvUnchecked(h: number, s: number, v: number): Color {\n  let r: number;\n  let g: number;\n  let b: number;\n  const sector = h / 60;\n  const i = Math.floor(sector);\n  const f = sector - i; // remainder part of h\n  const p = v * (1 - s);\n  const q = v * (1 - s * f);\n  const t = v * (1 - s * (1 - f));\n  switch (i) {\n    case 0:\n      r = v;\n      g = t;\n      b = p;\n      break;\n\n    case 1:\n      r = q;\n      g = v;\n      b = p;\n      break;\n\n    case 2:\n      r = p;\n      g = v;\n      b = t;\n      break;\n\n    case 3:\n      r = p;\n      g = q;\n      b = v;\n      break;\n\n    case 4:\n      r = t;\n      g = p;\n      b = v;\n      break;\n\n    default:\n      // (5)\n      r = v;\n      g = p;\n      b = q;\n      break;\n  }\n\n  return rgbUnchecked(r * MAX_VALUE, g * MAX_VALUE, b * MAX_VALUE);\n}\n\nconst bracket01 = Utils.bracket01;\nconst bracket0MAX = Utils.createBracketFunc(0, MAX_VALUE);\n\nexport function rgb(r: number, g: number, b: number): Color {\n  return rgbUnchecked(\n    bracket01(r) * MAX_VALUE,\n    bracket01(g) * MAX_VALUE,\n    bracket01(b) * MAX_VALUE\n  );\n}\n\nexport function split(color: Color): [number, number, number] {\n  const splitRgb = splitRGB(color);\n  return [\n    splitRgb[0] / MAX_VALUE,\n    splitRgb[1] / MAX_VALUE,\n    splitRgb[2] / MAX_VALUE\n  ];\n}\n\nexport function hsv(h: number, s: number, v: number): Color {\n  h = h % 360;\n  if (h < 0) {\n    h += 360;\n  }\n  return hsvUnchecked(h, bracket01(s), bracket01(v));\n}\n\nexport function add(a: Color, b: Color): Color {\n  const [ar, ag, ab] = splitRGB(a);\n  const [br, bg, bb] = splitRGB(b);\n  return rgbUnchecked(\n    bracket0MAX(ar + br),\n    bracket0MAX(ag + bg),\n    bracket0MAX(ab + bb)\n  );\n}\n\nexport function average(a: Color, b: Color): Color {\n  const [ar, ag, ab] = splitRGB(a);\n  const [br, bg, bb] = splitRGB(b);\n  return rgbUnchecked(\n    bracket0MAX(Math.floor((ar + br) / 2)),\n    bracket0MAX(Math.floor((ag + bg) / 2)),\n    bracket0MAX(Math.floor((ab + bb) / 2))\n  );\n}\n\nexport function multiply(a: Color, factor: number): Color {\n  const [ar, ag, ab] = splitRGB(a);\n  return rgbUnchecked(\n    bracket0MAX(Math.floor(ar * factor)),\n    bracket0MAX(Math.floor(ag * factor)),\n    bracket0MAX(Math.floor(ab * factor))\n  );\n}\n\nfunction fadeLinearUnchecked(\n  fromColor: Color,\n  toColor: Color,\n  v: number\n): Color {\n  return add(multiply(fromColor, 1 - v), multiply(toColor, v));\n}\n\nexport function fadeLinear(fromColor: Color, toColor: Color, v: number): Color {\n  return fadeLinearUnchecked(fromColor, toColor, bracket01(v));\n}\n\nexport function createPaletteFadeLinear(\n  fromColor: Color,\n  toColor: Color,\n  size: number\n): Color[] {\n  return Utils.fillArray(size, (i: number) => {\n    const v = i / (size - 1);\n    return fadeLinearUnchecked(fromColor, toColor, v);\n  });\n}\n\nexport const BLACK = rgb(0, 0, 0);\nexport const WHITE = rgb(1, 1, 1);\nexport const RED = rgb(1, 0, 0);\nexport const GREEN = rgb(0, 1, 0);\nexport const BLUE = rgb(0, 0, 1);\nexport const YELLOW = rgb(1, 1, 0);\nexport const ORANGE = rgb(1, 0.5, 0);\nexport const CYAN = rgb(0, 1, 1);\nexport const PURPLE = rgb(1, 0, 1);\nexport const CHARTREUSE = rgb(0.5, 1, 0);\n","import { valueOrThrow } from \"../util/Utils\";\nimport * as Visualization from \"./base/Visualization\";\n\nexport interface VisualizationRegistry {\n  readonly groupNames: ReadonlyArray<string>;\n  visualizationNamesInGroup(groupName: string): ReadonlyArray<string>;\n  createVisualization(\n    visualizationName: string,\n    config: Visualization.Config\n  ): Visualization.default;\n}\n\nclass VisualizationRegistryImpl implements VisualizationRegistry {\n  private readonly groupedNames: Map<string, string[]> = new Map();\n  private readonly flatMap: Map<string, Visualization.Constructor> = new Map();\n  private cachedGroupNames: string[] | undefined;\n\n  public get groupNames() {\n    if (this.cachedGroupNames === undefined) {\n      this.cachedGroupNames = Array.from(this.groupedNames.keys());\n    }\n    return this.cachedGroupNames;\n  }\n\n  public visualizationNamesInGroup(groupName: string) {\n    return valueOrThrow(this.groupedNames.get(groupName));\n  }\n\n  public createVisualization(\n    visualizationName: string,\n    config: Visualization.Config\n  ) {\n    const ctor = valueOrThrow(this.flatMap.get(visualizationName));\n    return new ctor(config);\n  }\n\n  public add(groupName: string, name: string, ctor: Visualization.Constructor) {\n    // clear caches\n    this.cachedGroupNames = undefined;\n\n    // ensure this vis name is globally unique\n    if (this.flatMap.has(name)) {\n      throw new Error(`tried to add multiple visualizations named \"${name}\"`);\n    }\n\n    // add to group\n    let visNamesInGroup = this.groupedNames.get(groupName);\n    if (visNamesInGroup === undefined) {\n      visNamesInGroup = [];\n      this.groupedNames.set(groupName, visNamesInGroup);\n    }\n    visNamesInGroup.push(name);\n\n    // add\n    this.flatMap.set(name, ctor);\n  }\n}\n\nexport class VisualizationRegistryBuilder {\n  private readonly registry = new VisualizationRegistryImpl();\n  private built = false;\n\n  public build(): VisualizationRegistry {\n    this.built = true;\n    return this.registry;\n  }\n\n  public add(groupName: string, name: string, ctor: Visualization.Constructor) {\n    if (this.built) {\n      throw new Error(\"can't add after registry has been built\");\n    }\n    this.registry.add(groupName, name, ctor);\n  }\n}\n","export default class FixedArray<T> {\n  private readonly items: T[];\n\n  public static from<T>(arr: T[]): FixedArray<T> {\n    return new this(arr.length, i => arr[i]);\n  }\n\n  public static ofValue<T>(length: number, value: T): FixedArray<T> {\n    return new this(length, _ => value);\n  }\n\n  public constructor(length: number, initializer: (i: number) => T) {\n    this.items = new Array<T>(length);\n    for (let i = 0; i < length; ++i) {\n      this.items[i] = initializer(i);\n    }\n  }\n\n  public get length() {\n    return this.items.length;\n  }\n\n  public get(i: number) {\n    if (i < 0 || i >= this.items.length) {\n      throw new Error(`invalid index: ${i}`);\n    }\n    return this.items[i];\n  }\n\n  public getOr<T2>(i: number, or: T): T | T2 {\n    if (i < 0 || i >= this.items.length) {\n      return or;\n    }\n    return this.items[i];\n  }\n\n  public set(i: number, value: T, strict?: boolean) {\n    if (i < 0 || i >= this.items.length) {\n      if (strict) {\n        throw new Error(`invalid index: ${i}`);\n      }\n    } else {\n      this.items[i] = value;\n    }\n  }\n\n  public fill(value: T) {\n    this.items.fill(value);\n  }\n\n  public fillRange(startIndex: number, count: number, value: T) {\n    for (let i = startIndex; i < startIndex + count; ++i) {\n      this.set(i, value);\n    }\n  }\n\n  public map<V>(func: (value: T, index: number) => V): FixedArray<V> {\n    return FixedArray.from(this.mapToArray(func));\n  }\n\n  public mapToArray<V>(func: (value: T, index: number) => V): V[] {\n    return this.items.map(func);\n  }\n\n  public forEach(func: (value: T, i: number) => void) {\n    this.items.forEach(func);\n  }\n\n  public toString() {\n    return this.items.toString();\n  }\n\n  public copy(\n    target: FixedArray<T>,\n    targetStart?: number,\n    sourceStart?: number,\n    sourceEnd?: number\n  ) {\n    let adjTargetStart = targetStart || 0;\n    if (adjTargetStart >= target.length) {\n      return;\n    }\n\n    let adjSourceStart = sourceStart || 0;\n    if (adjSourceStart < 0) {\n      throw new Error(\"sourceStart is < 0\");\n    }\n\n    const adjSourceEnd = Math.min(this.length, sourceEnd || this.length);\n\n    if (adjTargetStart < 0) {\n      adjSourceStart += -1 * adjTargetStart;\n      adjTargetStart = 0;\n    }\n\n    const n = Math.min(\n      adjSourceEnd - adjSourceStart,\n      target.length - adjTargetStart\n    );\n    for (let i = 0; i < n; ++i) {\n      target.set(adjTargetStart + i, this.get(adjSourceStart + i));\n    }\n  }\n\n  public toArray(): T[] {\n    return [...this.items];\n  }\n\n  // don't allow direct indexing\n  [n: number]: { __invalid: never };\n}\n","import * as Colors from \"./Colors\";\nimport FixedArray from \"./FixedArray\";\n\nexport default class ColorRow extends FixedArray<Colors.Color> {\n  private readonly defaultColor: Colors.Color;\n\n  constructor(length: number, defaultColor?: Colors.Color) {\n    const dc = defaultColor || Colors.BLACK;\n    super(length, _ => dc);\n    this.defaultColor = dc;\n  }\n\n  public get(i: number): Colors.Color {\n    return this.getOr(i, this.defaultColor);\n  }\n\n  public add(i: number, color: Colors.Color) {\n    this.set(i, Colors.add(this.get(i), color));\n  }\n\n  public addAll(colorToAdd: Colors.Color) {\n    this.forEach((color, i) => this.set(i, Colors.add(color, colorToAdd)));\n  }\n\n  public multiplyAll(factor: number) {\n    this.forEach((color, i) => this.set(i, Colors.multiply(color, factor)));\n  }\n\n  public copyFancy(\n    source: ColorRow,\n    options?: {\n      derezAmount?: number;\n      multiplyBy?: number;\n    }\n  ) {\n    if (options === undefined) {\n      options = {};\n    }\n\n    if (this.length !== source.length) {\n      throw new Error(\"expected 'this' to be a the same length as 'from'\");\n    }\n\n    for (let i = 0; i < source.length; ++i) {\n      if (\n        options.derezAmount === undefined ||\n        Math.random() > options.derezAmount\n      ) {\n        let color = source.get(i);\n        if (options.multiplyBy !== undefined) {\n          color = Colors.multiply(color, options.multiplyBy);\n        }\n        this.set(i, color);\n      }\n    }\n  }\n}\n","import ColorRow from \"../base/ColorRow\";\nimport FixedArray from \"../base/FixedArray\";\nimport LedMetadata from \"../base/LedMetadata\";\n\ninterface LedMetadataAndIndex {\n  metadata: LedMetadata;\n  index: number;\n}\n\nexport default class RowColumnLedMapper {\n  public readonly ledRows: FixedArray<ColorRow>;\n  private readonly originalIndices: number[][];\n  private readonly originalLedColors: ColorRow;\n  private readonly originalLedMetadatas: LedMetadata[];\n\n  constructor(ledMetadatas: LedMetadata[], ledColors: ColorRow) {\n    if (ledMetadatas.length !== ledColors.length) {\n      throw new Error(\"ledMetadatas isn't the same length as ledColors\");\n    }\n\n    if (ledMetadatas.length === 0) {\n      throw new Error(\"must have at least one LED\");\n    }\n\n    // create `groupedByRowRaw` which might not start at 0 and might have gaps\n    const groupedByRowRaw: LedMetadataAndIndex[][] = [];\n    let minRow = ledMetadatas[0].rowHint;\n    let maxRow = ledMetadatas[0].rowHint;\n    ledMetadatas.forEach((metadata, index) => {\n      const lmai: LedMetadataAndIndex = { metadata, index };\n      const row = metadata.rowHint;\n      if (row < minRow) {\n        minRow = row;\n      }\n      if (row > maxRow) {\n        maxRow = row;\n      }\n      let lmais: LedMetadataAndIndex[] | undefined = groupedByRowRaw[row];\n      if (lmais === undefined) {\n        lmais = [];\n        groupedByRowRaw[row] = lmais;\n      }\n      lmais.push(lmai);\n    });\n\n    // migrate to `groupedByRowClean` which starts at 0 and has at least an empty array for every row\n    const numRows = maxRow - minRow + 1;\n    const groupedByRowClean: LedMetadataAndIndex[][] = new Array(numRows);\n    for (let i = 0; i < numRows; ++i) {\n      const row = minRow + i;\n      groupedByRowClean[i] = groupedByRowRaw[row] || [];\n    }\n\n    // sort every row in order of ascending x position\n    groupedByRowClean.forEach(lmaisForRow => {\n      lmaisForRow.sort((a, b) => a.metadata.position.x - b.metadata.position.x);\n    });\n\n    this.originalIndices = groupedByRowClean.map(lmaisForRow => {\n      return lmaisForRow.map(lmai => lmai.index);\n    });\n\n    this.ledRows = new FixedArray(\n      this.originalIndices.length,\n      i => new ColorRow(this.originalIndices[i].length)\n    );\n\n    this.originalLedColors = ledColors;\n    this.originalLedMetadatas = ledMetadatas;\n  }\n\n  private cachedRowLedMetadatas: LedMetadata[][] | undefined;\n  public get rowLedMetadatas(): LedMetadata[][] {\n    if (this.cachedRowLedMetadatas === undefined) {\n      this.cachedRowLedMetadatas = this.originalIndices.map(rowIndices => {\n        return rowIndices.map(i => this.originalLedMetadatas[i]);\n      });\n    }\n    return this.cachedRowLedMetadatas;\n  }\n\n  // TODO make it so operations automatically get applied to the `originalLedColors` and this method isn't needed\n  public finishFrame() {\n    this.ledRows.forEach((ledRow, rowNum) => {\n      const rowOriginalIndices = this.originalIndices[rowNum];\n      ledRow.forEach((color, i) => {\n        const originalIndex = rowOriginalIndices[i];\n        this.originalLedColors.set(originalIndex, color);\n      });\n    });\n  }\n}\n","export default class FancyValue {\n  public value: number;\n\n  constructor(initialValue?: number) {\n    this.value = initialValue === undefined ? NaN : initialValue;\n  }\n\n  public decayLinearAmount(amount: number) {\n    this.value = Math.max(0, this.value - amount);\n    return this.value;\n  }\n\n  public decayLinearRate(rate: number, interval: number) {\n    return this.decayLinearAmount(rate * interval);\n  }\n\n  public decayExponential(halfLife: number, interval: number) {\n    this.value *= Math.pow(0.5, interval / halfLife);\n    return this.value;\n  }\n\n  public bumpTo(value: number) {\n    if (value > this.value || isNaN(this.value)) {\n      this.value = value;\n    }\n  }\n}\n","import Scene from \"../../scenes/Scene\";\nimport RowColumnLedMapper from \"../visualizationUtils/RowColumnLedMapper\";\nimport { Signals } from \"../visualizationUtils/SignalsHelper\";\nimport BeatController from \"./BeatController\";\nimport ColorRow from \"./ColorRow\";\nimport * as Colors from \"./Colors\";\nimport FancyValue from \"./FancyValue\";\nimport FixedArray from \"./FixedArray\";\nimport LedMetadata from \"./LedMetadata\";\nimport PianoState from \"./PianoState\";\n\nexport class TimeSeriesValue extends FancyValue {\n  public readonly color: Colors.Color;\n\n  constructor(color: Colors.Color, initialValue?: number) {\n    super(initialValue);\n    this.color = color;\n  }\n}\n\nexport interface EasyTimeSeriesValueSetters {\n  white: TimeSeriesValue;\n  blue: TimeSeriesValue;\n  red: TimeSeriesValue;\n  yellow: TimeSeriesValue;\n  green: TimeSeriesValue;\n  orange: TimeSeriesValue;\n}\n\nexport interface ButtonControl {\n  readonly value: boolean;\n  readonly pressedSinceLastFrame: boolean;\n  readonly releasedSinceLastFrame: boolean;\n}\n\nexport interface DialControl {\n  // value will be between `minValue` and `maxValue` specified when it was created\n  readonly value: number;\n}\n\nexport interface Config {\n  readonly scene: Scene;\n  readonly audioSource?: AudioNode;\n  readonly signals: Signals;\n  setExtraDisplay: (element: HTMLElement) => void;\n\n  createTimeSeries: (attrs?: {\n    // if `color` is not defined, will try to pick something reasonable\n    color?: Colors.Color;\n  }) => TimeSeriesValue;\n\n  createEasyTimeSeriesSet: () => EasyTimeSeriesValueSetters;\n\n  createButtonControl: (attrs?: {\n    // label?: string;\n\n    // if not specified, will use the next unused button\n    // - this is 1-indexed, as that is how they are labeled on the device\n    buttonNumber?: number;\n  }) => ButtonControl;\n\n  createDialControl: (attrs?: {\n    // label?: string;\n\n    // if not specified, will use the next unused dial\n    // - this is 1-indexed, as that is how they are labeled on the device\n    // - dial #8 is reserved for global brightness; visualizations can still\n    //   read it and set its initial value though\n    dialNumber?: number;\n\n    // default 0\n    minValue?: number;\n\n    // default 1; must be > minValue\n    maxValue?: number;\n\n    // defaults to `minValue`\n    initialValue?: number;\n  }) => DialControl;\n\n  // resets all of the state (dials created, timeseries created, etc).\n  // does not need to be called by normal visualizations\n  reset(): void;\n}\n\nexport interface FrameContext {\n  elapsedMillis: number; // deprecated\n  elapsedSeconds: number;\n\n  pianoState: PianoState;\n\n  beatController: BeatController;\n\n  setFrameHeatmapValues: (data: number[]) => void;\n}\n\nexport default abstract class Visualization {\n  public readonly config: Config;\n  public readonly ledColors: ColorRow;\n\n  constructor(config: Config) {\n    this.config = config;\n    this.ledColors = new ColorRow(config.scene.ledMetadatas.length);\n  }\n\n  public abstract render(context: FrameContext): void;\n}\n\nexport abstract class RowColumnMappedVisualization extends Visualization {\n  protected readonly ledRows: FixedArray<ColorRow>;\n  protected readonly ledRowMetadatas: LedMetadata[][];\n  private readonly rowColumnMapper: RowColumnLedMapper;\n\n  constructor(config: Config) {\n    super(config);\n    this.rowColumnMapper = new RowColumnLedMapper(\n      config.scene.ledMetadatas,\n      this.ledColors\n    );\n    this.ledRowMetadatas = this.rowColumnMapper.rowLedMetadatas;\n    this.ledRows = this.rowColumnMapper.ledRows;\n  }\n\n  public render(context: FrameContext) {\n    this.renderRows(context);\n    this.rowColumnMapper.finishFrame();\n  }\n\n  public abstract renderRows(context: FrameContext): void;\n}\n\nexport abstract class SingleRowVisualization extends RowColumnMappedVisualization {\n  private static UNMAPPED_LED_COLOR = Colors.hsv(300, 1, 0.25);\n\n  protected readonly length: number;\n  protected readonly leds: ColorRow;\n\n  constructor(config: Config, overrideLength?: number) {\n    super(config);\n\n    if (overrideLength === undefined) {\n      this.length = Math.max.apply(\n        Math,\n        this.ledRows.mapToArray(cr => cr.length)\n      );\n    } else {\n      this.length = overrideLength;\n    }\n    this.leds = new ColorRow(this.length);\n  }\n\n  protected abstract renderSingleRow(context: FrameContext): void;\n\n  public renderRows(context: FrameContext): void {\n    this.renderSingleRow(context);\n\n    this.ledRows.forEach(ledRow => {\n      ledRow.fill(SingleRowVisualization.UNMAPPED_LED_COLOR);\n\n      const start = Math.floor((ledRow.length - this.length) / 2);\n      this.leds.copy(ledRow, start);\n    });\n  }\n}\n\nexport class DerezVisualization extends Visualization {\n  private readonly delegate: Visualization;\n  private readonly derez: number;\n\n  constructor(delegate: Visualization, derez: number) {\n    super(delegate.config);\n    this.delegate = delegate;\n    this.derez = derez;\n  }\n\n  public render(context: FrameContext): void {\n    this.delegate.render(context);\n    this.ledColors.copyFancy(this.delegate.ledColors, {\n      derezAmount: this.derez\n    });\n  }\n}\n\nexport type Constructor = new (config: Config) => Visualization;\n","import * as Colors from \"../../base/Colors\";\nimport LedMetadata from \"../../base/LedMetadata\";\nimport * as Visualization from \"../../base/Visualization\";\n\nconst CONSTANT_SPARKLE_RATE = 0;\nconst MIN_SPARKLES_PER_BEAT = 5;\nconst MAX_SPARKLES_PER_BEAT = 40;\nconst SPARKLE_HALF_LIFE_SECONDS = 0.05;\nconst FALL_MILLIS = 70;\nconst TOP_GLOW = Colors.hsv(210, 1, 0.01);\n\nconst DEREZ = 0.8;\n\ninterface LedAddress {\n  rowIndex: number;\n  index: number;\n}\n\ninterface Sparkle {\n  address: LedAddress;\n  color: Colors.Color;\n  millisUntilFall: number;\n}\n\nclass DropHelper {\n  private readonly fallGraph: LedAddress[][][];\n\n  constructor(ledRows: LedMetadata[][]) {\n    // construct \"fall graph\"; every location maps to the 0, 1, or 2 places it could fall to;\n    // that is, the next row's nearest LEDs down and to the left/right of this one\n    this.fallGraph = ledRows.map((ledRow, rowIndex) => {\n      const nextRow: LedMetadata[] | undefined = ledRows[rowIndex + 1];\n      const makeAddress = (index: number) => ({\n        rowIndex: rowIndex + 1,\n        index\n      });\n      return ledRow.map(led => {\n        if (nextRow === undefined || nextRow.length === 0) {\n          return [];\n        }\n        // find the index of the first LED in the next row that's further to the right (x dim) than this one\n        let i: number;\n        for (\n          i = 0;\n          i < nextRow.length && nextRow[i].position.x < led.position.x;\n          ++i\n        ) {\n          // no-op\n        }\n        if (i === 0) {\n          return [makeAddress(0)];\n        } else if (i >= nextRow.length) {\n          return [makeAddress(nextRow.length - 1)];\n        } else {\n          return [makeAddress(i - 1), makeAddress(i)];\n        }\n      });\n    });\n  }\n\n  public drop(address: LedAddress): LedAddress | null {\n    const targets =\n      (this.fallGraph[address.rowIndex] || [])[address.index] || [];\n    if (targets.length === 0) {\n      return null;\n    } else {\n      return targets[Math.floor(Math.random() * targets.length)];\n    }\n  }\n}\n\nclass PureVisualization extends Visualization.RowColumnMappedVisualization {\n  private readonly dropHelper: DropHelper;\n  private readonly sparkles: Set<Sparkle>;\n  private readonly ts: Visualization.EasyTimeSeriesValueSetters;\n\n  constructor(config: Visualization.Config) {\n    super(config);\n    this.dropHelper = new DropHelper(this.ledRowMetadatas);\n    this.sparkles = new Set();\n\n    this.ts = config.createEasyTimeSeriesSet();\n  }\n\n  public renderRows(context: Visualization.FrameContext): void {\n    const { signals } = this.config;\n    const { elapsedSeconds } = context;\n\n    // drops\n    const deadSparkles: Sparkle[] = [];\n    this.sparkles.forEach(sparkle => {\n      sparkle.millisUntilFall -= elapsedSeconds * 1000;\n      if (sparkle.millisUntilFall <= 0) {\n        const newAddress = this.dropHelper.drop(sparkle.address);\n        if (newAddress === null) {\n          deadSparkles.push(sparkle);\n        } else {\n          sparkle.address = newAddress;\n          sparkle.millisUntilFall = FALL_MILLIS;\n        }\n      }\n    });\n    deadSparkles.forEach(sparkle => this.sparkles.delete(sparkle));\n\n    // new sparkles\n    const numSparkles = signals.isNewBeat\n      ? signals.lowLevel * (MAX_SPARKLES_PER_BEAT - MIN_SPARKLES_PER_BEAT) +\n        MIN_SPARKLES_PER_BEAT\n      : CONSTANT_SPARKLE_RATE * elapsedSeconds;\n    for (let i = 0; i < numSparkles; ++i) {\n      const sparkle: Sparkle = {\n        address: {\n          rowIndex: 0,\n          index: Math.floor(Math.random() * this.ledRows.get(0).length)\n        },\n        color: Colors.hsv(\n          200 + Math.random() * 45,\n          Math.pow(Math.random(), 0.2),\n          Math.random() * 0.5 + 0.5\n        ),\n        millisUntilFall: FALL_MILLIS\n      };\n      this.sparkles.add(sparkle);\n    }\n    this.ts.red.value = numSparkles / MAX_SPARKLES_PER_BEAT;\n\n    // render\n\n    const multiplier = Math.pow(\n      0.5,\n      elapsedSeconds / SPARKLE_HALF_LIFE_SECONDS\n    );\n    this.ledRows.forEach(row =>\n      row.forEach((color, i) => row.set(i, Colors.multiply(color, multiplier)))\n    );\n\n    // this.ledRows.forEach(ledRow => ledRow.fill(Colors.BLACK));\n    this.sparkles.forEach(sparkle => {\n      this.ledRows\n        .get(sparkle.address.rowIndex)\n        .set(sparkle.address.index, sparkle.color);\n    });\n\n    const topRow = this.ledRows.get(0);\n    topRow.forEach((color, i) => topRow.set(i, Colors.add(color, TOP_GLOW)));\n  }\n}\n\nexport default class MyVisualization extends Visualization.DerezVisualization {\n  constructor(config: Visualization.Config) {\n    super(new PureVisualization(config), DEREZ);\n  }\n}\n","import palette from \"google-palette\";\n\nimport * as Colors from \"../base/Colors\";\n\nlet schemeIdx = 0;\n\nexport function randomPalette(size: number) {\n  if (size > 8) {\n    throw new Error(\"only get random palette's of size 8 or less\");\n  }\n  const schemes = [\n    \"cb-Accent\",\n    \"cb-Blues\",\n    \"cb-BrBG\",\n    \"mpn65\",\n    \"cb-BuGn\",\n    \"cb-Dark2\",\n    \"cb-GnBu\",\n    \"rainbow\",\n    \"cb-Greens\",\n    \"cb-OrRd\",\n    \"sol-accent\",\n    \"cb-PRGn\",\n    \"cb-PuBuGn\",\n    \"tol-dv\",\n    \"cb-PuOr\",\n    \"cb-PuRd\",\n    \"cb-RdBu\",\n    \"tol-rainbow\",\n    \"cb-RdYlGn\",\n    \"cb-Reds\",\n    \"cb-YlGnBu\",\n    \"cb-YlOrRd\"\n  ];\n  const scheme = schemes[schemeIdx];\n  console.log(scheme);\n  schemeIdx = (schemeIdx + 1) % schemes.length;\n  return (palette(scheme, size) as string[]).map(Colors.hex2Color);\n}\n","import { bracket01 } from \"../../../util/Utils\";\nimport ColorRow from \"../../base/ColorRow\";\nimport * as Colors from \"../../base/Colors\";\nimport * as Visualization from \"../../base/Visualization\";\nimport { Signals } from \"../../visualizationUtils/SignalsHelper\";\nimport { randomPalette } from \"../../visualizationUtils/Utils\";\n\nexport default class ExpandingDashesVisualization extends Visualization.RowColumnMappedVisualization {\n  private regularPalette: Colors.Color[] = [];\n  private dropPalette: Colors.Color[] = [];\n  private readonly wingDashPaires: number[];\n  private readonly wingDashPairRatioes: number[];\n  private readonly ezTS: Visualization.EasyTimeSeriesValueSetters;\n  private readonly signals: Signals;\n  private readonly colorOffset: number;\n  private lastPaletteSwap: number = -1;\n\n  constructor(config: Visualization.Config) {\n    super(config);\n    this.swapPalettes();\n    this.colorOffset = this.colorOffset = Math.floor(Math.random() * 3 + 1);\n    this.wingDashPaires = [0, 0, 0, 0].map(\n      _ => Math.round(Math.random() * 3) + 3\n    );\n    this.wingDashPairRatioes = [0.66, 0.34, 0.34, 0.66];\n\n    this.ezTS = config.createEasyTimeSeriesSet();\n    this.signals = config.signals;\n  }\n\n  public renderRows(context: Visualization.FrameContext): void {\n    if (\n      Date.now() - this.lastPaletteSwap > 30000 &&\n      this.signals.soundsLikeStrongBeat\n    ) {\n      this.swapPalettes();\n    }\n\n    this.ledRows.forEach(r => r.fill(Colors.BLACK));\n\n    this.ezTS.white.value = this.signals.beatsWithBeats.sum(x => x) / 8;\n    this.ezTS.red.value = this.signals.audioValues.lowRMSZScore20 / 4;\n    this.ezTS.green.value = this.signals.lowLevel;\n    this.ezTS.orange.value = this.signals.audioValues.lowRMSEMA20 * 4;\n\n    const inDropAfterGlow = this.signals.beatsSinceDrop < 16;\n    this.ledRows.forEach((row, rowIdx) => {\n      const wingRowLength = row.length / 2;\n      const wingRowDashPaires = this.wingDashPaires[rowIdx];\n      const ledsPerDashPair = Math.floor(wingRowLength / wingRowDashPaires);\n      const rowOffset = Math.floor(\n        (wingRowLength - ledsPerDashPair * wingRowDashPaires) / 2\n      );\n      for (let i = 0; i < wingRowDashPaires; ++i) {\n        const dashPairStart = Math.round(rowOffset + i * ledsPerDashPair);\n        const firstDashStart = dashPairStart;\n        const ledsInFirstDash = Math.round(\n          ledsPerDashPair * this.wingDashPairRatioes[rowIdx]\n        );\n        const firstDashLevel = fudgingFunction(\n          rowIdx % 2 === 0 ? this.signals.lowLevel : this.signals.highLevel\n        );\n        const firstDashColorIdx = !inDropAfterGlow\n          ? rowIdx + i + this.colorOffset\n          : 0;\n        const firstDashLeftColor = this.randomColor(\n          firstDashColorIdx,\n          inDropAfterGlow\n        );\n        const firstDashRightColor = this.randomColor(\n          firstDashColorIdx,\n          inDropAfterGlow\n        );\n        this.renderDash(\n          firstDashStart,\n          ledsInFirstDash,\n          firstDashLevel,\n          firstDashLeftColor,\n          firstDashRightColor,\n          row\n        );\n\n        const secondDashStart = firstDashStart + ledsInFirstDash;\n        const ledsInSecondDash = ledsPerDashPair - ledsInFirstDash;\n        const secondDashLevel = fudgingFunction(\n          rowIdx % 2 === 1 ? this.signals.lowLevel : this.signals.highLevel\n        );\n        const secondDashColorIdx = !inDropAfterGlow\n          ? rowIdx + i * 12997217 + this.colorOffset\n          : 1;\n        const secondDashLeftColor = this.randomColor(\n          secondDashColorIdx,\n          inDropAfterGlow\n        );\n        const secondDashRightColor = this.randomColor(\n          secondDashColorIdx,\n          inDropAfterGlow\n        );\n        this.renderDash(\n          secondDashStart,\n          ledsInSecondDash,\n          secondDashLevel,\n          secondDashLeftColor,\n          secondDashRightColor,\n          row\n        );\n      }\n    });\n  }\n\n  private renderDash(\n    dashStart: number,\n    ledsInDash: number,\n    radius: number,\n    leftColor: Colors.Color,\n    rightColor: Colors.Color,\n    row: ColorRow\n  ) {\n    const center = dashStart + ledsInDash / 2;\n    const dashLo = Math.floor(center - ledsInDash / 2);\n    const dashHi = Math.ceil(center + ledsInDash / 2);\n    const radiusInLeds = radius * ledsInDash;\n    for (let l = dashLo; l <= dashHi; ++l) {\n      const aliasing = bracket01(radiusInLeds - Math.abs(l - center));\n      row.add(l, Colors.multiply(leftColor, aliasing));\n      row.add(row.length - l, Colors.multiply(rightColor, aliasing));\n    }\n  }\n\n  private randomColor(key: number, inDropAfterGlow: boolean) {\n    if (!inDropAfterGlow) {\n      return this.regularPalette[key % this.regularPalette.length];\n    } else {\n      return this.dropPalette[key];\n    }\n  }\n\n  private swapPalettes() {\n    this.regularPalette = randomPalette(8);\n    this.dropPalette = [this.regularPalette[2], this.regularPalette[7]];\n    this.lastPaletteSwap = Date.now();\n  }\n}\n\nfunction fudgingFunction(x: number) {\n  return x * 0.75 + 0.05;\n}\n","import { bracket01, fillArray } from \"../../../util/Utils\";\nimport * as Colors from \"../../base/Colors\";\nimport FancyValue from \"../../base/FancyValue\";\nimport * as Visualization from \"../../base/Visualization\";\n\nconst NUM_SAMPLES = 512;\nconst NUM_SAMPLES_RENDERED = NUM_SAMPLES / 2;\n\nconst DECAY_RATE = 4;\n\nconst MIN_THRESHOLD = 0.1;\nconst MAX_THRESHOLD = 0.7;\n\nexport default class MyVisualization extends Visualization.default {\n  private readonly analyser: AnalyserNode;\n  private readonly buffer: Uint8Array;\n  private bucketLocations: number[] = [];\n  private prevBeatNumber: number | undefined;\n  private values: FancyValue[];\n\n  constructor(config: Visualization.Config) {\n    super(config);\n\n    const audioSource = config.audioSource || new AudioContext().createGain();\n    const context = audioSource.context;\n    const analyser = new AnalyserNode(context);\n    analyser.fftSize = NUM_SAMPLES;\n    analyser.smoothingTimeConstant = 0.2;\n    audioSource.connect(analyser);\n    this.analyser = analyser;\n    this.buffer = new Uint8Array(this.analyser.frequencyBinCount);\n\n    this.values = fillArray(NUM_SAMPLES_RENDERED, _ => new FancyValue(0));\n\n    this.shuffleLocations();\n  }\n\n  public shuffleLocations() {\n    const numBuckets = NUM_SAMPLES_RENDERED;\n    this.bucketLocations = [];\n    // tslint:disable-next-line: prefer-for-of\n    for (let i = 0; i < numBuckets; ++i) {\n      let v: number;\n      do {\n        v = Math.floor(Math.random() * this.ledColors.length);\n      } while (this.bucketLocations.includes(v));\n      this.bucketLocations[i] = v;\n    }\n  }\n\n  public render(context: Visualization.FrameContext): void {\n    const analyser = this.analyser;\n    if (analyser === null) {\n      return;\n    }\n\n    const beatNumber = context.beatController.beatNumber();\n    if (beatNumber !== this.prevBeatNumber) {\n      this.shuffleLocations();\n      this.prevBeatNumber = beatNumber;\n    }\n\n    analyser.getByteFrequencyData(this.buffer);\n    for (let i = 0; i < NUM_SAMPLES_RENDERED; ++i) {\n      const v = this.buffer[i] / 255;\n\n      const value = Math.pow(\n        bracket01((v - MIN_THRESHOLD) / (MAX_THRESHOLD - MIN_THRESHOLD)),\n        2\n      );\n\n      this.values[i].decayLinearRate(DECAY_RATE, context.elapsedSeconds);\n      this.values[i].bumpTo(value);\n    }\n\n    // clear\n    this.ledColors.multiplyAll(0.7);\n\n    this.values.forEach((v, i) => {\n      const freqPct = i / NUM_SAMPLES_RENDERED;\n\n      const ledNum = this.bucketLocations[i];\n\n      const hue = 360 - (i / NUM_SAMPLES_RENDERED) * 240;\n      const saturation = 1 - bracket01((v.value - 0.7) / 0.9);\n      const value = bracket01(v.value / 0.7) * Math.pow(1 - freqPct, 0.25);\n\n      const c = Colors.hsv(hue, saturation, value);\n      this.ledColors.set(ledNum, c);\n    });\n\n    context.setFrameHeatmapValues(this.values.map(v => v.value));\n  }\n}\n","import * as Colors from \"../../../base/Colors\";\nimport * as Visualization from \"../../../base/Visualization\";\n\nconst TAIL_LENGTH_CONST = 0.02;\n\ninterface Info {\n  time: number;\n  velocity: number;\n  randomHue: number;\n}\n\ninterface SparkleInfo {\n  value: number;\n  led: number;\n}\n\nfunction randomHue() {\n  return Math.floor(Math.random() * 360);\n}\n\nexport default class CenterSpreadVisualization extends Visualization.SingleRowVisualization {\n  private info = new Array<Info>();\n  private sparkles = new Array<SparkleInfo>();\n  private time = 0;\n  private keyToHue = new Array<number>();\n\n  constructor(config: Visualization.Config) {\n    super(config);\n    for (let i = 0; i < this.leds.length; ++i) {\n      this.keyToHue[i] = randomHue();\n    }\n  }\n\n  public renderSingleRow(context: Visualization.FrameContext): void {\n    const { elapsedMillis, pianoState } = context;\n\n    this.time += elapsedMillis;\n\n    this.info = this.info.filter(kt => this.time - kt.time < 1000 * 1.5);\n\n    let sumVelocity = 0;\n    for (const key of pianoState.changedKeys) {\n      if (pianoState.keys[key]) {\n        sumVelocity += pianoState.keyVelocities[key];\n      }\n    }\n    if (sumVelocity > 0) {\n      this.info.push({\n        time: this.time,\n        velocity: Math.min(1, sumVelocity),\n        randomHue: randomHue()\n      });\n    }\n\n    this.leds.fill(Colors.BLACK);\n\n    // main reaction to key press by placing random colors spreading from the center\n    for (const kt of this.info) {\n      const elapsed = this.time - kt.time;\n      const idx = Math.round((elapsed / 1000.0) * (this.leds.length / 2));\n\n      const hi = idx + this.leds.length / 2;\n      let brightness = 1;\n      for (let i = hi; i >= this.leds.length / 2 && brightness > 0; --i) {\n        const c = Colors.hsv(kt.randomHue, 1, brightness);\n        brightness -= TAIL_LENGTH_CONST / kt.velocity;\n        if (i < this.leds.length) {\n          this.leds.add(i, c);\n        }\n      }\n\n      const lo = this.leds.length / 2 - idx;\n      brightness = 1;\n      for (let i = lo; i <= this.leds.length / 2 && brightness > 0; ++i) {\n        const c = Colors.hsv(kt.randomHue, 1, brightness);\n        brightness -= TAIL_LENGTH_CONST / kt.velocity;\n        this.leds.add(i, c);\n      }\n    }\n\n    // add dem sparkles dat we luv\n    this.sparkles = this.sparkles.filter(si => si.value > 0);\n    for (let i = 0; i < this.leds.length; ++i) {\n      const rgb = Colors.split(this.leds.get(i));\n      const v = Math.max(rgb[0], rgb[1], rgb[2]);\n      if (\n        v > 0 &&\n        Math.random() < 0.02 &&\n        this.sparkles.findIndex(si => si.led === i) < 0\n      ) {\n        this.sparkles.push({ value: v, led: i });\n      }\n    }\n    for (const si of this.sparkles) {\n      const sparkleColor = Colors.hsv(\n        randomHue(),\n        Math.random() * 0.25,\n        si.value\n      );\n      this.leds.add(si.led, sparkleColor);\n      si.value -= 0.03;\n    }\n  }\n}\n","import * as Utils from \"../../../../util/Utils\";\nimport ColorRow from \"../../../base/ColorRow\";\nimport * as Colors from \"../../../base/Colors\";\nimport * as Visualization from \"../../../base/Visualization\";\n\nconst NATIVE_WIDTH = 88;\nconst ROW_FADE_FACTOR = 0.6;\n\nconst WAVE_SPACING = 18;\nconst WAVE_DROPOFF = 0.7;\nconst LED_DROPOFF = 0.2;\nconst FADE_DROPOFF = 3.0;\nconst DEREZ = 0.75;\n\n// full brightness requires at least this velocity\nconst MAX_BRIGHTNESS_VELOCITY = 0.6;\n\n// starting at n, call func outward in + and - directions, until passing min/max\nfunction doSymmetric(\n  n: number,\n  stepSize: number,\n  min: number,\n  max: number,\n  func: (v: number, steps: number) => void\n) {\n  if (n < min || n > max) {\n    return;\n  }\n  func(n, 0);\n  [-1, 1].forEach(direction => {\n    let step = 1;\n    let v = n + step * direction * stepSize;\n    while (v >= min && v <= max) {\n      func(v, step);\n      step++;\n      v += direction * stepSize;\n    }\n  });\n}\n\ninterface FadingColor {\n  initialColor: Colors.Color;\n  brightness: number;\n}\n\nexport default class GlowWaveVisualization extends Visualization.RowColumnMappedVisualization {\n  private readonly pressedKeyColors = new Map<number, FadingColor>();\n  private readonly fadeFactors: number[];\n  private readonly nativeRows: ColorRow[];\n\n  constructor(config: Visualization.Config) {\n    super(config);\n    const rowLengths = this.ledRows.mapToArray(r => r.length);\n    const middleRow = Math.floor(rowLengths.length / 2);\n    this.fadeFactors = rowLengths.map((_, i) =>\n      Math.pow(1 - ROW_FADE_FACTOR, Math.abs(i - middleRow))\n    );\n    this.nativeRows = rowLengths.map(len => new ColorRow(len));\n  }\n\n  public renderRows(context: Visualization.FrameContext): void {\n    const { elapsedSeconds, pianoState } = context;\n\n    // decay the unpressed keys\n    this.pressedKeyColors.forEach((fc, n) => {\n      if (!pianoState.keys[n]) {\n        fc.brightness *= 1 - FADE_DROPOFF * elapsedSeconds;\n        if (fc.brightness < 0.01) {\n          this.pressedKeyColors.delete(n);\n        }\n      }\n    });\n\n    // assign colors to newly pressed keys\n    pianoState.changedKeys.forEach(n => {\n      if (pianoState.keys[n]) {\n        const initialValue = Utils.bracket01(\n          pianoState.keyVelocities[n] / MAX_BRIGHTNESS_VELOCITY\n        );\n        this.pressedKeyColors.set(n, {\n          initialColor: Colors.hsv(n * 10, 1, 1),\n          brightness: initialValue\n        });\n      }\n    });\n\n    // overshoot so edges get glow even if the wave center is out of bounds\n    const min = -1 * WAVE_SPACING;\n    const max = NATIVE_WIDTH + WAVE_SPACING;\n\n    const colors = new ColorRow(NATIVE_WIDTH);\n    this.pressedKeyColors.forEach((fc, n) => {\n      doSymmetric(\n        n,\n        WAVE_SPACING,\n        min,\n        max,\n        (waveCenter: number, waveNum: number) => {\n          const waveBrightness =\n            fc.brightness * Math.pow(1 - WAVE_DROPOFF, waveNum);\n          doSymmetric(waveCenter, 1, min, max, (pos: number, step: number) => {\n            if (pos >= 0 && pos < colors.length) {\n              const brightness =\n                waveBrightness * Math.pow(1 - LED_DROPOFF, step);\n              if (brightness > 0.01) {\n                const ledColor = Colors.multiply(fc.initialColor, brightness);\n                colors.add(pos, ledColor);\n              }\n            }\n          });\n        }\n      );\n    });\n\n    this.nativeRows.forEach((row, i) => {\n      const widenedColors = new ColorRow(row.length);\n      for (let k = 0; k < widenedColors.length; ++k) {\n        widenedColors.set(\n          k,\n          colors.get(Math.floor((k / widenedColors.length) * colors.length))\n        );\n      }\n      row.copyFancy(widenedColors, {\n        derezAmount: DEREZ,\n        multiplyBy: this.fadeFactors[i]\n      });\n\n      const outputRow = this.ledRows.get(i);\n      row.copy(outputRow);\n    });\n  }\n}\n","export default class EMAHelper {\n  private readonly alpha: number;\n  private emaValue: number | null = null;\n  private emvValue: number | null = null;\n  private zScoreValue: number | null = null;\n\n  constructor(alpha: number) {\n    this.alpha = alpha;\n  }\n\n  public update(newValue: number) {\n    if (\n      this.emaValue == null ||\n      this.emvValue == null ||\n      this.zScoreValue == null\n    ) {\n      this.emaValue = newValue;\n      this.emvValue = 0;\n      this.zScoreValue = 0;\n      return;\n    }\n\n    const diff = newValue - this.emaValue;\n    const incr = this.alpha * diff;\n    this.emaValue = incr + this.emaValue;\n    this.emvValue = (1 - this.alpha) * (this.emvValue + diff * incr);\n\n    const stddev = Math.sqrt(this.emv);\n    this.zScoreValue = (newValue - this.ema) / stddev;\n  }\n\n  public get ema() {\n    return this.emaValue != null ? this.emaValue : 1;\n  }\n\n  public get emv() {\n    return this.emvValue != null ? this.emvValue : 0;\n  }\n\n  public get zScore() {\n    return this.zScoreValue != null ? this.zScoreValue : 0;\n  }\n}\n","function identity<T>(v: T): T {\n  return v;\n}\n\nexport class CircularQueue<T> {\n  private readonly maxSize: number;\n  private readonly values: T[];\n  private nextIndex: number;\n  private sizeUnsafe: number;\n\n  constructor(maxSize: number) {\n    this.maxSize = maxSize;\n    this.values = new Array(maxSize).fill(undefined);\n    this.nextIndex = 0;\n    this.sizeUnsafe = 0;\n  }\n\n  public get size() {\n    return this.sizeUnsafe;\n  }\n\n  public push(v: T): T | undefined {\n    const i = this.nextIndex;\n    this.nextIndex = (this.nextIndex + 1) % this.maxSize;\n    const oldValue = this.values[i];\n    if (this.sizeUnsafe < this.maxSize) {\n      this.sizeUnsafe += 1;\n    }\n    this.values[i] = v;\n    return oldValue;\n  }\n\n  public forEach(func: (v: T) => void) {\n    let i = this.nextIndex - this.sizeUnsafe;\n    if (i < 0) {\n      i += this.maxSize;\n    }\n    for (let n = 0; n < this.sizeUnsafe; ++n) {\n      func(this.values[i]);\n      i = i + 1;\n      if (i >= this.maxSize) {\n        i = 0;\n      }\n    }\n  }\n\n  public reduce<U>(callbackfn: (prevAccum: U, v: T) => U, initialAccum: U): U {\n    let accum = initialAccum;\n    this.forEach(\n      (currentValue: T) => (accum = callbackfn(accum, currentValue))\n    );\n    return accum;\n  }\n\n  public sum(func: (v: T) => number): number {\n    let accum = 0;\n    this.forEach(v => (accum += func(v)));\n    return accum;\n  }\n}\n\n// TODO optimize but keep numerical stability\nexport default class WindowStats {\n  private readonly values: CircularQueue<number>;\n  private cachedMean: number | undefined;\n  private cachedVariance: number | undefined;\n\n  constructor(maxWindowSize: number) {\n    this.values = new CircularQueue(maxWindowSize);\n  }\n\n  public push(v: number) {\n    const oldValue = this.values.push(v);\n    this.cachedMean = undefined;\n    this.cachedVariance = undefined;\n    return oldValue;\n  }\n\n  public get size() {\n    return this.values.size;\n  }\n\n  public get mean() {\n    // NB: reference implementation; needs optimization\n\n    if (this.cachedMean === undefined) {\n      this.cachedMean = this.values.sum(identity) / this.size;\n    }\n\n    return this.cachedMean;\n  }\n\n  public get variance() {\n    // NB: reference implementation; needs optimization\n\n    if (this.cachedVariance === undefined) {\n      switch (this.size) {\n        case 0:\n          return NaN;\n        case 1:\n          return 0;\n        default:\n          break;\n      }\n\n      const mean = this.mean;\n      this.cachedVariance =\n        this.values.sum(v => {\n          const d = v - mean;\n          return d * d;\n        }) /\n        (this.size - 1);\n    }\n\n    return this.cachedVariance;\n  }\n\n  public get stddev() {\n    return Math.sqrt(this.variance);\n  }\n\n  public get max() {\n    let best = NaN;\n    this.values.forEach(v => {\n      if (isNaN(best) || v > best) {\n        best = v;\n      }\n    });\n    return best;\n  }\n\n  public get min() {\n    let best = NaN;\n    this.values.forEach(v => {\n      if (isNaN(best) || v < best) {\n        best = v;\n      }\n    });\n    return best;\n  }\n\n  public zScore(v: number) {\n    return (v - this.mean) / this.stddev;\n  }\n}\n","import EMAHelper from \"../../util/EMAHelper\";\n\nexport default interface AudioWaveformSampler {\n  // updates `currentXXX` for the latest point in time, perhaps lazily\n  sample(): Float32Array;\n  readonly currentSamples: Float32Array;\n  readonly currentMaxAmplitude: number;\n  readonly currentRMSAmplitude: number;\n  readonly currentRmsEma3: EMAHelper;\n  readonly currentRmsEma20: EMAHelper;\n\n  listen(): void;\n}\n\nexport type Implementation = new (\n  audioSource: AudioNode,\n  numSamples: number\n) => AudioWaveformSampler;\n\nexport class AnalyserNodeAudioWaveformSampler implements AudioWaveformSampler {\n  public readonly currentSamples: Float32Array;\n  private readonly analyser: AnalyserNode;\n  private cacheIsDirty: boolean = true;\n  private cachedMaxAmplitude: number = 0;\n  private cachedRMSAmplitude: number = 0;\n  private cachedRmsEma3 = new EMAHelper(0.015); // 0.0023 corresponds to about 20s, 2/(43*sec + 1)\n  private cachedRmsEma20 = new EMAHelper(0.0023); // 0.0023 corresponds to about 20s, 2/(43*sec + 1)\n\n  constructor(audioSource: AudioNode, numSamples: number) {\n    this.currentSamples = new Float32Array(numSamples);\n\n    const audioContext = audioSource.context;\n    this.analyser = audioContext.createAnalyser();\n    this.analyser.fftSize = numSamples;\n\n    audioSource.connect(this.analyser);\n  }\n\n  public listen() {\n    this.analyser.connect(this.analyser.context.destination);\n  }\n\n  public sample() {\n    this.analyser.getFloatTimeDomainData(this.currentSamples);\n    this.cacheIsDirty = true;\n    return this.currentSamples;\n  }\n\n  private updateCachedValuesIfNeeded() {\n    if (this.cacheIsDirty) {\n      const data = this.currentSamples;\n      let maxAmplitude = 0;\n      let sumSquares = 0;\n      data.forEach(v => {\n        const amplitude = Math.abs(v);\n        if (amplitude > maxAmplitude) {\n          maxAmplitude = amplitude;\n        }\n        sumSquares += v * v;\n      });\n      this.cachedMaxAmplitude = maxAmplitude;\n      this.cachedRMSAmplitude = Math.sqrt(sumSquares / data.length);\n      this.cachedRmsEma3.update(this.cachedRMSAmplitude);\n      this.cachedRmsEma20.update(this.cachedRMSAmplitude);\n      this.cacheIsDirty = false;\n    }\n  }\n\n  public get currentMaxAmplitude() {\n    this.updateCachedValuesIfNeeded();\n    return this.cachedMaxAmplitude;\n  }\n\n  public get currentRMSAmplitude() {\n    this.updateCachedValuesIfNeeded();\n    return this.cachedRMSAmplitude;\n  }\n\n  public get currentRmsEma3() {\n    this.updateCachedValuesIfNeeded();\n    return this.cachedRmsEma3;\n  }\n\n  public get currentRmsEma20() {\n    this.updateCachedValuesIfNeeded();\n    return this.cachedRmsEma20;\n  }\n}\n\nexport function createAnalyserHelpers(audioSource: AudioNode) {\n  const audioContext = audioSource.context;\n  const numSamples = 1024;\n\n  const samplers: AudioWaveformSampler[] = [];\n\n  const createAnalyserHelper = (type: \"lowpass\" | \"highpass\" | null = null) => {\n    let filteredAudioSource: AudioNode;\n    if (type) {\n      const filter = new BiquadFilterNode(audioContext, { type });\n      audioSource.connect(filter);\n      filteredAudioSource = filter;\n    } else {\n      filteredAudioSource = audioSource;\n    }\n\n    const sampler = new AnalyserNodeAudioWaveformSampler(\n      filteredAudioSource,\n      numSamples\n    );\n    samplers.push(sampler);\n\n    return sampler;\n  };\n\n  const direct = createAnalyserHelper();\n  const low = createAnalyserHelper(\"lowpass\");\n  const high = createAnalyserHelper(\"highpass\");\n\n  return {\n    direct,\n    low,\n    high,\n    sampleAll: () => samplers.forEach(s => s.sample())\n  };\n}\n","import * as AudioWaveformSampler from \"./AudioWaveformSampler\";\n\nconst AudioWaveformSamplerImplementation =\n  AudioWaveformSampler.AnalyserNodeAudioWaveformSampler;\nconst NUM_SAMPLES = 1024;\n\nexport interface AudioValues {\n  samples: Float32Array;\n  unfilteredRMS: number;\n  unfilteredRMSEMA3: number;\n  unfilteredRMSZScore3: number;\n  unfilteredRMSEMA20: number;\n  unfilteredRMSZScore20: number;\n  unfilteredPeak: number;\n  lowRMS: number;\n  lowRMSEMA3: number;\n  lowRMSZScore3: number;\n  lowRMSEMA20: number;\n  lowRMSZScore20: number;\n  lowPeak: number;\n  highRMS: number;\n  highRMSEMA3: number;\n  highRMSZScore3: number;\n  highRMSEMA20: number;\n  highRMSZScore20: number;\n  highPeak: number;\n}\n\nexport default class BasicAudioHelper {\n  private readonly samplers: AudioWaveformSampler.default[];\n  private readonly unfilteredSampler: AudioWaveformSampler.default;\n  private readonly lowSampler: AudioWaveformSampler.default;\n  private readonly highSampler: AudioWaveformSampler.default;\n  private readonly reusedValues: AudioValues;\n\n  constructor(audioSource: AudioNode) {\n    const audioContext = audioSource.context;\n\n    this.samplers = [];\n    const createAnalyserHelper = (createFilter?: () => AudioNode) => {\n      let filteredAudioSource: AudioNode;\n      if (createFilter) {\n        const filter = createFilter();\n        audioSource.connect(filter);\n        filteredAudioSource = filter;\n      } else {\n        filteredAudioSource = audioSource;\n      }\n\n      const sampler = new AudioWaveformSamplerImplementation(\n        filteredAudioSource,\n        NUM_SAMPLES\n      );\n      this.samplers.push(sampler);\n\n      return sampler;\n    };\n\n    this.unfilteredSampler = createAnalyserHelper();\n    this.lowSampler = createAnalyserHelper(\n      () => new BiquadFilterNode(audioContext, { type: \"lowpass\" })\n    );\n    this.highSampler = createAnalyserHelper(\n      () => new BiquadFilterNode(audioContext, { type: \"highpass\" })\n    );\n\n    this.reusedValues = {\n      samples: this.unfilteredSampler.currentSamples,\n      unfilteredRMS: 0,\n      unfilteredRMSEMA3: 0,\n      unfilteredRMSZScore3: 0,\n      unfilteredRMSEMA20: 0,\n      unfilteredRMSZScore20: 0,\n      unfilteredPeak: 0,\n      lowRMS: 0,\n      lowRMSEMA3: 0,\n      lowRMSZScore3: 0,\n      lowRMSEMA20: 0,\n      lowRMSZScore20: 0,\n      lowPeak: 0,\n      highRMS: 0,\n      highRMSEMA3: 0,\n      highRMSZScore3: 0,\n      highRMSEMA20: 0,\n      highRMSZScore20: 0,\n      highPeak: 0\n    };\n  }\n\n  public getValues(): AudioValues {\n    this.samplers.forEach(s => s.sample());\n\n    const values = this.reusedValues;\n    values.samples = this.unfilteredSampler.currentSamples;\n\n    values.unfilteredRMS = this.unfilteredSampler.currentRMSAmplitude;\n    values.unfilteredRMSZScore3 = this.unfilteredSampler.currentRmsEma3.zScore;\n    values.unfilteredRMSEMA3 = this.unfilteredSampler.currentRmsEma3.ema;\n    values.unfilteredRMSZScore20 =\n      this.unfilteredSampler.currentRmsEma20.zScore;\n    values.unfilteredRMSEMA20 = this.unfilteredSampler.currentRmsEma20.ema;\n    values.unfilteredPeak = this.unfilteredSampler.currentMaxAmplitude;\n\n    values.lowRMS = this.lowSampler.currentRMSAmplitude;\n    values.lowRMSZScore3 = this.lowSampler.currentRmsEma3.zScore;\n    values.lowRMSEMA3 = this.unfilteredSampler.currentRmsEma3.ema;\n    values.lowRMSZScore20 = this.lowSampler.currentRmsEma20.zScore;\n    values.lowRMSEMA20 = this.unfilteredSampler.currentRmsEma20.ema;\n    values.lowPeak = this.lowSampler.currentMaxAmplitude;\n\n    values.highRMS = this.highSampler.currentRMSAmplitude;\n    values.highRMSEMA3 = this.highSampler.currentRmsEma3.ema;\n    values.highRMSZScore3 = this.highSampler.currentRmsEma3.zScore;\n    values.highRMSEMA20 = this.highSampler.currentRmsEma20.ema;\n    values.highRMSZScore20 = this.highSampler.currentRmsEma20.zScore;\n    values.highPeak = this.highSampler.currentMaxAmplitude;\n\n    return values;\n  }\n}\n","import EMAHelper from \"../../util/EMAHelper\";\nimport { bracket, bracket01, valueOrDefault } from \"../../util/Utils\";\nimport { CircularQueue } from \"../../util/WindowStats\";\nimport BeatController from \"../base/BeatController\";\nimport FancyValue from \"../base/FancyValue\";\nimport BasicAudioHelper from \"./BasicAudioHelper\";\nimport { AudioValues } from \"./BasicAudioHelper\";\n\nexport class LevelsHelper {\n  private readonly v: FancyValue = new FancyValue();\n  private readonly minThreshold: number;\n  private readonly maxThreshold: number;\n  public static readonly HALF_LIFE_MIN = 0.5;\n  public halfLife: number;\n  public readonly vEMA = new EMAHelper(0.0023); // about 20s\n\n  constructor(attrs: { minThreshold?: number; maxThreshold?: number }) {\n    this.minThreshold = valueOrDefault(attrs.minThreshold, 0);\n    this.maxThreshold = valueOrDefault(attrs.maxThreshold, 1);\n    this.halfLife = LevelsHelper.HALF_LIFE_MIN;\n  }\n\n  public processValue(newValue: number, elapsedMillis: number) {\n    const value = bracket01(\n      (newValue - this.minThreshold) / (this.maxThreshold - this.minThreshold)\n    );\n    this.v.decayExponential(this.halfLife, elapsedMillis / 1000);\n    this.v.bumpTo(value);\n\n    if (!isNaN(this.value)) {\n      this.vEMA.update(this.value);\n      const diff = this.vEMA.ema - 0.25;\n      this.halfLife -= bracket(-0.125 / 10, 0.125 / 10, diff * 0.2);\n      this.halfLife = bracket(LevelsHelper.HALF_LIFE_MIN, 1, this.halfLife);\n    }\n  }\n\n  public get value() {\n    return this.v.value;\n  }\n}\n\nexport interface Signals {\n  beatsWithBeats: CircularQueue<number>;\n  audioValues: AudioValues;\n\n  readonly lowLevel: number;\n  readonly highLevel: number;\n\n  readonly beatsSinceDrop: number;\n\n  // \"sounds like\" are a mixture of audio triggers and beat expectations\n  readonly soundsLikeDrop: boolean;\n  readonly soundsLikeNewBeat: boolean;\n  readonly soundsLikeStrongBeat: boolean;\n  readonly soundsLikeDance: boolean;\n\n  // \"is\" means we definitively know; e.g. comes from beat controller directly\n  readonly isNewBeat: boolean;\n}\n\nexport class SignalsHelper implements Signals {\n  private readonly audioHelper: BasicAudioHelper;\n  private readonly lowDecaySignal: LevelsHelper;\n  private readonly highDecaySignal: LevelsHelper;\n  private isDropValue = false;\n  private soundsLikeStrongBeatValue = false;\n  private soundsLikeNewBeatValue = false;\n  private lastBeat = -10000000;\n  private dropBeat = -10000000;\n  private beatSinceDropValue = -10000000;\n  private prevBeatNum = -1;\n  public isNewBeat: boolean = false;\n\n  private beatOnBeat = false;\n  public beatsWithBeats = new CircularQueue<number>(8);\n  public audioValues: AudioValues;\n\n  constructor(audioSource: AudioNode) {\n    this.audioHelper = new BasicAudioHelper(audioSource);\n    this.audioValues = this.audioHelper.getValues();\n\n    this.lowDecaySignal = new LevelsHelper({\n      minThreshold: 0.3,\n      maxThreshold: 5\n    });\n\n    this.highDecaySignal = new LevelsHelper({\n      minThreshold: 0.3,\n      maxThreshold: 5\n    });\n  }\n\n  public update(elapsedMillis: number, beatController: BeatController) {\n    this.audioValues = this.audioHelper.getValues();\n\n    this.lowDecaySignal.processValue(\n      this.audioValues.lowRMSZScore20,\n      elapsedMillis\n    );\n    this.highDecaySignal.processValue(\n      this.audioValues.highRMSZScore20,\n      elapsedMillis\n    );\n\n    const beatNow = beatController.beatNumber();\n    const nearBeat =\n      beatController.timeSinceLastBeat() < 0.1 ||\n      beatController.progressToNextBeat() > 0.95;\n    if (this.audioValues.lowRMSZScore3 > 4 && nearBeat) {\n      this.dropBeat = beatNow;\n      this.isDropValue = true;\n      this.lowDecaySignal.halfLife = LevelsHelper.HALF_LIFE_MIN;\n      this.highDecaySignal.halfLife = LevelsHelper.HALF_LIFE_MIN;\n    } else {\n      this.isDropValue = false;\n    }\n\n    if (this.soundsLikeDance) {\n      this.lowDecaySignal.halfLife = LevelsHelper.HALF_LIFE_MIN;\n    }\n    if (this.beatsSinceDrop < 16) {\n      this.lowDecaySignal.halfLife = LevelsHelper.HALF_LIFE_MIN;\n    }\n\n    if (this.audioValues.lowRMSZScore3 > 2 && nearBeat) {\n      this.soundsLikeStrongBeatValue = true;\n    } else {\n      this.soundsLikeStrongBeatValue = false;\n    }\n\n    this.beatSinceDropValue = beatNow - this.dropBeat;\n    this.soundsLikeNewBeatValue = beatNow !== this.lastBeat;\n    if (this.soundsLikeNewBeat) {\n      this.beatsWithBeats.push(this.beatOnBeat ? 1 : 0);\n      this.beatOnBeat = false;\n    }\n    if (this.audioValues.lowRMSZScore3 > 1.2 && nearBeat) {\n      this.beatOnBeat = true;\n    }\n    this.lastBeat = beatNow;\n\n    const beatNum = beatController.beatNumber();\n    this.isNewBeat = this.prevBeatNum !== beatNum;\n    this.prevBeatNum = beatNum;\n  }\n\n  public get lowLevel() {\n    return this.lowDecaySignal.value;\n  }\n\n  public get highLevel() {\n    return this.highDecaySignal.value;\n  }\n\n  public get soundsLikeDrop() {\n    return this.isDropValue;\n  }\n\n  public get soundsLikeStrongBeat() {\n    return this.soundsLikeStrongBeatValue;\n  }\n\n  public get beatsSinceDrop() {\n    return this.beatSinceDropValue;\n  }\n\n  public get soundsLikeNewBeat() {\n    return this.soundsLikeNewBeatValue;\n  }\n\n  public get soundsLikeDance() {\n    return this.beatsWithBeats.sum(x => x) > 6;\n  }\n}\n","import * as Colors from \"../../base/Colors\";\nimport LedMetadata from \"../../base/LedMetadata\";\nimport * as Visualization from \"../../base/Visualization\";\nimport { SignalsHelper } from \"../../visualizationUtils/SignalsHelper\";\n\nconst BASE_SPARKLES_PER_SECOND = 200;\nconst SPARKLE_HALF_LIFE_SECONDS = 0.2;\nconst FALL_MILLIS = 100;\n\ninterface LedAddress {\n  rowIndex: number;\n  index: number;\n}\n\ninterface Sparkle {\n  address: LedAddress;\n  color: Colors.Color;\n  fadeRate: number; // 0-1\n  millisUntilFall: number;\n}\n\nclass DropHelper {\n  private readonly fallGraph: LedAddress[][][];\n\n  constructor(ledRows: LedMetadata[][]) {\n    // construct \"fall graph\"; every location maps to the 0, 1, or 2 places it could fall to;\n    // that is, the next row's nearest LEDs down and to the left/right of this one\n    this.fallGraph = ledRows.map((ledRow, rowIndex) => {\n      const nextRow: LedMetadata[] | undefined = ledRows[rowIndex + 1];\n      const makeAddress = (index: number) => ({\n        rowIndex: rowIndex + 1,\n        index\n      });\n      return ledRow.map(led => {\n        if (nextRow === undefined || nextRow.length === 0) {\n          return [];\n        }\n        // find the index of the first LED in the next row that's further to the right (x dim) than this one\n        let i: number;\n        for (\n          i = 0;\n          i < nextRow.length && nextRow[i].position.x < led.position.x;\n          ++i\n        ) {\n          // no-op\n        }\n        if (i === 0) {\n          return [makeAddress(0)];\n        } else if (i >= nextRow.length) {\n          return [makeAddress(nextRow.length - 1)];\n        } else {\n          return [makeAddress(i - 1), makeAddress(i)];\n        }\n      });\n    });\n  }\n\n  public drop(address: LedAddress): LedAddress | null {\n    const targets =\n      (this.fallGraph[address.rowIndex] || [])[address.index] || [];\n    if (targets.length === 0) {\n      return null;\n    } else {\n      return targets[Math.floor(Math.random() * targets.length)];\n    }\n  }\n}\n\nexport default class PulsingRainVisualization extends Visualization.RowColumnMappedVisualization {\n  private readonly dropHelper: DropHelper;\n  private readonly sparkles: Set<Sparkle>;\n  private numSparklesRemainder = 0;\n  private signals?: SignalsHelper;\n\n  constructor(config: Visualization.Config) {\n    super(config);\n    this.dropHelper = new DropHelper(this.ledRowMetadatas);\n    this.sparkles = new Set();\n\n    this.signals = config.audioSource\n      ? new SignalsHelper(config.audioSource)\n      : undefined;\n  }\n\n  public renderRows(context: Visualization.FrameContext): void {\n    if (this.signals === undefined) {\n      return;\n    }\n\n    const { elapsedSeconds, beatController } = context;\n    const now = Date.now() / 1000;\n    this.signals.update(elapsedSeconds / 1000, beatController);\n\n    // drops\n    const deadSparkles: Sparkle[] = [];\n    this.sparkles.forEach(sparkle => {\n      sparkle.millisUntilFall -= elapsedSeconds * 1000;\n      if (sparkle.millisUntilFall <= 0) {\n        const newAddress = this.dropHelper.drop(sparkle.address);\n        if (newAddress === null) {\n          deadSparkles.push(sparkle);\n        } else {\n          sparkle.address = newAddress;\n          sparkle.millisUntilFall = FALL_MILLIS;\n          sparkle.color = Colors.multiply(sparkle.color, 1 - sparkle.fadeRate);\n        }\n      }\n    });\n    deadSparkles.forEach(sparkle => this.sparkles.delete(sparkle));\n\n    // beat brightness multiplier\n    let beatMultiplier = 0.75;\n    if (this.signals.beatsSinceDrop < 16) {\n      beatMultiplier = (beatController.progressToNextBeat() - 0.5) * 2 * 0.8;\n    }\n\n    // new sparkles\n    const volumeAdjustment =\n      (this.signals.audioValues.unfilteredRMS - 0.25) * 800;\n    const sparkleRate = BASE_SPARKLES_PER_SECOND + volumeAdjustment;\n    let numLeds = this.numSparklesRemainder + elapsedSeconds * sparkleRate;\n    while (numLeds >= 1) {\n      const index = Math.floor(Math.random() * this.ledRows.get(0).length);\n      const sparkle: Sparkle = {\n        address: { rowIndex: 0, index },\n        color: Colors.hsv(\n          index + now * 90,\n          Math.pow(Math.random(), 0.2),\n          Math.random() * 0.5 + 0.5\n        ),\n        millisUntilFall: FALL_MILLIS,\n        fadeRate: Math.pow(Math.random(), 0.2)\n      };\n      this.sparkles.add(sparkle);\n      numLeds -= 1;\n    }\n    this.numSparklesRemainder = numLeds;\n\n    // render\n\n    const multiplier = Math.pow(\n      0.5,\n      elapsedSeconds / SPARKLE_HALF_LIFE_SECONDS\n    );\n    this.ledRows.forEach(row =>\n      row.forEach((color, i) => row.set(i, Colors.multiply(color, multiplier)))\n    );\n\n    this.sparkles.forEach(sparkle => {\n      this.ledRows\n        .get(sparkle.address.rowIndex)\n        .add(\n          sparkle.address.index,\n          Colors.multiply(sparkle.color, beatMultiplier)\n        );\n    });\n  }\n}\n","import { bracket01 } from \"../../../util/Utils\";\nimport * as Colors from \"../../base/Colors\";\nimport * as Visualization from \"../../base/Visualization\";\nimport { Signals } from \"../../visualizationUtils/SignalsHelper\";\n\nconst MIN_SPARKLES_PER_SECOND = 0;\nconst MAX_SPARKLES_PER_SECOND = 5000;\nconst DANCE_HALF_LIFE_SECONDS = 0.2;\nconst NOT_DANCE_HALF_LIFE_SECONDS = 1.0;\n\nclass LinearDecayingValue {\n  public value: number;\n  private readonly decayRate: number;\n\n  constructor(\n    initialValue: number,\n    decayRate: number // units per second\n  ) {\n    this.value = initialValue;\n    this.decayRate = decayRate;\n  }\n\n  public decay(elapsedSeconds: number): number {\n    this.value = Math.max(0, this.value - elapsedSeconds * this.decayRate);\n    return this.value;\n  }\n\n  // sets it to `value` if `value` is higher, otherwise no-op\n  public bump(value: number): number {\n    this.value = Math.max(value, this.value);\n    return this.value;\n  }\n}\n\nexport default class SparklesAndFlashesVisualization extends Visualization.default {\n  private numLedsRemainder = 0;\n\n  private flashBrightness = new LinearDecayingValue(0, 1 / 0.125);\n\n  private readonly lowTS: Visualization.TimeSeriesValue;\n  private readonly highTS: Visualization.TimeSeriesValue;\n  private readonly flashBrightnessTS: Visualization.TimeSeriesValue;\n  private signals: Signals;\n\n  constructor(config: Visualization.Config) {\n    super(config);\n    this.signals = config.signals;\n\n    this.lowTS = config.createTimeSeries({ color: Colors.BLUE });\n    this.highTS = config.createTimeSeries({ color: Colors.RED });\n    this.flashBrightnessTS = config.createTimeSeries();\n  }\n\n  public render(context: Visualization.FrameContext): void {\n    const { elapsedSeconds } = context;\n    this.flashBrightness.decay(elapsedSeconds);\n\n    const sparkleRateNormalized = 0; // bracket01(Math.pow(this.signals.audioValues.highRMSZScore20 / 4, 3));\n    this.flashBrightness.bump(\n      bracket01(\n        Math.pow(this.signals.audioValues.lowRMSZScore20 / 2, 5) * 1.25 - 0.25\n      )\n    );\n    // const sparkleRateNormalized = bracket01(Math.pow(this.signals.audioValues.highRMS * 2.5, 3));\n    // this.flashBrightness.bump(bracket01(Math.pow(this.signals.audioValues.lowRMS * 3, 3) * 1.25 - 0.25));\n\n    const sparkleRate =\n      sparkleRateNormalized *\n        (MAX_SPARKLES_PER_SECOND - MIN_SPARKLES_PER_SECOND) +\n      MIN_SPARKLES_PER_SECOND;\n\n    // fade all pixels\n    const halfLife =\n      this.signals.beatsSinceDrop < 16 || this.signals.soundsLikeDance\n        ? DANCE_HALF_LIFE_SECONDS\n        : NOT_DANCE_HALF_LIFE_SECONDS;\n    const multiplier = Math.pow(0.5, elapsedSeconds / halfLife);\n    this.ledColors.multiplyAll(multiplier);\n\n    // flash\n    const flashColor = Colors.multiply(Colors.BLUE, this.flashBrightness.value);\n    this.ledColors.addAll(flashColor);\n\n    let numLeds = this.numLedsRemainder + elapsedSeconds * sparkleRate;\n    while (numLeds >= 1) {\n      const n = Math.floor(Math.random() * this.ledColors.length);\n      this.ledColors.set(n, Colors.WHITE);\n      numLeds -= 1;\n    }\n    this.numLedsRemainder = numLeds;\n\n    this.flashBrightnessTS.value = this.flashBrightness.value;\n    this.lowTS.value = this.signals.audioValues.lowRMS;\n    this.highTS.value = this.signals.audioValues.highRMS;\n  }\n}\n","import { Vector2, Vector3 } from \"three\";\n\nexport function mapToXYOnly(points3d: Vector3[]): Vector2[] {\n  return points3d.map(p => {\n    return new Vector2(p.x, p.y);\n  });\n}\n\nexport function getExtents2(points: Vector2[]) {\n  let firstX: number = NaN;\n  let firstY: number = NaN;\n  if (points.length > 0) {\n    firstX = points[0].x;\n    firstY = points[0].y;\n  }\n\n  let minX = firstX;\n  let maxX = firstX;\n  let minY = firstY;\n  let maxY = firstY;\n\n  for (const p of points) {\n    if (p.x < minX) {\n      minX = p.x;\n    }\n    if (p.x > maxX) {\n      maxX = p.x;\n    }\n    if (p.y < minY) {\n      minY = p.y;\n    }\n    if (p.y > maxY) {\n      maxY = p.y;\n    }\n  }\n\n  return {\n    minX,\n    maxX,\n    minY,\n    maxY\n  };\n}\n","import { getExtents2 } from \"src/util/VectorUtils\";\nimport { Vector2, Vector3 } from \"three\";\n\nimport Scene, { SceneLedMetadata } from \"../../scenes/Scene\";\nimport ColorRow from \"../base/ColorRow\";\nimport * as Colors from \"../base/Colors\";\nimport * as Visualization from \"../base/Visualization\";\n\nconst MAX_DISTANCE = 0.05;\n\n// TODO this could be made to work with any co-planar points, but right now it requires all Z\n// positions to be the same\nfunction mapTo2DSingle(point3d: Vector3, vector?: Vector2): Vector2 {\n  if (vector === undefined) {\n    vector = new Vector2();\n  }\n\n  vector.set(point3d.x, point3d.y);\n\n  return vector;\n}\n\nfunction mapTo2D(points3d: Vector3[]): Vector2[] {\n  return points3d.map(p => {\n    return new Vector2(p.x, p.y);\n  });\n}\n\nfunction createCanvas(width: number, height: number): HTMLCanvasElement {\n  const canvas = document.createElement(\"canvas\");\n  canvas.style.backgroundColor = \"black\";\n  canvas.width = width;\n  canvas.height = height;\n  return canvas;\n}\n\nfunction closestIndex(\n  ps: Vector2[],\n  p: Vector2,\n  maxDistance?: number\n): number | null {\n  if (ps.length === 0) {\n    return null;\n  }\n\n  let bestIndex = 0;\n  let bestDistance = p.distanceTo(ps[0]);\n  ps.forEach((p2, i) => {\n    const myDistance = p.distanceTo(p2);\n    if (myDistance < bestDistance) {\n      bestDistance = myDistance;\n      bestIndex = i;\n    }\n  });\n\n  if (maxDistance === undefined || bestDistance <= maxDistance) {\n    return bestIndex;\n  } else {\n    return null;\n  }\n}\n\nclass VoronoiHelper {\n  private readonly pixelsForPoint: number[][]; // point index -> pixel indices (y*w+x, like imgData)\n  // private readonly maxCount: number;\n  private readonly height: number;\n  private readonly width: number;\n  private readonly colors: ColorRow;\n  private readonly valuesR: number[];\n  private readonly valuesG: number[];\n  private readonly valuesB: number[];\n  public readonly ledMapper: (\n    ledMetadata: SceneLedMetadata,\n    vector?: Vector2\n  ) => Vector2;\n\n  constructor(attrs: {\n    points: Vector2[]; // pixel coordinates\n    width: number; // pixels\n    height: number; // pixels\n    maxDistance: number; // pixels\n    ledMapper: (ledMetadata: SceneLedMetadata, vector?: Vector2) => Vector2;\n  }) {\n    this.pixelsForPoint = attrs.points.map(_ => []);\n    const counts = attrs.points.map(_ => 0);\n    const p = new Vector2(0, 0);\n    let i = 0;\n    while (p.y < attrs.height) {\n      p.x = 0;\n      while (p.x < attrs.width) {\n        const index = closestIndex(attrs.points, p, attrs.maxDistance);\n        if (index !== null) {\n          this.pixelsForPoint[index].push(i);\n          ++counts[index];\n        }\n        ++i;\n        ++p.x;\n      }\n      ++p.y;\n    }\n\n    let min = this.pixelsForPoint[0].length;\n    let max = min;\n    this.pixelsForPoint.forEach(vs => {\n      const count = vs.length;\n      if (count < min) {\n        min = count;\n      } else if (count > max) {\n        max = count;\n      }\n    });\n\n    // console.log(\"voronoi stats\", { min, max });\n\n    // this.maxCount = Math.max.apply(Math, counts);\n    this.colors = new ColorRow(attrs.points.length);\n    this.valuesR = new Array(attrs.points.length).fill(0);\n    this.valuesG = new Array(attrs.points.length).fill(0);\n    this.valuesB = new Array(attrs.points.length).fill(0);\n    this.width = attrs.width;\n    this.height = attrs.height;\n    this.ledMapper = attrs.ledMapper;\n  }\n\n  public colorsFromCanvas(\n    canvas: HTMLCanvasElement,\n    ctx: CanvasRenderingContext2D\n  ): ColorRow {\n    if (canvas.height !== this.height || canvas.width !== this.width) {\n      throw new Error(\"canvas isn't the right size\");\n    }\n\n    const imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n\n    this.valuesR.fill(0);\n    this.valuesG.fill(0);\n    this.valuesB.fill(0);\n    this.pixelsForPoint.forEach((pixelIndexes, pointIndex) => {\n      let rTotal = 0;\n      let gTotal = 0;\n      let bTotal = 0;\n      for (const pixelIndex of pixelIndexes) {\n        rTotal += imgData.data[pixelIndex * 4];\n        gTotal += imgData.data[pixelIndex * 4 + 1];\n        bTotal += imgData.data[pixelIndex * 4 + 2];\n      }\n      const count = pixelIndexes.length;\n      const color = Colors.rgbUnchecked(\n        Math.round(rTotal / count),\n        Math.round(gTotal / count),\n        Math.round(bTotal / count)\n      );\n      this.colors.set(pointIndex, color);\n    });\n\n    return this.colors;\n  }\n\n  public drawColorsOnCanvas(canvas: HTMLCanvasElement, colors: ColorRow) {\n    if (canvas.height !== this.height || canvas.width !== this.width) {\n      throw new Error(\"canvas isn't the right size\");\n    }\n\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) {\n      throw new Error(\"can't get canvas context\");\n    }\n\n    ctx.fillStyle = \"black\";\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    const imgData = new ImageData(canvas.width, canvas.height);\n\n    this.pixelsForPoint.forEach((pixelIndexes, pointIndex) => {\n      const [r, g, b] = Colors.splitRGB(colors.get(pointIndex));\n      pixelIndexes.forEach(pixelIndex => {\n        imgData.data[pixelIndex * 4] = r;\n        imgData.data[pixelIndex * 4 + 1] = g;\n        imgData.data[pixelIndex * 4 + 2] = b;\n        imgData.data[pixelIndex * 4 + 3] = 255; // alpha\n      });\n    });\n\n    ctx.putImageData(imgData, 0, 0);\n  }\n\n  public drawDebugMapOnCanvas(canvas: HTMLCanvasElement) {\n    const colors = new ColorRow(this.pixelsForPoint.length);\n    for (let i = 0; i < this.pixelsForPoint.length; ++i) {\n      colors.set(\n        i,\n        Colors.hsv(Math.random() * 360, 0.7, Math.random() * 0.5 + 0.5)\n      );\n    }\n    this.drawColorsOnCanvas(canvas, colors);\n  }\n}\n\ninterface InitializationValues {\n  scene: Scene;\n  helper: VoronoiHelper;\n  canvasWidth: number;\n  canvasHeight: number;\n}\n\nlet cachedInitializationValues: InitializationValues | undefined;\n\nfunction initializeFor(scene: Scene): InitializationValues {\n  if (\n    cachedInitializationValues &&\n    cachedInitializationValues.scene === scene\n  ) {\n    return cachedInitializationValues;\n  }\n\n  const allLeds = scene.ledMetadatas;\n  const leds2d = mapTo2D(allLeds.map(led => led.position));\n  const extents = getExtents2(leds2d);\n  const width = MAX_DISTANCE * 2 + (extents.maxX - extents.minX);\n  const height = MAX_DISTANCE * 2 + (extents.maxY - extents.minY);\n  const maxDimension = scene.voronoiMaxDimension;\n  let canvasWidth: number;\n  let canvasHeight: number;\n  if (width > height) {\n    canvasWidth = maxDimension;\n    canvasHeight = Math.ceil((maxDimension / width) * height);\n  } else {\n    canvasHeight = maxDimension;\n    canvasWidth = Math.ceil((maxDimension / height) * width);\n  }\n\n  const mapToCanvas = (wp: Vector2, vector?: Vector2) => {\n    if (vector === undefined) {\n      vector = new Vector2();\n    }\n    const x =\n      (1 - (wp.x - extents.minX + MAX_DISTANCE) / width) * (canvasWidth - 1);\n    const y =\n      (1 - (wp.y - extents.minY + MAX_DISTANCE) / height) * (canvasHeight - 1);\n    vector.set(x, y);\n    return vector;\n  };\n\n  // leds mapped to pixel locations\n  const points2d = leds2d.map(wp => mapToCanvas(wp));\n\n  const maxDistancePixels = MAX_DISTANCE * (canvasWidth / width);\n\n  const ledMapperScratchVector = new Vector2();\n\n  const helper = new VoronoiHelper({\n    points: points2d,\n    width: canvasWidth,\n    height: canvasHeight,\n    maxDistance: maxDistancePixels,\n    ledMapper: (ledMetadata: SceneLedMetadata, vector?: Vector2) => {\n      return mapToCanvas(\n        mapTo2DSingle(ledMetadata.position, ledMapperScratchVector),\n        vector\n      );\n    }\n  });\n\n  // helper.drawDebugMapOnCanvas(canvas);\n\n  cachedInitializationValues = {\n    scene,\n    helper,\n    canvasWidth,\n    canvasHeight\n  };\n\n  return cachedInitializationValues;\n}\n\nexport default abstract class AbstractVoronoiMapperVisualization extends Visualization.default {\n  private readonly helper: VoronoiHelper;\n  protected canvas: HTMLCanvasElement;\n  protected canvasContext: CanvasRenderingContext2D;\n  private readonly allLedMetadatas: readonly SceneLedMetadata[];\n\n  constructor(config: Visualization.Config) {\n    super(config);\n    const values = initializeFor(config.scene);\n    this.helper = values.helper;\n\n    this.canvas = createCanvas(values.canvasWidth, values.canvasHeight);\n    const ctx = this.canvas.getContext(\"2d\");\n    if (!ctx) {\n      throw new Error(\"can't use canvas\");\n    }\n    this.canvasContext = ctx;\n    config.setExtraDisplay(this.canvas);\n    this.allLedMetadatas = config.scene.ledMetadatas;\n  }\n\n  public render(context: Visualization.FrameContext): void {\n    this.renderToCanvas(context);\n    const colors = this.helper.colorsFromCanvas(\n      this.canvas,\n      this.canvasContext\n    );\n    colors.forEach((color, i) => this.ledColors.set(i, color));\n  }\n\n  protected abstract renderToCanvas(context: Visualization.FrameContext): void;\n\n  protected mapTo2d(ledMetadata: SceneLedMetadata, vector?: Vector2): Vector2 {\n    return this.helper.ledMapper(ledMetadata, vector);\n  }\n\n  protected randomLedPixelPosition(vector?: Vector2): Vector2 {\n    const ledMetadata =\n      this.allLedMetadatas[\n        Math.floor(Math.random() * this.allLedMetadatas.length)\n      ];\n    return this.mapTo2d(ledMetadata, vector);\n  }\n}\n","import { bracket01 } from \"../../../util/Utils\";\nimport * as Colors from \"../../base/Colors\";\nimport * as Visualization from \"../../base/Visualization\";\nimport AbstractVoronoiMapperVisualization from \"../../visualizationUtils/AbstractVoronoiMapperVisualization\";\nimport { Signals } from \"../../visualizationUtils/SignalsHelper\";\nimport { randomPalette } from \"../../visualizationUtils/Utils\";\n\nconst MIN_RADIUS = 20;\nconst MAX_RADIUS = 40;\n\nexport default class SplotchesVisualization extends AbstractVoronoiMapperVisualization {\n  private lastFrameBeatsCount: number | undefined;\n  private palette: number[] = [];\n  private lastPaletteSwap: number = -1;\n  private signals: Signals;\n\n  constructor(config: Visualization.Config) {\n    super(config);\n    this.swapPalettes();\n    this.signals = config.signals;\n  }\n\n  protected renderToCanvas(context: Visualization.FrameContext) {\n    if (\n      Date.now() - this.lastPaletteSwap > 30000 &&\n      this.signals.soundsLikeStrongBeat\n    ) {\n      this.swapPalettes();\n    }\n\n    const currentBeatsCount = Math.floor(context.beatController.beatNumber());\n    const newWholeBeatsSinceLastFrame = Math.max(\n      0,\n      currentBeatsCount - (this.lastFrameBeatsCount || currentBeatsCount)\n    );\n    this.lastFrameBeatsCount = currentBeatsCount;\n\n    const canvas = this.canvas;\n    const ctx = this.canvasContext;\n\n    ctx.fillStyle = \"black\";\n    ctx.globalCompositeOperation = \"source-over\";\n    ctx.globalAlpha = bracket01(1 * context.elapsedSeconds);\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    ctx.globalAlpha = 1;\n\n    let numDots = newWholeBeatsSinceLastFrame;\n    while (numDots >= 1) {\n      const p = this.randomLedPixelPosition();\n      const radius = Math.random() * (MAX_RADIUS - MIN_RADIUS) + MIN_RADIUS;\n      const color = this.randomColor();\n\n      // draw it\n      ctx.fillStyle = Colors.cssColor(color);\n      ctx.globalCompositeOperation = \"lighter\";\n      ctx.beginPath();\n      ctx.arc(p.x, p.y, radius, 0, Math.PI * 2);\n      ctx.fill();\n\n      numDots -= 1;\n    }\n  }\n\n  private randomColor() {\n    return this.palette[\n      Math.floor(Math.random() * (this.palette.length - 2)) + 2\n    ];\n  }\n\n  private swapPalettes() {\n    this.palette = randomPalette(6);\n    this.lastPaletteSwap = Date.now();\n  }\n}\n\nexport class DerezSplotchesVisualization extends Visualization.DerezVisualization {\n  constructor(config: Visualization.Config) {\n    super(new SplotchesVisualization(config), 0.75);\n  }\n}\n","import { bracket01 } from \"../../../util/Utils\";\nimport * as Colors from \"../../base/Colors\";\nimport LedMetadata from \"../../base/LedMetadata\";\nimport * as Visualization from \"../../base/Visualization\";\nimport { Signals } from \"../../visualizationUtils/SignalsHelper\";\nimport { randomPalette } from \"../../visualizationUtils/Utils\";\n\ninterface Info {\n  time: number;\n  rib: number;\n  brightness: number;\n  color: number;\n  speed: number;\n}\n\ninterface LedRowInfo {\n  rowIdx: number;\n  idx: number;\n}\n\ninterface SparkleInfo {\n  value: number;\n  row: number;\n  idx: number;\n}\n\nconst BASE_SHOOTER_PER_S = 4.0;\n\nexport default class SpreadShootersAudioVisualization extends Visualization.RowColumnMappedVisualization {\n  private info = new Array<Info>();\n  private sparkles = new Array<SparkleInfo>();\n  private ezTS: Visualization.EasyTimeSeriesValueSetters;\n  private readonly reverseLedInfo: LedRowInfo[][];\n  private signals: Signals;\n  private palette: number[] = [];\n  private lastPaletteSwap: number = -1;\n\n  constructor(config: Visualization.Config) {\n    super(config);\n    this.ezTS = config.createEasyTimeSeriesSet();\n    this.reverseLedInfo = reverseLedInfo(this.ledRowMetadatas);\n    this.reverseLedInfo.forEach(x => x);\n    this.signals = config.signals;\n    this.swapPalettes();\n  }\n\n  public renderRows(context: Visualization.FrameContext): void {\n    const { elapsedMillis } = context;\n\n    const now = Date.now();\n    if (\n      now - this.lastPaletteSwap > 30000 &&\n      this.signals.soundsLikeStrongBeat\n    ) {\n      this.swapPalettes();\n    }\n\n    this.info = this.info.filter(kt => now - kt.time < kt.speed * 1.5);\n\n    this.ezTS.red.value = this.signals.audioValues.lowRMSZScore20 / 4;\n    this.ezTS.green.value = this.signals.lowLevel;\n    this.ezTS.orange.value = this.signals.audioValues.lowRMSEMA20 * 4;\n\n    if (this.signals.beatsSinceDrop < 16) {\n      if (this.signals.soundsLikeNewBeat) {\n        const color = this.randomColor();\n        for (let i = 0; i < this.reverseLedInfo.length; ++i) {\n          const speed = i % 2 === 1 ? 2000 : 1000;\n          this.info.push({ time: now, rib: i, brightness: 1, color, speed });\n        }\n      }\n    } else {\n      const brightness = bracket01(\n        this.signals.audioValues.unfilteredRMS / 0.4\n      );\n      const volumeAdjustment = bracket01(\n        this.signals.audioValues.unfilteredRMS / 0.2\n      );\n      const shooters =\n        volumeAdjustment * ((elapsedMillis / 1000) * BASE_SHOOTER_PER_S);\n      for (let i = 0; i < shooters; ++i) {\n        const rib = Math.floor(Math.random() * this.reverseLedInfo.length);\n        const speed = rib % 2 === 1 ? 2000 : 1000;\n        this.info.push({\n          time: now,\n          rib,\n          brightness,\n          color: this.randomColor(),\n          speed\n        });\n      }\n    }\n\n    // reset leds\n    this.ledRows.forEach(row => row.fill(Colors.BLACK));\n\n    for (const kt of this.info) {\n      const elapsed = now - kt.time;\n\n      const rib = this.reverseLedInfo[kt.rib];\n      const ribIdx = Math.round((elapsed / kt.speed) * rib.length);\n\n      let brightness = kt.brightness;\n      for (let i = ribIdx; i >= 0 && brightness > 0; --i) {\n        const c = Colors.multiply(kt.color, brightness);\n        brightness -= 3 / 25;\n        if (i < rib.length) {\n          const { rowIdx, idx } = rib[i];\n          this.ledRows.get(rowIdx).add(idx, c);\n        }\n      }\n    }\n\n    // add dem sparkles dat we luv\n    this.sparkles = this.sparkles.filter(si => si.value > 0);\n    this.ledRows.forEach((row, rowIdx) => {\n      row.forEach((color, ledIdx) => {\n        const rgb = Colors.split(color);\n        const v = Math.max(rgb[0], rgb[1], rgb[2]);\n        if (v > 0 && Math.random() < 0.002) {\n          this.sparkles.push({ value: 0.8, row: rowIdx, idx: ledIdx });\n        }\n      });\n    });\n    for (const si of this.sparkles) {\n      const sparkleColor = Colors.hsv(1, Math.random() * 0.25, si.value);\n      this.ledRows.get(si.row).add(si.idx, sparkleColor);\n      si.value += Math.sin(now / 20) * 0.15 - 0.02;\n    }\n  }\n\n  private swapPalettes() {\n    this.palette = randomPalette(8);\n    this.lastPaletteSwap = Date.now();\n  }\n\n  private randomColor() {\n    return this.palette[Math.floor(Math.random() * this.palette.length)];\n  }\n}\n\nfunction reverseLedInfo(ledMetadatas: LedMetadata[][]) {\n  let nChannels = 0;\n  ledMetadatas.forEach(infoRow => {\n    infoRow.forEach(info => {\n      nChannels = Math.max(nChannels, info.hardwareChannel);\n    });\n  });\n  const retval: LedRowInfo[][] = [];\n  for (let i = 0; i < nChannels; ++i) {\n    retval.push([]);\n  }\n  ledMetadatas.forEach((rowLedMetadatas, rowIdx) => {\n    rowLedMetadatas.forEach((ledMetadata, idx) => {\n      retval[ledMetadata.hardwareChannel - 1][ledMetadata.hardwareIndex] = {\n        rowIdx,\n        idx\n      };\n    });\n  });\n  return retval;\n}\n\nexport class DerezSpreadShootersAudioVisualization extends Visualization.DerezVisualization {\n  constructor(config: Visualization.Config) {\n    super(new SpreadShootersAudioVisualization(config), 0.82);\n  }\n}\n","import * as Visualization from \"../../base/Visualization\";\nimport AbstractVoronoiMapperVisualization from \"../../visualizationUtils/AbstractVoronoiMapperVisualization\";\n\nconst DEGREES_PER_SECOND = 180;\n\nexport default class PatternClockVisualization extends AbstractVoronoiMapperVisualization {\n  private phase = 0;\n\n  protected renderToCanvas(context: Visualization.FrameContext) {\n    this.phase =\n      (this.phase + DEGREES_PER_SECOND * context.elapsedSeconds) % 360;\n    const phaseRadians = (this.phase / 180) * Math.PI;\n\n    const canvas = this.canvas;\n    const ctx = this.canvasContext;\n\n    ctx.fillStyle = \"black\";\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    const clockHandSize = Math.max(canvas.width, canvas.height) / 2;\n    const cx = canvas.width / 2;\n    const cy = canvas.height / 2;\n\n    ctx.strokeStyle = \"white\";\n    ctx.lineCap = \"round\";\n    ctx.lineWidth = 50;\n    ctx.beginPath();\n    ctx.moveTo(cx, cy);\n    ctx.lineTo(\n      cx + Math.cos(phaseRadians) * clockHandSize,\n      cy + Math.sin(phaseRadians) * clockHandSize\n    );\n    ctx.stroke();\n  }\n}\n\nexport class DerezPatternClockVisualization extends Visualization.DerezVisualization {\n  constructor(config: Visualization.Config) {\n    super(new PatternClockVisualization(config), 0.9);\n  }\n}\n","import * as Colors from \"../../base/Colors\";\nimport * as Visualization from \"../../base/Visualization\";\nimport AbstractVoronoiMapperVisualization from \"../../visualizationUtils/AbstractVoronoiMapperVisualization\";\n\nconst RADIUS = 40;\n\nexport default class PatternDotVisualization extends AbstractVoronoiMapperVisualization {\n  private phase = 0;\n\n  protected renderToCanvas(context: Visualization.FrameContext) {\n    const degreesPerSecond = 90 * context.beatController.hz();\n    this.phase = (this.phase + degreesPerSecond * context.elapsedSeconds) % 360;\n    const phaseRadians = (this.phase / 180) * Math.PI;\n\n    const canvas = this.canvas;\n    const ctx = this.canvasContext;\n\n    ctx.fillStyle = \"black\";\n    ctx.globalAlpha = 3 * context.elapsedSeconds;\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    const cx = canvas.width / 2;\n    const cy = canvas.height / 2;\n    ctx.fillStyle = Colors.cssColor(Colors.hsv(this.phase, 1, 1));\n    ctx.globalAlpha = 1;\n\n    const x = cx + Math.cos(phaseRadians) * cx;\n    const y = cy;\n\n    ctx.beginPath();\n    ctx.arc(x, y, RADIUS, 0, Math.PI * 2);\n    ctx.fill();\n  }\n}\n\nexport class DerezPatternDotVisualization extends Visualization.DerezVisualization {\n  constructor(config: Visualization.Config) {\n    super(new PatternDotVisualization(config), 0.9);\n  }\n}\n","import * as Visualization from \"../base/Visualization\";\nimport AbstractVoronoiMapperVisualization from \"./AbstractVoronoiMapperVisualization\";\n\nexport default class StaticImageVisualization extends AbstractVoronoiMapperVisualization {\n  constructor(config: Visualization.Config, imageUrl: string) {\n    super(config);\n    const imgElement = document.createElement(\"img\");\n    imgElement.onload = () => {\n      this.canvasContext.drawImage(\n        imgElement,\n        0,\n        0,\n        imgElement.width,\n        imgElement.height,\n        0,\n        0,\n        this.canvas.width,\n        this.canvas.height\n      );\n    };\n    imgElement.src = imageUrl;\n  }\n\n  protected renderToCanvas(context: Visualization.FrameContext) {\n    // no-op\n  }\n}\n","import * as Visualization from \"../../base/Visualization\";\nimport StaticImageVisualization from \"../../visualizationUtils/StaticImageVisualization\";\n\nexport default class PatternFlagVisualization extends StaticImageVisualization {\n  constructor(config: Visualization.Config) {\n    super(config, \"./flag.jpg\");\n  }\n}\n","import LedMetadata from \"src/portable/base/LedMetadata\";\nimport { first, pushAll } from \"src/util/Utils\";\n\nimport * as Colors from \"../../base/Colors\";\nimport * as Visualization from \"../../base/Visualization\";\n\nconst LED_SEPARATION = 18;\nconst SPEED = 60; // LEDs per second\n\nfunction getIndexesGroupedByHardwareChannel(leds: readonly LedMetadata[]) {\n  const results: number[][] = [];\n\n  leds.forEach((led, i) => {\n    const c = led.hardwareChannel;\n    while (results.length <= c) {\n      results.push([]);\n    }\n\n    results[c].push(i);\n  });\n\n  return results;\n}\n\nexport default class PatternMarquee2Visualization extends Visualization.default {\n  private readonly paths: number[][];\n  private phase = 0;\n\n  constructor(config: Visualization.Config) {\n    super(config);\n    this.paths = PatternMarquee2Visualization.generateGaragePaths(\n      config.scene.ledMetadatas\n    );\n  }\n\n  private static generateGaragePaths(ledRowMetadatas: LedMetadata[]) {\n    const indexesByHardwareChannel =\n      getIndexesGroupedByHardwareChannel(ledRowMetadatas);\n\n    const headPath: number[] = [];\n\n    pushAll(headPath, [...indexesByHardwareChannel[1]].reverse());\n    pushAll(headPath, indexesByHardwareChannel[9]);\n    [11, 13, 15, 7, 5, 3].reverse().forEach(n => {\n      for (let i = 0; i < 1; ++i) {\n        headPath.push(first(indexesByHardwareChannel[n]));\n      }\n    });\n\n    return [headPath];\n  }\n\n  public render(context: Visualization.FrameContext): void {\n    const { elapsedSeconds } = context;\n    this.phase = (this.phase + SPEED * elapsedSeconds) % LED_SEPARATION;\n    const offset = Math.round(this.phase);\n\n    this.paths.forEach(path =>\n      path.forEach((ledAddress, i) => {\n        const color =\n          (i + offset) % LED_SEPARATION === 0 ? Colors.WHITE : Colors.BLACK;\n        this.ledColors.set(ledAddress, color);\n      })\n    );\n  }\n}\n","import * as Colors from \"../../base/Colors\";\nimport * as Visualization from \"../../base/Visualization\";\n\nconst LED_SEPARATION = 3;\nconst SPEED = 10; // LEDs per second\n\nexport default class PatternMarqueeVisualization extends Visualization.RowColumnMappedVisualization {\n  private readonly ledAddresses: Array<[number, number]>;\n  private phase = 0;\n\n  constructor(config: Visualization.Config) {\n    super(config);\n    this.ledAddresses = [];\n    this.ledRowMetadatas[0].forEach((_, i) => this.ledAddresses.push([0, i]));\n    const bottomRow = this.ledRowMetadatas.length - 1;\n    const bottomRowCount = this.ledRowMetadatas[bottomRow].length;\n    this.ledRowMetadatas[bottomRow].forEach((_, i) =>\n      this.ledAddresses.push([bottomRow, bottomRowCount - i - 1])\n    );\n  }\n\n  public renderRows(context: Visualization.FrameContext): void {\n    const { elapsedSeconds } = context;\n    this.phase = (this.phase + SPEED * elapsedSeconds) % LED_SEPARATION;\n    const offset = Math.round(this.phase);\n    this.ledAddresses.forEach((ledAddress, i) => {\n      const [row, index] = ledAddress;\n      const color =\n        (i + offset) % LED_SEPARATION === 0 ? Colors.WHITE : Colors.BLACK;\n      this.ledRows.get(row).set(index, color);\n    });\n  }\n}\n","import * as Visualization from \"../../base/Visualization\";\nimport StaticImageVisualization from \"../../visualizationUtils/StaticImageVisualization\";\n\nexport default class PatternOwlEyesVisualization extends StaticImageVisualization {\n  constructor(config: Visualization.Config) {\n    super(config, \"./owleyes.jpg\");\n  }\n}\n","export default class Recycler<T> {\n  private readonly deadObjects: T[];\n  private readonly objectCreator: () => T;\n\n  constructor(objectCreator: () => T) {\n    this.deadObjects = [];\n    this.objectCreator = objectCreator;\n  }\n\n  public getOrCreate(): T {\n    return this.deadObjects.pop() || this.objectCreator();\n  }\n\n  public recycle(object: T) {\n    this.deadObjects.push(object);\n  }\n}\n","import Recycler from \"./Recycler\";\nimport { forEachReverse } from \"./Utils\";\n\nexport default interface RecycledSet<T> {\n  // adds a new object and returns it so you can set its values\n  add(): T;\n\n  // removes (and recycles) the given object\n  remove(object: T): void;\n\n  // iterates over all the objects; if `func` returns `false` the object will be\n  // removed. Implementations are allowed to wait until all objects are visited\n  // to actually remove any.\n  forEachAndFilter(func: (object: T) => boolean): void;\n\n  readonly size: number;\n}\n\nexport class UnorderedRecycledSet<T> implements RecycledSet<T> {\n  private readonly recycler: Recycler<T>;\n  private readonly liveObjects: T[];\n  private readonly deadObjects: T[];\n\n  public static withObjectCreator<T>(objectCreator: () => T) {\n    return new UnorderedRecycledSet(new Recycler(objectCreator));\n  }\n\n  constructor(recycler: Recycler<T>) {\n    this.recycler = recycler;\n    this.liveObjects = [];\n    this.deadObjects = [];\n  }\n\n  public add(): T {\n    const object = this.recycler.getOrCreate();\n    this.liveObjects.push(object);\n    return object;\n  }\n\n  private removeAtIndex(index: number) {\n    const object = this.liveObjects[index];\n    const lastObject = this.liveObjects.pop() as T;\n    if (object !== lastObject) {\n      this.liveObjects[index] = lastObject;\n    }\n    this.deadObjects.push(object);\n  }\n\n  public remove(object: T) {\n    const index = this.liveObjects.findIndex(v => v === object);\n    if (index !== -1) {\n      this.removeAtIndex(index);\n    }\n  }\n\n  public forEachAndFilter(func: (object: T) => boolean): void {\n    const deadIndexes: number[] = [];\n    this.liveObjects.forEach((object, index) => {\n      const keep = func(object);\n      if (!keep) {\n        deadIndexes.push(index);\n      }\n    });\n    forEachReverse(deadIndexes, i => this.removeAtIndex(i));\n  }\n\n  public get size() {\n    return this.liveObjects.length;\n  }\n}\n","import { UnorderedRecycledSet } from \"../../../util/RecycledSet\";\nimport * as Colors from \"../../base/Colors\";\nimport * as Visualization from \"../../base/Visualization\";\nimport AbstractVoronoiMapperVisualization from \"../../visualizationUtils/AbstractVoronoiMapperVisualization\";\n\nconst MIN_RADIUS = 10;\nconst MAX_RADIUS = 30;\nconst PARTICLES_PER_SECOND = 35;\nconst PARTICLE_MIN_SPEED = 50;\nconst PARTICLE_MAX_SPEED = 300;\n\nclass Particle {\n  public distance: number = 0;\n  public speed: number = 0; // distance / second\n  public radius: number = 0;\n  public angleRadians: number = 0;\n  public color: Colors.Color = Colors.BLACK;\n}\n\nexport default class PatternParticleFireVisualization extends AbstractVoronoiMapperVisualization {\n  private numParticlesToAddRemainder = 0;\n  private readonly maxDistance: number;\n  private readonly particles: UnorderedRecycledSet<Particle>;\n  private readonly baseHue: number;\n\n  constructor(config: Visualization.Config) {\n    super(config);\n    this.particles = UnorderedRecycledSet.withObjectCreator(\n      () => new Particle()\n    );\n    this.maxDistance =\n      Math.max(this.canvas.width, this.canvas.height) / 2 + MAX_RADIUS;\n    this.baseHue = Math.floor(Math.random() * 360);\n  }\n\n  protected renderToCanvas(context: Visualization.FrameContext) {\n    // add particles\n    let numParticlesToAdd =\n      this.numParticlesToAddRemainder +\n      PARTICLES_PER_SECOND * context.elapsedSeconds;\n    while (numParticlesToAdd >= 1) {\n      const particle: Particle = this.particles.add();\n      particle.distance = 0;\n      particle.speed =\n        Math.random() * (PARTICLE_MAX_SPEED - PARTICLE_MIN_SPEED) +\n        PARTICLE_MIN_SPEED;\n      particle.radius = Math.random() * (MAX_RADIUS - MIN_RADIUS) + MIN_RADIUS;\n      particle.angleRadians = Math.random() * Math.PI * 2;\n      particle.color = Colors.hsv(\n        Math.pow(Math.random(), 2) * 60 + this.baseHue,\n        1,\n        Math.random() * 0.3 + 0.7\n      );\n      numParticlesToAdd -= 1;\n    }\n    this.numParticlesToAddRemainder = numParticlesToAdd;\n\n    // clear\n    const canvas = this.canvas;\n    const ctx = this.canvasContext;\n    ctx.fillStyle = Colors.cssColor(Colors.hsv(this.baseHue, 1, 0.1));\n    ctx.globalCompositeOperation = \"source-over\";\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // draw particles\n    const cx = canvas.width / 2;\n    const cy = canvas.height / 2;\n    ctx.globalCompositeOperation = \"lighter\";\n    this.particles.forEachAndFilter(particle => {\n      particle.distance += context.elapsedSeconds * particle.speed;\n      if (particle.distance >= this.maxDistance) {\n        return false;\n      } else {\n        const x = cx + Math.sin(particle.angleRadians) * particle.distance;\n        const y = cy + Math.cos(particle.angleRadians) * particle.distance;\n        ctx.fillStyle = Colors.cssColor(particle.color);\n        ctx.beginPath();\n        ctx.arc(x, y, particle.radius, 0, Math.PI * 2);\n        ctx.fill();\n        return true;\n      }\n    });\n  }\n}\n\nexport class DerezPatternParticleFireVisualization extends Visualization.DerezVisualization {\n  constructor(config: Visualization.Config) {\n    super(new PatternParticleFireVisualization(config), 0.9);\n  }\n}\n","import * as Colors from \"../../base/Colors\";\nimport LedMetadata from \"../../base/LedMetadata\";\nimport * as Visualization from \"../../base/Visualization\";\n\nconst SPARKLES_PER_SECOND = 200;\nconst SPARKLE_HALF_LIFE_SECONDS = 0.1;\nconst FALL_MILLIS = 100;\n\ninterface LedAddress {\n  rowIndex: number;\n  index: number;\n}\n\ninterface Sparkle {\n  address: LedAddress;\n  color: Colors.Color;\n  fadeRate: number; // 0-1\n  millisUntilFall: number;\n}\n\nclass DropHelper {\n  private readonly fallGraph: LedAddress[][][];\n\n  constructor(ledRows: LedMetadata[][]) {\n    // construct \"fall graph\"; every location maps to the 0, 1, or 2 places it could fall to;\n    // that is, the next row's nearest LEDs down and to the left/right of this one\n    this.fallGraph = ledRows.map((ledRow, rowIndex) => {\n      const nextRow: LedMetadata[] | undefined = ledRows[rowIndex + 1];\n      const makeAddress = (index: number) => ({\n        rowIndex: rowIndex + 1,\n        index\n      });\n      return ledRow.map(led => {\n        if (nextRow === undefined || nextRow.length === 0) {\n          return [];\n        }\n        // find the index of the first LED in the next row that's further to the right (x dim) than this one\n        let i: number;\n        for (\n          i = 0;\n          i < nextRow.length && nextRow[i].position.x < led.position.x;\n          ++i\n        ) {\n          // no-op\n        }\n        if (i === 0) {\n          return [makeAddress(0)];\n        } else if (i >= nextRow.length) {\n          return [makeAddress(nextRow.length - 1)];\n        } else {\n          return [makeAddress(i - 1), makeAddress(i)];\n        }\n      });\n    });\n  }\n\n  public drop(address: LedAddress): LedAddress | null {\n    const targets =\n      (this.fallGraph[address.rowIndex] || [])[address.index] || [];\n    if (targets.length === 0) {\n      return null;\n    } else {\n      return targets[Math.floor(Math.random() * targets.length)];\n    }\n  }\n}\n\nexport default class PatternRain2Visualization extends Visualization.RowColumnMappedVisualization {\n  private readonly dropHelper: DropHelper;\n  private readonly sparkles: Set<Sparkle>;\n  private numSparklesRemainder = 0;\n\n  constructor(config: Visualization.Config) {\n    super(config);\n    this.dropHelper = new DropHelper(this.ledRowMetadatas);\n    this.sparkles = new Set();\n  }\n\n  public renderRows(context: Visualization.FrameContext): void {\n    const { elapsedSeconds } = context;\n\n    // drops\n    const deadSparkles: Sparkle[] = [];\n    this.sparkles.forEach(sparkle => {\n      sparkle.millisUntilFall -= elapsedSeconds * 1000;\n      if (sparkle.millisUntilFall <= 0) {\n        const newAddress = this.dropHelper.drop(sparkle.address);\n        if (newAddress === null) {\n          deadSparkles.push(sparkle);\n        } else {\n          sparkle.address = newAddress;\n          sparkle.millisUntilFall = FALL_MILLIS;\n          sparkle.color = Colors.multiply(sparkle.color, 1 - sparkle.fadeRate);\n        }\n      }\n    });\n    deadSparkles.forEach(sparkle => this.sparkles.delete(sparkle));\n\n    // new sparkles\n    let numLeds =\n      this.numSparklesRemainder + elapsedSeconds * SPARKLES_PER_SECOND;\n    while (numLeds >= 1) {\n      const sparkle: Sparkle = {\n        address: {\n          rowIndex: 0,\n          index: Math.floor(Math.random() * this.ledRows.get(0).length)\n        },\n        color: Colors.hsv(\n          200 + Math.random() * 45,\n          Math.pow(Math.random(), 0.2),\n          Math.random() * 0.5 + 0.5\n        ),\n        millisUntilFall: FALL_MILLIS,\n        fadeRate: Math.pow(Math.random(), 0.2)\n      };\n      this.sparkles.add(sparkle);\n      numLeds -= 1;\n    }\n    this.numSparklesRemainder = numLeds;\n\n    // render\n\n    const multiplier = Math.pow(\n      0.5,\n      elapsedSeconds / SPARKLE_HALF_LIFE_SECONDS\n    );\n    this.ledRows.forEach(row =>\n      row.forEach((color, i) => row.set(i, Colors.multiply(color, multiplier)))\n    );\n\n    // this.ledRows.forEach(ledRow => ledRow.fill(Colors.BLACK));\n    this.sparkles.forEach(sparkle => {\n      this.ledRows\n        .get(sparkle.address.rowIndex)\n        .add(sparkle.address.index, sparkle.color);\n    });\n  }\n}\n","import * as Colors from \"../../base/Colors\";\nimport * as Visualization from \"../../base/Visualization\";\n\nconst DEFAULT_SPEED = 0.3;\nconst MAX_SPEED = 1;\n\nexport default class PatternRainbowVisualization extends Visualization.SingleRowVisualization {\n  private offset = 0;\n  private width = 88; // pixels per 360 degrees\n\n  private readonly ludicrousSpeedButton: Visualization.ButtonControl;\n  private readonly speedDial: Visualization.DialControl;\n\n  constructor(config: Visualization.Config) {\n    super(config);\n\n    this.speedDial = config.createDialControl({\n      initialValue: DEFAULT_SPEED,\n      minValue: -1 * MAX_SPEED,\n      maxValue: MAX_SPEED\n    });\n    this.ludicrousSpeedButton = config.createButtonControl();\n  }\n\n  public renderSingleRow(context: Visualization.FrameContext): void {\n    const { elapsedMillis } = context;\n\n    const ludicrousSpeed = this.ludicrousSpeedButton.value;\n    let speed = this.speedDial.value * (ludicrousSpeed ? 5 : 1);\n    speed = 0.15; // dials can't be shared across viz, so this is a hack to allow more than one viz to run simultaneously\n    this.offset = (this.offset + speed * elapsedMillis) % 360.0;\n\n    const step = 360 / this.width;\n\n    const mid = Math.ceil(this.leds.length / 2);\n\n    for (let i = 0; i < mid; ++i) {\n      const hue = this.offset + step * i;\n      const color = Colors.hsv(hue, 1, 1);\n      this.leds.set(i, color);\n      this.leds.set(this.leds.length - 1 - i, color);\n    }\n  }\n}\n\nexport class DerezPatternRainbowVisualization extends Visualization.DerezVisualization {\n  constructor(config: Visualization.Config) {\n    super(new PatternRainbowVisualization(config), 0.92);\n  }\n}\n","import * as Colors from \"../../base/Colors\";\nimport * as Visualization from \"../../base/Visualization\";\n\nconst SPARKLES_PER_SECOND = 300;\nconst SPARKLE_HALF_LIFE_SECONDS = 0.2;\n\nexport default class PatternSparklesVisualization extends Visualization.default {\n  private numLedsRemainder = 0;\n\n  public render(context: Visualization.FrameContext): void {\n    const { elapsedSeconds } = context;\n\n    const multiplier = Math.pow(\n      0.5,\n      elapsedSeconds / SPARKLE_HALF_LIFE_SECONDS\n    );\n    this.ledColors.forEach((color, i) =>\n      this.ledColors.set(i, Colors.multiply(color, multiplier))\n    );\n\n    let numLeds = this.numLedsRemainder + elapsedSeconds * SPARKLES_PER_SECOND;\n    while (numLeds >= 1) {\n      const n = Math.floor(Math.random() * this.ledColors.length);\n      this.ledColors.set(n, Colors.WHITE);\n      numLeds -= 1;\n    }\n    this.numLedsRemainder = numLeds;\n  }\n}\n","import * as Colors from \"../../base/Colors\";\nimport * as Visualization from \"../../base/Visualization\";\n\n// const SPEED = 3 / 1000;\nconst VERTICAL_SHARPNESS = 7;\nconst FLAPPINESS = 2;\nconst TIP_DISTANCE = 0.65; // 0 to 1\nconst TIP_FADE = 4;\n\nconst DEREZ = 0.4;\n\n// derived\n// const PERIOD = Math.PI * 2 / SPEED;\n\n// TODO improve flap motion\n// TODO see if we can smooth it out by not perfectly following ribs\n\nclass PureWingFlapVisualization extends Visualization.RowColumnMappedVisualization {\n  private phase = 0;\n  private readonly positionTimeSeries: Visualization.TimeSeriesValue;\n\n  constructor(config: Visualization.Config) {\n    super(config);\n    this.positionTimeSeries = config.createTimeSeries();\n  }\n\n  public renderRows(context: Visualization.FrameContext): void {\n    const { elapsedSeconds, beatController } = context;\n\n    beatController.hz();\n    // const period = 1 / beatController.hz();\n    // const speed = Math.PI * period;\n    this.phase =\n      this.phase + (elapsedSeconds * Math.PI * beatController.hz()) / 2;\n\n    const positionNormalized = Math.pow(Math.sin(this.phase), FLAPPINESS);\n    const position = positionNormalized * (this.ledRows.length - 1);\n\n    this.ledRows.forEach((leds, row) => {\n      const rowV = Math.pow(\n        1 - Math.abs(position - row) / this.ledRows.length,\n        VERTICAL_SHARPNESS\n      );\n      const rowColor = Colors.hsv(0, 0, rowV);\n      for (let i = 0; i < leds.length; ++i) {\n        // -1 on left, 0 in middle, 1 on right\n        const x = (i - (leds.length - 1) / 2) / ((leds.length - 1) / 2);\n\n        // 1 at the tips, 0 where tips \"start\"\n        const tippiness =\n          Math.max(0, Math.abs(x) - TIP_DISTANCE) / (1 - TIP_DISTANCE);\n        const color = Colors.multiply(\n          rowColor,\n          Math.pow(1 - tippiness, TIP_FADE)\n        );\n        leds.set(i, color);\n      }\n    });\n\n    this.positionTimeSeries.value = 1 - positionNormalized;\n  }\n}\n\nexport default class PatternWingFlapVisualization extends Visualization.DerezVisualization {\n  constructor(config: Visualization.Config) {\n    super(new PureWingFlapVisualization(config), DEREZ);\n  }\n}\n","import * as Colors from \"../../base/Colors\";\nimport * as Visualization from \"../../base/Visualization\";\n\nconst DECAY_RATE = 0.005; // per ms\n\nexport default class PatternZapsVisualization extends Visualization.RowColumnMappedVisualization {\n  private phase: number = 0;\n  private ribChannels: number[][]; // addressing is row -> column -> channel\n  private channelValues: Map<number, Colors.Color>;\n  private numRows: number;\n  private numColumns: number;\n\n  constructor(config: Visualization.Config) {\n    super(config);\n\n    this.ribChannels = [];\n    this.channelValues = new Map();\n    this.ledRowMetadatas.forEach((rowLeds, rowIndex) => {\n      const rowChannels: number[] = [];\n      rowLeds.forEach(led => {\n        const channel = led.hardwareChannel;\n        if (!rowChannels.includes(channel)) {\n          rowChannels.push(channel);\n          this.channelValues.set(channel, 0);\n        }\n      });\n      this.ribChannels.push(rowChannels);\n    });\n\n    this.numRows = this.ribChannels.length;\n    if (this.numRows === 0) {\n      throw new Error(\"no rows\");\n    }\n    this.numColumns = this.ribChannels[0].length;\n    this.ribChannels.forEach(rowChannels => {\n      const myNumColumns = rowChannels.length;\n      if (this.numColumns !== myNumColumns) {\n        throw new Error(\"rows don't all have the same number of columns!\");\n      }\n    });\n  }\n\n  private doZap() {\n    const leftRow = Math.floor(Math.random() * this.numRows);\n    const rightRow = Math.floor(Math.random() * this.numRows);\n    const color = Colors.hsv(Math.random() * 360, 0.6, 1);\n\n    for (let column = 0; column < this.numColumns; ++column) {\n      const row = column < this.numColumns / 2 ? leftRow : rightRow;\n      const channel = this.ribChannels[row][column];\n      this.channelValues.set(\n        channel,\n        Colors.add(this.channelValues.get(channel) || Colors.BLACK, color)\n      );\n    }\n  }\n\n  public renderRows(context: Visualization.FrameContext): void {\n    const { elapsedMillis, beatController } = context;\n\n    // decay\n    const decayAmount = elapsedMillis * DECAY_RATE;\n    this.channelValues.forEach((value, channel) => {\n      this.channelValues.set(channel, Colors.multiply(value, 1 - decayAmount));\n    });\n\n    // do new zaps if needed\n    this.phase += elapsedMillis;\n    const millisBetweenZaps = (1 / beatController.hz()) * 1000;\n    while (this.phase > millisBetweenZaps) {\n      this.doZap();\n      this.phase -= millisBetweenZaps;\n    }\n\n    // render\n    this.ledRowMetadatas.forEach((rowLeds, rowIndex) => {\n      const ledRow = this.ledRows.get(rowIndex);\n      rowLeds.forEach((ledMetadata, index) => {\n        ledRow.set(\n          index,\n          this.channelValues.get(ledMetadata.hardwareChannel) || Colors.BLACK\n        );\n      });\n    });\n  }\n}\n","import * as Colors from \"../../base/Colors\";\nimport * as Visualization from \"../../base/Visualization\";\nimport AbstractVoronoiMapperVisualization from \"../../visualizationUtils/AbstractVoronoiMapperVisualization\";\n\nconst ZOOM_SPEED = 2;\nconst RADIUS_STEP = 15;\n\nexport default class PatternZoomVisualization extends AbstractVoronoiMapperVisualization {\n  private phase = 0;\n\n  private drawCircle(radius: number, color: Colors.Color) {\n    const canvas = this.canvas;\n    const ctx = this.canvasContext;\n\n    const cx = canvas.width / 2;\n    const cy = canvas.height / 2;\n    ctx.fillStyle = Colors.cssColor(color);\n    ctx.globalAlpha = 1;\n\n    ctx.beginPath();\n    ctx.arc(cx, cy, radius, 0, Math.PI * 2);\n    ctx.fill();\n  }\n\n  protected renderToCanvas(context: Visualization.FrameContext) {\n    const now = Date.now();\n    this.phase =\n      (this.phase + ZOOM_SPEED * RADIUS_STEP * context.elapsedSeconds) %\n      (RADIUS_STEP * 2);\n\n    const canvas = this.canvas;\n    const ctx = this.canvasContext;\n\n    ctx.fillStyle = \"black\";\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    let i = 0;\n    for (\n      let radius = this.phase + Math.max(canvas.width, canvas.height);\n      radius > 0;\n      radius -= RADIUS_STEP\n    ) {\n      this.drawCircle(\n        radius,\n        i % 2 === 0 ? Colors.hsv(radius * 2 + now / 80, 1, 1) : Colors.BLACK\n      );\n      ++i;\n    }\n  }\n}\n\nexport class DerezPatternZoomVisualization extends Visualization.DerezVisualization {\n  constructor(config: Visualization.Config) {\n    super(new PatternZoomVisualization(config), 0.9);\n  }\n}\n","import * as Visualization from \"../base/Visualization\";\n\nfunction branchAudioNode(audioNode?: AudioNode) {\n  if (audioNode === undefined) {\n    return undefined;\n  } else {\n    const newNode = new GainNode(audioNode.context);\n    audioNode.connect(newNode);\n    return newNode;\n  }\n}\n\nconst BASE_TRANSITION_TIME_MS = 5000;\n\nexport interface PlaylistEntry {\n  displayName: string;\n  visualization: Visualization.Constructor;\n  duration: number;\n}\n\nexport class PlaylistVisualization extends Visualization.default {\n  private readonly entries: PlaylistEntry[];\n  private lastVisualization?: Visualization.default;\n  private currentVisualization?: Visualization.default;\n  private currentVisualizationIndex: number = 0;\n  private currentBranchedAudioNode?: AudioNode;\n  private timeAtSwitch: number = 0;\n  private secondsUntilSwitch: number = 0;\n  private button?: Visualization.ButtonControl;\n\n  constructor(\n    config: Visualization.Config,\n    attrs: {\n      visualizations: PlaylistEntry[];\n    }\n  ) {\n    super(config);\n    this.entries = attrs.visualizations;\n\n    if (this.entries.length < 1) {\n      throw new Error(\"must have at least 1 visualization\");\n    }\n\n    this.switchToVisualization(0);\n  }\n\n  private switchToVisualization(n: number) {\n    this.currentVisualizationIndex = n;\n    const entry = this.entries[n];\n\n    if (this.currentBranchedAudioNode !== undefined) {\n      this.currentBranchedAudioNode.disconnect();\n    }\n\n    if (this.config.audioSource !== null) {\n      this.currentBranchedAudioNode = branchAudioNode(this.config.audioSource);\n    }\n\n    this.config.reset();\n\n    const element = document.createElement(\"div\");\n    const labelElement = document.createElement(\"div\");\n    labelElement.innerText = entry.displayName;\n    labelElement.style.backgroundColor = \"gray\";\n    labelElement.style.color = \"white\";\n    labelElement.style.fontSize = \"12px\";\n    labelElement.style.padding = \"5px\";\n    element.appendChild(labelElement);\n    const containerElement = document.createElement(\"div\");\n    element.appendChild(containerElement);\n    this.config.setExtraDisplay(element);\n\n    this.button = this.config.createButtonControl({ buttonNumber: 5 });\n    const newConfig: Visualization.Config = {\n      ...this.config,\n      setExtraDisplay: (newElement: HTMLElement | null) => {\n        containerElement.innerHTML = \"\";\n        if (newElement !== null) {\n          containerElement.appendChild(newElement);\n        }\n      },\n      audioSource: this.currentBranchedAudioNode\n    };\n\n    const vis = new entry.visualization(newConfig);\n    this.lastVisualization = this.currentVisualization;\n    this.currentVisualization = vis;\n    this.timeAtSwitch = Date.now();\n    this.secondsUntilSwitch = entry.duration;\n  }\n\n  private goToNextVisualization() {\n    this.switchToVisualization(\n      (this.currentVisualizationIndex + 1) % this.entries.length\n    );\n  }\n\n  public render(context: Visualization.FrameContext) {\n    this.secondsUntilSwitch -= context.elapsedSeconds;\n    const shouldSwitch =\n      this.secondsUntilSwitch < 0 ||\n      (this.button && this.button.pressedSinceLastFrame);\n    if (shouldSwitch) {\n      this.goToNextVisualization();\n    }\n\n    const now = Date.now();\n    if (now - this.timeAtSwitch > BASE_TRANSITION_TIME_MS) {\n      this.lastVisualization = undefined;\n    }\n\n    const vis = this.currentVisualization;\n    if (vis !== undefined) {\n      vis.render(context);\n      vis.ledColors.copy(this.ledColors);\n    }\n\n    if (this.lastVisualization !== undefined) {\n      this.lastVisualization.render(context);\n      const alpha = (now - this.timeAtSwitch) / BASE_TRANSITION_TIME_MS;\n      this.lastVisualization.ledColors.forEach((color, ledIdx) => {\n        // tslint:disable-next-line:no-bitwise\n        const hash = ((ledIdx * 801571) % 1000) / 1000.0;\n        if (alpha < hash) {\n          this.ledColors.set(ledIdx, color);\n        }\n      });\n    }\n  }\n}\n","import * as Visualization from \"../../base/Visualization\";\nimport { PlaylistVisualization } from \"../../visualizationUtils/PlaylistVisualization\";\nimport ExpandingDashesVisualization from \"../burrow/ExpandingDashesVisualization\";\nimport FourierTwinkleVisualization from \"../burrow/FourierTwinkleVisualization\";\nimport PulsingRainVisualization from \"../burrow/PulsingRainVisualization\";\nimport SplotchesVisualization, {\n  DerezSplotchesVisualization\n} from \"../burrow/SplotchesVisualization\";\nimport SpreadShootersAudioVisualization, {\n  DerezSpreadShootersAudioVisualization\n} from \"../burrow/SpreadShootersAudioVisualization\";\nimport PatternClockVisualization, {\n  DerezPatternClockVisualization\n} from \"../patterns/PatternClockVisualization\";\nimport PatternDotVisualization, {\n  DerezPatternDotVisualization\n} from \"../patterns/PatternDotVisualization\";\nimport PatternMarqueeVisualization from \"../patterns/PatternMarqueeVisualization\";\nimport PatternParticleFireVisualization, {\n  DerezPatternParticleFireVisualization\n} from \"../patterns/PatternParticleFireVisualization\";\nimport PatternRainbowVisualization, {\n  DerezPatternRainbowVisualization\n} from \"../patterns/PatternRainbowVisualization\";\nimport PatternSparklesVisualization from \"../patterns/PatternSparklesVisualization\";\nimport PatternWingFlapVisualization from \"../patterns/PatternWingFlapVisualization\";\nimport PatternZapsVisualization from \"../patterns/PatternZapsVisualization\";\nimport PatternZoomVisualization, {\n  DerezPatternZoomVisualization\n} from \"../patterns/PatternZoomVisualization\";\n\n// import SparklesAndFlashesVisualization from \"./SparklesAndFlashesVisualization\";\n\nexport default class BurrowPlaylistVisualization extends PlaylistVisualization {\n  constructor(config: Visualization.Config) {\n    super(config, {\n      visualizations: [\n        {\n          displayName: \"Expanding Dashes\",\n          visualization: ExpandingDashesVisualization,\n          duration: 7 * 60\n        },\n        {\n          displayName: \"Sparkles\",\n          visualization: PatternSparklesVisualization,\n          duration: 2 * 60\n        },\n        {\n          displayName: \"Dot\",\n          visualization: PatternDotVisualization,\n          duration: 1 * 60\n        },\n        {\n          displayName: \"Fourier Twinkle\",\n          visualization: FourierTwinkleVisualization,\n          duration: 4 * 60\n        },\n        {\n          displayName: \"Clock\",\n          visualization: PatternClockVisualization,\n          duration: 1 * 60\n        },\n        {\n          displayName: \"Fire\",\n          visualization: PatternParticleFireVisualization,\n          duration: 2 * 60\n        },\n        {\n          displayName: \"Derez Shooters\",\n          visualization: DerezSpreadShootersAudioVisualization,\n          duration: 7 * 60\n        },\n        {\n          displayName: \"Rainbow\",\n          visualization: PatternRainbowVisualization,\n          duration: 4 * 60\n        },\n        {\n          displayName: \"Flap\",\n          visualization: PatternWingFlapVisualization,\n          duration: 1 * 60\n        },\n        {\n          displayName: \"Pulsing Rain\",\n          visualization: PulsingRainVisualization,\n          duration: 7 * 60\n        },\n        {\n          displayName: \"Derez Zoom\",\n          visualization: DerezPatternZoomVisualization,\n          duration: 4 * 60\n        },\n        {\n          displayName: \"Marquee\",\n          visualization: PatternMarqueeVisualization,\n          duration: 1 * 60\n        },\n        {\n          displayName: \"Splotches\",\n          visualization: SplotchesVisualization,\n          duration: 5 * 60\n        },\n        {\n          displayName: \"Derez Clock\",\n          visualization: DerezPatternClockVisualization,\n          duration: 1 * 60\n        },\n        {\n          displayName: \"Expanding Dashes\",\n          visualization: ExpandingDashesVisualization,\n          duration: 7 * 60\n        },\n        {\n          displayName: \"Derez Fire\",\n          visualization: DerezPatternParticleFireVisualization,\n          duration: 3 * 60\n        },\n        {\n          displayName: \"Marquee\",\n          visualization: PatternMarqueeVisualization,\n          duration: 1 * 60\n        },\n        {\n          displayName: \"Zoom\",\n          visualization: PatternZoomVisualization,\n          duration: 4 * 60\n        },\n        {\n          displayName: \"Derez Rainbow\",\n          visualization: DerezPatternRainbowVisualization,\n          duration: 4 * 60\n        },\n        {\n          displayName: \"Zaps\",\n          visualization: PatternZapsVisualization,\n          duration: 1 * 60\n        },\n        {\n          displayName: \"Derez Dot\",\n          visualization: DerezPatternDotVisualization,\n          duration: 3 * 60\n        },\n        {\n          displayName: \"Clock\",\n          visualization: PatternClockVisualization,\n          duration: 1 * 60\n        },\n        {\n          displayName: \"Shooters\",\n          visualization: SpreadShootersAudioVisualization,\n          duration: 7 * 60\n        },\n        {\n          displayName: \"Flap\",\n          visualization: PatternWingFlapVisualization,\n          duration: 1 * 60\n        },\n        {\n          displayName: \"Derez Splotches\",\n          visualization: DerezSplotchesVisualization,\n          duration: 5 * 60\n        },\n        {\n          displayName: \"Marquee\",\n          visualization: PatternMarqueeVisualization,\n          duration: 1 * 60\n        },\n        {\n          displayName: \"Sparkles\",\n          visualization: PatternSparklesVisualization,\n          duration: 2 * 60\n        }\n      ]\n    });\n  }\n}\n","import * as Visualization from \"../../base/Visualization\";\nimport { PlaylistVisualization } from \"../../visualizationUtils/PlaylistVisualization\";\nimport PatternMarqueeVisualization from \"../patterns/PatternMarqueeVisualization\";\nimport PatternRainbowVisualization from \"../patterns/PatternRainbowVisualization\";\nimport PatternZoomVisualization from \"../patterns/PatternZoomVisualization\";\n\nexport default class TestPlaylistVisualization extends PlaylistVisualization {\n  constructor(config: Visualization.Config) {\n    super(config, {\n      visualizations: [\n        {\n          displayName: \"Rainbow\",\n          visualization: PatternRainbowVisualization,\n          duration: 5\n        },\n        {\n          displayName: \"Zoom\",\n          visualization: PatternZoomVisualization,\n          duration: 5\n        },\n        {\n          displayName: \"Marquee\",\n          visualization: PatternMarqueeVisualization,\n          duration: 5\n        }\n      ]\n    });\n  }\n}\n","// import * as Colors from \"../base/Colors\";\nimport * as Visualization from \"../../base/Visualization\";\nimport AbstractVoronoiMapperVisualization from \"../../visualizationUtils/AbstractVoronoiMapperVisualization\";\n\nconst NUM_SAMPLES = 64;\n\nexport default class MyVisualization extends AbstractVoronoiMapperVisualization {\n  private readonly analyser: AnalyserNode | null;\n  private readonly buffer: Uint8Array;\n\n  constructor(config: Visualization.Config) {\n    super(config);\n\n    if (config.audioSource !== undefined) {\n      const context = config.audioSource.context;\n      const analyser = new AnalyserNode(context);\n      analyser.fftSize = NUM_SAMPLES;\n      config.audioSource.connect(analyser);\n      this.analyser = analyser;\n      this.buffer = new Uint8Array(this.analyser.frequencyBinCount);\n    } else {\n      this.analyser = null;\n      this.buffer = new Uint8Array(0);\n    }\n  }\n\n  protected renderToCanvas(context: Visualization.FrameContext) {\n    const analyser = this.analyser;\n    if (analyser === null) {\n      return;\n    }\n\n    const canvas = this.canvas;\n    const ctx = this.canvasContext;\n\n    ctx.fillStyle = \"black\";\n    ctx.globalCompositeOperation = \"source-over\";\n    ctx.globalAlpha = 1;\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    ctx.fillStyle = \"white\";\n\n    const dx = canvas.width / this.buffer.length / 2;\n    const cy = (canvas.height - 1) / 2;\n\n    analyser.getByteFrequencyData(this.buffer);\n    this.buffer.forEach((v, i) => {\n      const h = cy * (v / 255);\n      ctx.fillRect(canvas.width * 0.5 + dx * i, cy - h / 2, dx + 1, h);\n      ctx.fillRect(canvas.width * 0.5 - dx * i, cy - h / 2, dx + 1, h);\n    });\n  }\n}\n","// import * as Colors from \"../base/Colors\";\nimport * as Visualization from \"../../base/Visualization\";\nimport AbstractVoronoiMapperVisualization from \"../../visualizationUtils/AbstractVoronoiMapperVisualization\";\n\nconst NUM_SAMPLES = 1024;\n\nexport default class MyVisualization extends AbstractVoronoiMapperVisualization {\n  private readonly analyser: AnalyserNode | null;\n  private readonly buffer: Float32Array;\n\n  constructor(config: Visualization.Config) {\n    super(config);\n\n    if (config.audioSource !== undefined) {\n      const context = config.audioSource.context;\n      const analyser = new AnalyserNode(context);\n      analyser.fftSize = NUM_SAMPLES;\n      config.audioSource.connect(analyser);\n      this.analyser = analyser;\n      this.buffer = new Float32Array(this.analyser.fftSize);\n    } else {\n      this.analyser = null;\n      this.buffer = new Float32Array(0);\n    }\n  }\n\n  protected renderToCanvas(context: Visualization.FrameContext) {\n    const analyser = this.analyser;\n    if (analyser === null) {\n      return;\n    }\n\n    const canvas = this.canvas;\n    const ctx = this.canvasContext;\n\n    ctx.fillStyle = \"black\";\n    ctx.globalCompositeOperation = \"source-over\";\n    ctx.globalAlpha = 1;\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    ctx.fillStyle = \"white\";\n\n    const dx = canvas.width / this.buffer.length;\n    const cy = (canvas.height - 1) / 2;\n\n    analyser.getFloatTimeDomainData(this.buffer);\n    this.buffer.forEach((v, i) => {\n      const h = cy * Math.abs(v) * 3;\n      ctx.fillRect(dx * i, cy - h / 2, dx, h);\n    });\n  }\n}\n","import * as Colors from \"../../base/Colors\";\nimport * as Visualization from \"../../base/Visualization\";\n\nexport default class TestAbletonLink extends Visualization.default {\n  private readonly duringBeatTimeSeries: Visualization.TimeSeriesValue;\n  private readonly progressToNextBeatTimeSeries: Visualization.TimeSeriesValue;\n  private readonly timeSinceLastBeatTimeSeries: Visualization.TimeSeriesValue;\n\n  constructor(config: Visualization.Config) {\n    super(config);\n    this.duringBeatTimeSeries = config.createTimeSeries();\n    this.timeSinceLastBeatTimeSeries = config.createTimeSeries();\n    this.progressToNextBeatTimeSeries = config.createTimeSeries();\n  }\n\n  public render(context: Visualization.FrameContext): void {\n    const { beatController } = context;\n\n    const duringBeat =\n      beatController.timeSinceLastBeat() < 0.1 &&\n      beatController.beatNumber() % 4 === 0;\n\n    this.ledColors.fill(duringBeat ? Colors.WHITE : Colors.BLACK);\n\n    this.duringBeatTimeSeries.value = duringBeat ? 1 : 0;\n    this.progressToNextBeatTimeSeries.value =\n      beatController.progressToNextBeat();\n    this.timeSinceLastBeatTimeSeries.value = beatController.timeSinceLastBeat();\n  }\n}\n","import { bracket01 } from \"../../../util/Utils\";\nimport * as Colors from \"../../base/Colors\";\nimport * as Visualization from \"../../base/Visualization\";\nimport * as AudioWaveformSampler from \"../../visualizationUtils/AudioWaveformSampler\";\n\nexport default class TestAudioAndAbletonLink extends Visualization.default {\n  private readonly analyserHelpers: ReturnType<\n    typeof AudioWaveformSampler.createAnalyserHelpers\n  > | null;\n  private readonly duringBeatTimeSeries: Visualization.TimeSeriesValue;\n  private readonly loudnessTimeSeries: Visualization.TimeSeriesValue;\n  private readonly currentRMSAmplitudeTimeSeries: Visualization.TimeSeriesValue;\n\n  constructor(config: Visualization.Config) {\n    super(config);\n\n    const audioSource = config.audioSource;\n    if (audioSource !== undefined) {\n      this.analyserHelpers =\n        AudioWaveformSampler.createAnalyserHelpers(audioSource);\n    } else {\n      this.analyserHelpers = null;\n    }\n\n    this.duringBeatTimeSeries = config.createTimeSeries();\n    this.loudnessTimeSeries = config.createTimeSeries({ color: Colors.RED });\n    this.currentRMSAmplitudeTimeSeries = config.createTimeSeries({\n      color: Colors.GREEN\n    });\n  }\n\n  public render(context: Visualization.FrameContext): void {\n    if (this.analyserHelpers === null) {\n      return;\n    }\n\n    this.analyserHelpers.sampleAll();\n\n    const duringBeat = context.beatController.timeSinceLastBeat() < 0.1;\n    const loudness = bracket01(this.analyserHelpers.direct.currentMaxAmplitude);\n\n    this.ledColors.fill(duringBeat ? loudness * Colors.WHITE : Colors.BLACK);\n\n    this.duringBeatTimeSeries.value = duringBeat ? 1 : 0;\n    this.loudnessTimeSeries.value = loudness;\n    this.currentRMSAmplitudeTimeSeries.value =\n      this.analyserHelpers.direct.currentRMSAmplitude;\n  }\n}\n","import { bracket } from \"../../../util/Utils\";\nimport * as Colors from \"../../base/Colors\";\nimport * as Visualization from \"../../base/Visualization\";\n\nconst FFT_SIZE = 128;\nconst NUM_FREQUENCY_BINS = FFT_SIZE / 2;\nconst USE_LOWPASS_FILTER = false;\n\nclass BasicFFTHelper {\n  private analyser: AnalyserNode;\n  private readonly frequencyDataBuffer: Uint8Array;\n\n  constructor(audioSource: AudioNode) {\n    const audioContext = audioSource.context;\n    const analyser = audioContext.createAnalyser();\n    analyser.fftSize = FFT_SIZE;\n    analyser.smoothingTimeConstant = 0.8;\n\n    if (USE_LOWPASS_FILTER) {\n      // connect the source to low-pass filter, then low-pass filter to analyser\n      const filter = new BiquadFilterNode(audioContext, { type: \"lowpass\" });\n      audioSource.connect(filter);\n      filter.connect(analyser);\n    } else {\n      // connect the source directly to analyser\n      audioSource.connect(analyser);\n    }\n\n    this.analyser = analyser;\n    if (analyser.frequencyBinCount !== NUM_FREQUENCY_BINS) {\n      throw new Error(\"incorrect number of frequency bins\");\n    }\n\n    this.frequencyDataBuffer = new Uint8Array(NUM_FREQUENCY_BINS);\n  }\n\n  public getFrequencyData() {\n    if (this.analyser !== null) {\n      this.analyser.getByteFrequencyData(this.frequencyDataBuffer);\n    } else {\n      this.frequencyDataBuffer.fill(0);\n    }\n    return this.frequencyDataBuffer;\n  }\n}\n\nexport default class TestAudioPulseVisualization extends Visualization.RowColumnMappedVisualization {\n  private readonly fft: BasicFFTHelper | null;\n  private readonly pulseValueTimeSeries: Visualization.TimeSeriesValue;\n\n  constructor(config: Visualization.Config) {\n    super(config);\n    this.fft =\n      config.audioSource === undefined\n        ? null\n        : new BasicFFTHelper(config.audioSource);\n    this.pulseValueTimeSeries = config.createTimeSeries();\n  }\n\n  public renderRows(context: Visualization.FrameContext): void {\n    if (this.fft === null) {\n      return;\n    }\n\n    const frequencyData = this.fft.getFrequencyData();\n\n    let total = 0;\n    frequencyData.forEach(v => (total += v));\n\n    // between 0 and 1\n    const pulseValue = bracket(0, 1, total / frequencyData.length / 255);\n\n    this.ledRows.forEach(row => {\n      row.fill(Colors.BLACK);\n      const midPoint = Math.floor(row.length / 2);\n      const pulseWidth = pulseValue * row.length;\n      const startIndex = Math.max(0, Math.floor(midPoint - pulseWidth / 2));\n      const endIndex = Math.min(\n        row.length - 1,\n        Math.floor(midPoint + pulseWidth / 2)\n      );\n\n      for (let i = startIndex; i <= endIndex; ++i) {\n        row.set(i, Colors.WHITE);\n      }\n    });\n\n    context.setFrameHeatmapValues(\n      Array.from(frequencyData.values()).map(v => v / 255)\n    );\n    this.pulseValueTimeSeries.value = pulseValue;\n  }\n}\n","import * as Colors from \"../../base/Colors\";\nimport * as Visualization from \"../../base/Visualization\";\nimport * as AudioWaveformSampler from \"../../visualizationUtils/AudioWaveformSampler\";\n\nconst CANVAS_SCALE = 0.5;\n\nclass FloatDataCanvasHelper {\n  public readonly canvas: HTMLCanvasElement;\n\n  private readonly data: Float32Array;\n  private readonly canvasContext: CanvasRenderingContext2D;\n\n  constructor(data: Float32Array) {\n    this.data = data;\n\n    this.canvas = document.createElement(\"canvas\");\n    const ctx = this.canvas.getContext(\"2d\");\n    if (ctx === null) {\n      throw new Error(\"can't get canvas context\");\n    }\n    this.canvasContext = ctx;\n    this.canvas.width = data.length * CANVAS_SCALE;\n    this.canvas.height = 255 * CANVAS_SCALE;\n    this.canvas.style.backgroundColor = \"black\";\n    ctx.scale(CANVAS_SCALE, CANVAS_SCALE);\n  }\n\n  public render(overrideData?: Float32Array) {\n    const data = overrideData || this.data;\n    if (data.length !== this.data.length) {\n      throw new Error(\"overrideData has a different length\");\n    }\n\n    const canvas = this.canvas;\n    const ctx = this.canvasContext;\n\n    // clear\n    ctx.fillStyle = \"black\";\n    ctx.fillRect(\n      0,\n      0,\n      canvas.width / CANVAS_SCALE,\n      canvas.height / CANVAS_SCALE\n    );\n\n    // render values\n    ctx.strokeStyle = \"white\";\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n    ctx.moveTo(-1, 127);\n    data.forEach((y, x) => {\n      ctx.lineTo(x, y * 127 + 127);\n    });\n    ctx.stroke();\n  }\n}\n\nexport default class TestAudioWaveformVisualization extends Visualization.default {\n  private readonly analyserHelpers: ReturnType<\n    typeof AudioWaveformSampler.createAnalyserHelpers\n  > | null;\n  private readonly canvasHelper: FloatDataCanvasHelper | null;\n\n  private readonly lowTimeSeries: Visualization.TimeSeriesValue;\n  private readonly highTimeSeries: Visualization.TimeSeriesValue;\n\n  constructor(config: Visualization.Config) {\n    super(config);\n\n    const audioSource = config.audioSource;\n    if (audioSource !== undefined) {\n      this.analyserHelpers =\n        AudioWaveformSampler.createAnalyserHelpers(audioSource);\n      this.canvasHelper = new FloatDataCanvasHelper(\n        this.analyserHelpers.direct.currentSamples\n      );\n      config.setExtraDisplay(this.canvasHelper.canvas);\n    } else {\n      this.analyserHelpers = null;\n      this.canvasHelper = null;\n    }\n\n    this.lowTimeSeries = config.createTimeSeries({ color: Colors.BLUE });\n    this.highTimeSeries = config.createTimeSeries({ color: Colors.RED });\n  }\n\n  public render(context: Visualization.FrameContext): void {\n    if (this.analyserHelpers === null) {\n      return;\n    }\n\n    this.analyserHelpers.sampleAll();\n\n    // render\n    if (this.canvasHelper !== null) {\n      this.canvasHelper.render(this.analyserHelpers.direct.currentSamples);\n    }\n\n    this.lowTimeSeries.value = this.analyserHelpers.low.currentRMSAmplitude;\n    this.highTimeSeries.value = this.analyserHelpers.high.currentRMSAmplitude;\n  }\n}\n","import * as Colors from \"../../base/Colors\";\nimport * as Visualization from \"../../base/Visualization\";\n\nexport default class TestControllerDialVisualization extends Visualization.RowColumnMappedVisualization {\n  private readonly rDial: Visualization.DialControl;\n  private readonly gDial: Visualization.DialControl;\n  private readonly bDial: Visualization.DialControl;\n\n  private readonly timeSerieses: Visualization.EasyTimeSeriesValueSetters;\n\n  constructor(config: Visualization.Config) {\n    super(config);\n\n    this.rDial = config.createDialControl();\n    this.gDial = config.createDialControl();\n    this.bDial = config.createDialControl();\n\n    this.timeSerieses = config.createEasyTimeSeriesSet();\n  }\n\n  public renderRows(context: Visualization.FrameContext): void {\n    const rValue = this.rDial.value;\n    const gValue = this.gDial.value;\n    const bValue = this.bDial.value;\n\n    this.ledRows.forEach(row => {\n      const midPoint = Math.floor(row.length / 2);\n      const rDistance = rValue * midPoint;\n      const gDistance = gValue * midPoint;\n      const bDistance = bValue * midPoint;\n\n      for (let i = 0; i < row.length; ++i) {\n        const distance = Math.floor(Math.abs(midPoint - i));\n        row.set(\n          i,\n          Colors.rgb(\n            distance <= rDistance ? 1 : 0,\n            distance <= gDistance ? 1 : 0,\n            distance <= bDistance ? 1 : 0\n          )\n        );\n      }\n    });\n\n    this.timeSerieses.red.value = rValue;\n    this.timeSerieses.green.value = gValue;\n    this.timeSerieses.blue.value = bValue;\n  }\n}\n","import * as Utils from \"../../../util/Utils\";\nimport * as Colors from \"../../base/Colors\";\nimport * as Visualization from \"../../base/Visualization\";\n\nconst COLOR_PRESSED = Colors.WHITE;\nconst COLOR_RELEASED = Colors.multiply(Colors.RED, 0.25);\n\nconst PALETTE_SIZE = 64;\nconst PALETTE: Colors.Color[] = Colors.createPaletteFadeLinear(\n  COLOR_RELEASED,\n  COLOR_PRESSED,\n  PALETTE_SIZE\n);\n\nfunction colorForValue(v: number) {\n  if (v < 0) {\n    v = 0;\n  } else if (v > 1) {\n    v = 1;\n  }\n\n  const x = Math.floor(v * (PALETTE_SIZE - 1));\n  return PALETTE[x];\n}\n\nexport default class TestKeyFadeVisualization extends Visualization.SingleRowVisualization {\n  private readonly values: number[];\n  private readonly decayRate = 3 / 1000;\n\n  constructor(config: Visualization.Config) {\n    super(config, 88);\n    this.values = new Array(this.leds.length).fill(0);\n  }\n\n  public renderSingleRow(context: Visualization.FrameContext): void {\n    const { elapsedMillis, pianoState } = context;\n\n    // decay\n    const decayAmount = elapsedMillis * this.decayRate;\n    Utils.updateValues(this.values, (oldValue: number) =>\n      Math.max(0, oldValue - decayAmount)\n    );\n\n    // turn on newly-pressed keys\n    pianoState.changedKeys.forEach(n => {\n      if (pianoState.keys[n]) {\n        this.values[n] = 1;\n      }\n    });\n\n    // set colors\n    this.values.forEach((v, i) => this.leds.set(i, colorForValue(v)));\n  }\n}\n","import * as Colors from \"../../base/Colors\";\nimport * as Visualization from \"../../base/Visualization\";\n\nconst COLOR_PRESSED = Colors.WHITE;\nconst COLOR_RELEASED = Colors.BLACK;\n\nexport default class TestKeyVisualization extends Visualization.SingleRowVisualization {\n  constructor(config: Visualization.Config) {\n    super(config, 88);\n  }\n\n  public renderSingleRow(context: Visualization.FrameContext): void {\n    const { pianoState } = context;\n\n    pianoState.changedKeys.forEach(n => {\n      const isPressed = pianoState.keys[n];\n      this.leds.set(n, isPressed ? COLOR_PRESSED : COLOR_RELEASED);\n    });\n  }\n}\n","import { bracket01, valueOrDefault } from \"../../../util/Utils\";\nimport * as Colors from \"../../base/Colors\";\nimport FancyValue from \"../../base/FancyValue\";\nimport * as Visualization from \"../../base/Visualization\";\nimport BasicAudioHelper from \"../../visualizationUtils/BasicAudioHelper\";\nimport { Signals } from \"../../visualizationUtils/SignalsHelper\";\n\n// import WindowStats from \"../../util/WindowStats\";\n// import TimeSeriesBandHelper from \"./util/TimeSeriesBandHelper\";\n\nclass LevelsHelper {\n  private readonly v: FancyValue = new FancyValue();\n  private readonly halfLife: number;\n  private readonly minThreshold: number;\n  private readonly maxThreshold: number;\n\n  constructor(attrs: {\n    halfLife: number;\n    minThreshold?: number;\n    maxThreshold?: number;\n  }) {\n    this.halfLife = attrs.halfLife;\n    this.minThreshold = valueOrDefault(attrs.minThreshold, 0);\n    this.maxThreshold = valueOrDefault(attrs.maxThreshold, 1);\n  }\n\n  public processValue(newValue: number, elapsedMillis: number) {\n    const value = bracket01(\n      (newValue - this.minThreshold) / (this.maxThreshold - this.minThreshold)\n    );\n    this.v.decayExponential(this.halfLife, elapsedMillis / 1000);\n    this.v.bumpTo(value);\n  }\n\n  public get value() {\n    return this.v.value;\n  }\n}\n\nclass MultiLevelHelper {\n  private readonly audioHelper: BasicAudioHelper;\n  private readonly lowHelper: LevelsHelper;\n  private readonly highHelper: LevelsHelper;\n\n  constructor(audioSource: AudioNode) {\n    this.audioHelper = new BasicAudioHelper(audioSource);\n\n    this.lowHelper = new LevelsHelper({\n      halfLife: 0.125,\n      minThreshold: 0.225,\n      maxThreshold: 0.6\n    });\n\n    this.highHelper = new LevelsHelper({\n      halfLife: 0.075,\n      minThreshold: 0.1,\n      maxThreshold: 0.75\n    });\n  }\n\n  public sample(elapsedMillis: number) {\n    const audioValues = this.audioHelper.getValues();\n    this.lowHelper.processValue(audioValues.lowRMS, elapsedMillis);\n    this.highHelper.processValue(audioValues.highRMS, elapsedMillis);\n  }\n\n  public get lowLevel() {\n    return this.lowHelper.value;\n  }\n\n  public get highLevel() {\n    return this.highHelper.value;\n  }\n}\n\nexport default class TestBandsVisualization extends Visualization.RowColumnMappedVisualization {\n  // private readonly valueTS: Visualization.TimeSeriesValue;\n\n  private readonly lowTS: Visualization.TimeSeriesValue;\n  private readonly highTS: Visualization.TimeSeriesValue;\n  private readonly low2TS: Visualization.TimeSeriesValue;\n  private readonly high2TS: Visualization.TimeSeriesValue;\n  private readonly helper?: MultiLevelHelper;\n  private readonly signals: Signals;\n  // private readonly lowBand: TimeSeriesBandHelper;\n\n  constructor(config: Visualization.Config) {\n    super(config);\n\n    // this.valueTS = config.createTimeSeries();\n    this.lowTS = config.createTimeSeries({ color: Colors.BLUE });\n    this.highTS = config.createTimeSeries({ color: Colors.RED });\n\n    this.low2TS = config.createTimeSeries({ color: Colors.GREEN });\n    this.high2TS = config.createTimeSeries({ color: Colors.PURPLE });\n\n    this.signals = config.signals;\n\n    this.helper = config.audioSource\n      ? new MultiLevelHelper(config.audioSource)\n      : undefined;\n  }\n\n  public renderRows(context: Visualization.FrameContext): void {\n    if (this.helper === undefined) {\n      return;\n    }\n\n    this.helper.sample(context.elapsedMillis);\n\n    this.lowTS.value = this.helper.lowLevel;\n    this.highTS.value = this.helper.highLevel;\n\n    this.low2TS.value = this.signals.lowLevel;\n    this.high2TS.value = this.signals.highLevel;\n\n    this.ledRows.get(0).fill(Colors.hsv(0, 0.5, this.highTS.value));\n    this.ledRows\n      .get(this.ledRows.length - 1)\n      .fill(Colors.hsv(240, 0.5, this.lowTS.value));\n  }\n}\n","import _ from \"lodash\";\nimport { getExtents2, mapToXYOnly } from \"src/util/VectorUtils\";\n\nimport Scene from \"../../scenes/Scene\";\nimport * as Colors from \"../base/Colors\";\nimport * as Visualization from \"../base/Visualization\";\n\nfunction createCanvas(width: number, height: number): HTMLCanvasElement {\n  const canvas = document.createElement(\"canvas\");\n  canvas.style.backgroundColor = \"black\";\n  canvas.width = width;\n  canvas.height = height;\n  return canvas;\n}\n\nconst initializeFor = _.memoize((scene: Scene) => {\n  const allLeds = scene.ledMetadatas;\n  const leds2d = mapToXYOnly(allLeds.map(led => led.position));\n  const extents = getExtents2(leds2d);\n  const physicalWidth = extents.maxX - extents.minX;\n  const physicalHeight = extents.maxY - extents.minY;\n  const maxDimension = scene.voronoiMaxDimension;\n  let canvasWidth: number;\n  let canvasHeight: number;\n  if (physicalWidth > physicalHeight) {\n    canvasWidth = maxDimension;\n    canvasHeight = Math.ceil((maxDimension / physicalWidth) * physicalHeight);\n  } else {\n    canvasHeight = maxDimension;\n    canvasWidth = Math.ceil((maxDimension / physicalHeight) * physicalWidth);\n  }\n\n  return {\n    scene,\n    canvasWidth,\n    canvasHeight,\n    ledDataOffsets: leds2d.map(wp => {\n      const x = Math.round(\n        (1 - (wp.x - extents.minX) / physicalWidth) * (canvasWidth - 1)\n      );\n      const y = Math.round(\n        (1 - (wp.y - extents.minY) / physicalHeight) * (canvasHeight - 1)\n      );\n      return (y * canvasWidth + x) * 4;\n    })\n  };\n});\n\nexport default abstract class MappedCanvasVisualization extends Visualization.default {\n  protected readonly canvas: HTMLCanvasElement;\n  protected readonly canvasContext: CanvasRenderingContext2D;\n\n  // ordered in terms of LED indexes; values represent offsets into canvas\n  // data array of R value (followed by G then B then unused A)\n  private readonly ledDataOffsets: readonly number[];\n\n  constructor(config: Visualization.Config) {\n    super(config);\n\n    const { canvasWidth, canvasHeight, ledDataOffsets } = initializeFor(\n      config.scene\n    );\n\n    this.canvas = createCanvas(canvasWidth, canvasHeight);\n    const ctx = this.canvas.getContext(\"2d\");\n    if (!ctx) {\n      throw new Error(\"can't use canvas\");\n    }\n    this.canvasContext = ctx;\n    config.setExtraDisplay(this.canvas);\n\n    this.ledDataOffsets = ledDataOffsets;\n  }\n\n  public render(context: Visualization.FrameContext): void {\n    this.renderToCanvas(context);\n\n    const data = this.canvasContext.getImageData(\n      0,\n      0,\n      this.canvas.width,\n      this.canvas.height\n    ).data;\n\n    this.ledDataOffsets.forEach((dataOffset, ledIndex) =>\n      this.ledColors.set(\n        ledIndex,\n        Colors.rgbUnchecked(\n          data[dataOffset],\n          data[dataOffset + 1],\n          data[dataOffset + 2]\n        )\n      )\n    );\n  }\n\n  protected abstract renderToCanvas(context: Visualization.FrameContext): void;\n}\n","// import * as Colors from \"../base/Colors\";\nimport MappedCanvasVisualization from \"src/portable/visualizationUtils/MappedCanvasVisualization\";\n\nimport * as Visualization from \"../../base/Visualization\";\n\nconst SQUARES_SIZE = 8;\nconst VELOCITY_X = 1;\nconst VELOCITY_Y = -20;\n\nexport default class MyVisualization extends MappedCanvasVisualization {\n  private offsetX = 0;\n  private offsetY = 0;\n\n  protected renderToCanvas(context: Visualization.FrameContext) {\n    const { canvas, canvasContext: ctx } = this;\n\n    ctx.fillStyle = \"black\";\n    ctx.globalCompositeOperation = \"source-over\";\n    ctx.globalAlpha = 1;\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    ctx.fillStyle = \"white\";\n\n    let polarity = 0;\n    for (\n      let y = this.offsetY - SQUARES_SIZE * 2;\n      y < canvas.height + SQUARES_SIZE;\n      y += SQUARES_SIZE\n    ) {\n      polarity = 1 - polarity;\n      for (\n        let x = this.offsetX - (1 + polarity) * SQUARES_SIZE;\n        x < canvas.width + SQUARES_SIZE;\n        x += SQUARES_SIZE * 2\n      ) {\n        ctx.fillRect(x, y, SQUARES_SIZE, SQUARES_SIZE);\n      }\n    }\n\n    this.offsetX =\n      (this.offsetX + SQUARES_SIZE + VELOCITY_X * context.elapsedSeconds) %\n      (SQUARES_SIZE * 2);\n    this.offsetY =\n      (this.offsetY + SQUARES_SIZE + VELOCITY_Y * context.elapsedSeconds) %\n      (SQUARES_SIZE * 2);\n  }\n}\n","export default __webpack_public_path__ + \"static/media/lines.3b32a424.mp4\";","// import * as Colors from \"../base/Colors\";\nimport MappedCanvasVisualization from \"src/portable/visualizationUtils/MappedCanvasVisualization\";\n\nimport * as Visualization from \"../../base/Visualization\";\nimport VideoFile from \"./lines.mp4\";\n\nexport default class MyVisualization extends MappedCanvasVisualization {\n  private video = (() => {\n    const video = document.createElement(\"video\");\n    video.src = VideoFile;\n    video.autoplay = true;\n    video.loop = true;\n    video.style.display = \"none\";\n    video.width = 10;\n    video.height = 10;\n    this.canvas.appendChild(video);\n    return video;\n  })();\n\n  protected renderToCanvas(context: Visualization.FrameContext) {\n    const { canvas, canvasContext: ctx, video } = this;\n\n    // ctx.globalCompositeOperation = \"saturation\";\n    // ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n  }\n}\n","import { MovingAverageHelper } from \"src/util/Utils\";\n\nimport * as Colors from \"../../base/Colors\";\nimport * as Visualization from \"../../base/Visualization\";\n\nconst CANVAS_SCALE = 0.15;\n\nclass FloatDataCanvasHelper {\n  public readonly canvas: HTMLCanvasElement;\n\n  private readonly data: Float32Array;\n  private readonly canvasContext: CanvasRenderingContext2D;\n\n  constructor(data: Float32Array) {\n    this.data = data;\n\n    this.canvas = document.createElement(\"canvas\");\n    const ctx = this.canvas.getContext(\"2d\");\n    if (ctx === null) {\n      throw new Error(\"can't get canvas context\");\n    }\n    this.canvasContext = ctx;\n    this.canvas.width = data.length * CANVAS_SCALE;\n    this.canvas.height = 255 * CANVAS_SCALE;\n    this.canvas.style.backgroundColor = \"black\";\n    ctx.scale(CANVAS_SCALE, CANVAS_SCALE);\n  }\n\n  public render(overrideData?: Float32Array) {\n    const data = overrideData || this.data;\n    if (data.length !== this.data.length) {\n      throw new Error(\"overrideData has a different length\");\n    }\n\n    const canvas = this.canvas;\n    const ctx = this.canvasContext;\n\n    // clear\n    ctx.fillStyle = \"black\";\n    ctx.fillRect(\n      0,\n      0,\n      canvas.width / CANVAS_SCALE,\n      canvas.height / CANVAS_SCALE\n    );\n\n    // render values\n    ctx.strokeStyle = \"white\";\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n    ctx.moveTo(-1, 127);\n    data.forEach((y, x) => {\n      ctx.lineTo(x, y * 127 + 127);\n    });\n    ctx.stroke();\n  }\n}\n\nconst NUM_SAMPLES = 2048;\n\nexport function findMaxValue(arr: Float32Array) {\n  return arr.reduce((acc, v) => (v > acc ? v : acc), Number.MIN_VALUE);\n}\n\nfunction findMeanPositiveValue(arr: Float32Array) {\n  let sum = 0;\n  let n = 0;\n  arr.forEach(v => {\n    if (v > 0) {\n      sum += v;\n      n++;\n    }\n  });\n\n  return n === 0 ? 0 : sum / n;\n}\n\nfunction meanDistanceBetweenPeaks(arr: Float32Array, threshold: number) {\n  let hasCrossedZeroSincePeak = true;\n  const peakIndices: number[] = [];\n\n  let currentPeakWeightedSum = 0;\n  let currentPeakTotalWeight = 0;\n\n  arr.forEach((v, i) => {\n    if (hasCrossedZeroSincePeak) {\n      if (v >= threshold) {\n        const weight = Math.pow(v, 4);\n        currentPeakWeightedSum += i * weight;\n        currentPeakTotalWeight += weight;\n        hasCrossedZeroSincePeak = false;\n      }\n    } else {\n      if (v < 0) {\n        if (currentPeakTotalWeight > 0) {\n          const peakIndex = currentPeakWeightedSum / currentPeakTotalWeight;\n          peakIndices.push(peakIndex);\n          currentPeakWeightedSum = 0;\n          currentPeakTotalWeight = 0;\n        }\n        hasCrossedZeroSincePeak = true;\n      }\n    }\n  });\n\n  if (peakIndices.length < 2) {\n    return undefined;\n  } else {\n    let sum = 0;\n    const n = peakIndices.length - 1;\n    for (let i = 0; i < n; ++i) {\n      sum += peakIndices[i + 1] - peakIndices[i];\n    }\n    return sum / n;\n  }\n}\n\nconst noteHues = [\n  0, // c\n  210, // c#\n  60, // d\n  270, // d#\n  120, // e\n  330, // f\n  180, // f#\n  30, // g\n  240, // g#\n  90, // a\n  300, // a#\n  150 // b\n];\n\nconst noteColors = noteHues.map(h => Colors.hsv(h, 1, 1));\n\nexport default class TestPitchVisualization extends Visualization.default {\n  private readonly canvasHelper: FloatDataCanvasHelper;\n  private readonly rawFreqTimeSeries: Visualization.TimeSeriesValue;\n  private readonly freqTimeSeries: Visualization.TimeSeriesValue;\n  private readonly amplitudeTimeSeries: Visualization.TimeSeriesValue;\n  private readonly analyser?: AnalyserNode;\n  private readonly currentSamples: Float32Array;\n  private readonly sampleRate: number = 0;\n  private readonly maHelper = new MovingAverageHelper(5);\n\n  constructor(config: Visualization.Config) {\n    super(config);\n\n    const audioSource = config.audioSource;\n    this.currentSamples = new Float32Array(NUM_SAMPLES);\n    if (audioSource !== undefined) {\n      this.analyser = audioSource.context.createAnalyser();\n      // this.analyser.smoothingTimeConstant = 1;\n      audioSource.connect(this.analyser);\n      this.sampleRate = audioSource.context.sampleRate;\n    }\n\n    this.canvasHelper = new FloatDataCanvasHelper(this.currentSamples);\n    config.setExtraDisplay(this.canvasHelper.canvas);\n\n    this.freqTimeSeries = config.createTimeSeries({ color: Colors.BLUE });\n    this.rawFreqTimeSeries = config.createTimeSeries({\n      color: Colors.YELLOW\n    });\n    this.amplitudeTimeSeries = config.createTimeSeries({ color: Colors.RED });\n  }\n\n  public render(context: Visualization.FrameContext): void {\n    let color = Colors.BLACK;\n\n    // render\n    if (this.analyser !== undefined) {\n      this.analyser.getFloatTimeDomainData(this.currentSamples);\n      // this.analyser.maxDecibels;\n\n      // const maxValue = findMaxValue(this.currentSamples);\n      const meanValue = findMeanPositiveValue(this.currentSamples);\n      const thresholdValue = meanValue * 0.2;\n\n      this.amplitudeTimeSeries.value = Math.sqrt(thresholdValue);\n      if (thresholdValue < 0.001) {\n        this.freqTimeSeries.value = 0;\n        this.maHelper.reset();\n      } else {\n        const distanceBetweenPeaks =\n          meanDistanceBetweenPeaks(this.currentSamples, thresholdValue) ?? 0;\n        const sampledFreq =\n          distanceBetweenPeaks === 0\n            ? undefined\n            : this.sampleRate / distanceBetweenPeaks;\n\n        this.rawFreqTimeSeries.value = Math.min(1, (sampledFreq ?? 0) / 800);\n\n        if (sampledFreq === undefined) {\n          this.maHelper.reset();\n        } else {\n          this.maHelper.addValue(sampledFreq);\n          const freq = this.maHelper.movingAverage;\n\n          this.freqTimeSeries.value = Math.min(1, freq / 800);\n\n          const note = Math.round(12 * Math.log2(freq / 440) + 69);\n\n          // 0=c, 1=c#, ..., 11=b\n          const noteWithinOctave = (note + 144) % 12;\n\n          color = noteColors[noteWithinOctave];\n        }\n      }\n\n      // this.analyserHelpers.direct.currentRMSAmplitude;\n    }\n    this.canvasHelper.render(this.currentSamples);\n\n    // this.freqTimeSeries.value = this.analyserHelpers.direct.currentMaxAmplitude;\n\n    this.ledColors.fill(color);\n  }\n}\n","import { valueOrDefault } from \"../../../util/Utils\";\nimport * as Colors from \"../../base/Colors\";\nimport * as Visualization from \"../../base/Visualization\";\nimport { Signals } from \"../../visualizationUtils/SignalsHelper\";\n\ntype KeysOfType<T, TProp> = {\n  [P in keyof T]: T[P] extends TProp ? P : never;\n}[keyof T];\n\nexport default class MyVisualization extends Visualization.default {\n  private readonly signals: Signals;\n\n  private readonly updateFuncs: Array<() => void>;\n\n  constructor(config: Visualization.Config) {\n    super(config);\n\n    this.updateFuncs = [];\n    this.signals = config.signals;\n\n    this.attachBooleanTimeSeries({\n      color: Colors.RED,\n      signalName: \"isNewBeat\",\n      yValue: 0\n    });\n\n    this.attachBooleanTimeSeries({\n      color: Colors.PURPLE,\n      signalName: \"soundsLikeNewBeat\",\n      yValue: 0.1\n    });\n\n    this.attachBooleanTimeSeries({\n      color: Colors.YELLOW,\n      signalName: \"soundsLikeStrongBeat\",\n      yValue: 0.2\n    });\n\n    this.attachNumberTimeSeries({\n      color: Colors.RED,\n      signalName: \"highLevel\",\n      scaledMinY: 0.5,\n      scaledMaxY: 1\n    });\n\n    this.attachNumberTimeSeries({\n      color: Colors.BLUE,\n      signalName: \"lowLevel\",\n      scaledMinY: 0.5,\n      scaledMaxY: 1\n    });\n  }\n\n  public render(context: Visualization.FrameContext): void {\n    this.updateFuncs.forEach(f => f());\n  }\n\n  private attachTimeSeries<S extends keyof Signals>(attrs: {\n    color: Colors.Color;\n    signalName: S;\n    mapToNormalizedValue: (value: Signals[S]) => number;\n  }) {\n    const ts = this.config.createTimeSeries({\n      color: attrs.color\n    });\n\n    this.updateFuncs.push(() => {\n      const value = this.signals[attrs.signalName];\n      ts.value = attrs.mapToNormalizedValue(value);\n    });\n  }\n\n  private attachBooleanTimeSeries<\n    S extends KeysOfType<Signals, boolean>\n  >(attrs: { color: Colors.Color; signalName: S; yValue: number }) {\n    this.attachTimeSeries({\n      color: attrs.color,\n      signalName: attrs.signalName,\n      mapToNormalizedValue: (v: boolean) => (v ? attrs.yValue : NaN)\n    });\n  }\n\n  private attachNumberTimeSeries<S extends KeysOfType<Signals, number>>(attrs: {\n    color: Colors.Color;\n    signalName: S;\n    scaledMinY?: number;\n    scaledMaxY?: number;\n  }) {\n    const scaledMinY = valueOrDefault(attrs.scaledMinY, 0);\n    const scaledMaxY = valueOrDefault(attrs.scaledMaxY, 1);\n\n    this.attachTimeSeries({\n      color: attrs.color,\n      signalName: attrs.signalName,\n      mapToNormalizedValue: (v: number) => {\n        if (v < 0 || v > 1) {\n          return NaN;\n        } else {\n          return scaledMinY + v * (scaledMaxY - scaledMinY);\n        }\n      }\n    });\n  }\n}\n","import * as Colors from \"../../base/Colors\";\nimport * as Visualization from \"../../base/Visualization\";\n\nconst CHANNEL_START_COLOR = Colors.WHITE;\nconst NORMAL_BRIGHTNESS = 0.5;\nconst PULSE_BRIGHTNESS = 1.0;\n\nconst LED_ZERO_BLINK_TIME = 1000;\n\nconst PULSE_SEPARATION_LEDS = 8;\nconst PULSE_SPEED_LEDS_PER_SECOND = 16;\n\nconst SHOW_CHANNEL_NUMBER_AFTER_N_LEDS = 2;\n\nexport default class TestStripAddressVisualization extends Visualization.default {\n  private timeCounter: number = 0;\n  private pulseLocationFloat: number = 0;\n  private readonly channelHueIncrement: number;\n\n  constructor(config: Visualization.Config) {\n    super(config);\n\n    let maxChannel = 0;\n    config.scene.ledMetadatas.forEach(led => {\n      if (led.hardwareChannel > maxChannel) {\n        maxChannel = led.hardwareChannel;\n      }\n    });\n\n    const numChannels = maxChannel + 1;\n\n    this.channelHueIncrement = 360 / numChannels;\n  }\n\n  public render(context: Visualization.FrameContext): void {\n    const { elapsedMillis } = context;\n\n    this.pulseLocationFloat =\n      (this.pulseLocationFloat +\n        (PULSE_SPEED_LEDS_PER_SECOND * elapsedMillis) / 1000) %\n      PULSE_SEPARATION_LEDS;\n    const pulseLocation = Math.floor(this.pulseLocationFloat);\n\n    this.timeCounter = (this.timeCounter + elapsedMillis) % LED_ZERO_BLINK_TIME;\n    const flashBrightness =\n      2 * Math.abs(0.5 - this.timeCounter / LED_ZERO_BLINK_TIME);\n\n    for (let i = 0; i < this.ledColors.length; ++i) {\n      this.ledColors.set(\n        i,\n        this.colorForPixel(i, flashBrightness, pulseLocation)\n      );\n    }\n  }\n\n  private colorForPixel(\n    ledIndex: number,\n    flashBrightness: number,\n    pulseLocation: number\n  ): Colors.Color {\n    const ledMetadata = this.config.scene.ledMetadatas[ledIndex];\n    const n = ledMetadata.hardwareIndex;\n\n    if (\n      n >= SHOW_CHANNEL_NUMBER_AFTER_N_LEDS &&\n      n < ledMetadata.hardwareChannel + SHOW_CHANNEL_NUMBER_AFTER_N_LEDS\n    ) {\n      return Colors.multiply(CHANNEL_START_COLOR, flashBrightness);\n    } else {\n      const segmentNumber = ledMetadata.hardwareChannel;\n      const hue = (segmentNumber * this.channelHueIncrement) % 360;\n      let brightness;\n      if ((n - pulseLocation) % PULSE_SEPARATION_LEDS === 0) {\n        brightness = PULSE_BRIGHTNESS;\n      } else {\n        brightness = NORMAL_BRIGHTNESS;\n      }\n      return Colors.hsv(hue, 1, brightness);\n    }\n  }\n}\n","import * as Visualization from \"../../base/Visualization\";\n\nexport default class TestTimeseriesDataVisualization extends Visualization.default {\n  private phase = 0;\n\n  private readonly aTimeSeries: Visualization.TimeSeriesValue;\n  private readonly bTimeSeries: Visualization.TimeSeriesValue;\n  private readonly cTimeSeries: Visualization.TimeSeriesValue;\n\n  constructor(config: Visualization.Config) {\n    super(config);\n    this.aTimeSeries = config.createTimeSeries();\n    this.bTimeSeries = config.createTimeSeries();\n    this.cTimeSeries = config.createTimeSeries();\n  }\n\n  public render(context: Visualization.FrameContext): void {\n    const { elapsedMillis } = context;\n\n    this.phase = (this.phase + elapsedMillis / 1000) % (Math.PI * 2);\n\n    this.aTimeSeries.value = (Math.sin(this.phase) + 1) / 2;\n    this.bTimeSeries.value = (Math.cos(this.phase * 5) + 1) / 2;\n    this.cTimeSeries.value =\n      (this.phase * 10) % (Math.PI * 2) < Math.PI ? 0.5 : NaN;\n  }\n}\n","import * as Visualization from \"../../base/Visualization\";\n\nexport default class TestVisualizerExtraDisplayVisualization extends Visualization.default {\n  private element: HTMLDivElement;\n  private totalMillis = 0;\n\n  constructor(config: Visualization.Config) {\n    super(config);\n    this.element = document.createElement(\"div\");\n    this.element.style.fontFamily = \"monospace\";\n    this.element.style.padding = \"0.25em\";\n    this.element.innerText = \"(new)\";\n    config.setExtraDisplay(this.element);\n  }\n\n  public render(context: Visualization.FrameContext): void {\n    const { elapsedMillis } = context;\n\n    this.totalMillis += elapsedMillis;\n    this.element.innerText = `total millis: ${Math.floor(this.totalMillis)}`;\n  }\n}\n","import { fillArray } from \"src/util/Utils\";\n\nimport * as Colors from \"../../base/Colors\";\nimport { Color } from \"../../base/Colors\";\nimport * as Visualization from \"../../base/Visualization\";\n\nconst COUNT_LED_OFFSET = 8;\n\nexport default class TestWingTrianglesVisualization extends Visualization.default {\n  private readonly ledConfigs: ReadonlyArray<{\n    baseColor: Color;\n  }>;\n\n  constructor(config: Visualization.Config) {\n    super(config);\n\n    let maxTriangleIdx = 0;\n    let maxIndexForChannel: { [channel: number]: number } = {};\n\n    // let maxChannel = 0;\n    const leds = config.scene.ledMetadatas;\n\n    const myData = leds.map(led => {\n      const hci = led.hardwareChannel - 1;\n      const rib = Math.floor((hci % 8) / 2);\n      const triangle = Math.floor(hci / 8) * 2 + (hci % 2);\n      if (triangle > maxTriangleIdx) {\n        maxTriangleIdx = triangle;\n      }\n\n      if (led.hardwareIndex > (maxIndexForChannel[led.hardwareChannel] ?? -1)) {\n        maxIndexForChannel[led.hardwareChannel] = led.hardwareIndex;\n      }\n\n      return { rib, triangle };\n    });\n\n    const triangleHues: number[] = [];\n    const triangleHueStep = 360 / (maxTriangleIdx + 1);\n    for (let i = 0; i <= maxTriangleIdx; ++i) {\n      triangleHues.push(triangleHueStep * i);\n    }\n\n    this.ledConfigs = fillArray(leds.length, i => {\n      const myLedData = myData[i];\n      const { hardwareIndex, hardwareChannel } = leds[i];\n      const isCountLed =\n        hardwareIndex >= COUNT_LED_OFFSET &&\n        hardwareIndex <= myLedData.rib + COUNT_LED_OFFSET;\n\n      if (isCountLed) {\n        return Colors.WHITE;\n      }\n\n      const isFirstOrLastLed =\n        hardwareIndex === 0 ||\n        hardwareIndex === maxIndexForChannel[hardwareChannel];\n\n      return Colors.hsv(\n        triangleHues[myLedData.triangle],\n        1,\n        isFirstOrLastLed ? 1 : 0.1\n      );\n    }).map(c => ({ baseColor: c }));\n  }\n\n  public render(_: Visualization.FrameContext): void {\n    for (let i = 0; i < this.ledColors.length; ++i) {\n      const ledConfig = this.ledConfigs[i];\n      this.ledColors.set(i, ledConfig.baseColor);\n    }\n  }\n}\n","/*********************************************************\n *                                                       *\n *     DO NOT EDIT THIS FILE!  It is auto-generated.     * \n *  You probably want to run `npm run codegen` instead.  *\n *                                                       *\n *********************************************************/\n\nimport { VisualizationRegistryBuilder } from \"../portable/VisualizationRegistry\";\n\nimport BeatRainVisualization from \"../portable/visualizations/burrow/BeatRainVisualization\";\nimport ExpandingDashesVisualization from \"../portable/visualizations/burrow/ExpandingDashesVisualization\";\nimport FourierTwinkleVisualization from \"../portable/visualizations/burrow/FourierTwinkleVisualization\";\nimport CenterSpreadVisualization from \"../portable/visualizations/burrow/midi/CenterSpreadVisualization\";\nimport GlowWaveVisualization from \"../portable/visualizations/burrow/midi/GlowWaveVisualization\";\nimport PulsingRainVisualization from \"../portable/visualizations/burrow/PulsingRainVisualization\";\nimport SparklesAndFlashesVisualization from \"../portable/visualizations/burrow/SparklesAndFlashesVisualization\";\nimport SplotchesVisualization from \"../portable/visualizations/burrow/SplotchesVisualization\";\nimport SpreadShootersAudioVisualization from \"../portable/visualizations/burrow/SpreadShootersAudioVisualization\";\nimport PatternClockVisualization from \"../portable/visualizations/patterns/PatternClockVisualization\";\nimport PatternDotVisualization from \"../portable/visualizations/patterns/PatternDotVisualization\";\nimport PatternFlagVisualization from \"../portable/visualizations/patterns/PatternFlagVisualization\";\nimport PatternMarquee2Visualization from \"../portable/visualizations/patterns/PatternMarquee2Visualization\";\nimport PatternMarqueeVisualization from \"../portable/visualizations/patterns/PatternMarqueeVisualization\";\nimport PatternOwlEyesVisualization from \"../portable/visualizations/patterns/PatternOwlEyesVisualization\";\nimport PatternParticleFireVisualization from \"../portable/visualizations/patterns/PatternParticleFireVisualization\";\nimport PatternRain2Visualization from \"../portable/visualizations/patterns/PatternRain2Visualization\";\nimport PatternRainbowVisualization from \"../portable/visualizations/patterns/PatternRainbowVisualization\";\nimport PatternSparklesVisualization from \"../portable/visualizations/patterns/PatternSparklesVisualization\";\nimport PatternWingFlapVisualization from \"../portable/visualizations/patterns/PatternWingFlapVisualization\";\nimport PatternZapsVisualization from \"../portable/visualizations/patterns/PatternZapsVisualization\";\nimport PatternZoomVisualization from \"../portable/visualizations/patterns/PatternZoomVisualization\";\nimport BurrowPlaylistVisualization from \"../portable/visualizations/playlists/BurrowPlaylistVisualization\";\nimport TestPlaylistVisualization from \"../portable/visualizations/playlists/TestPlaylistVisualization\";\nimport ScopeFFTVisualization from \"../portable/visualizations/tests/ScopeFFTVisualization\";\nimport ScopeWaveformVisualization from \"../portable/visualizations/tests/ScopeWaveformVisualization\";\nimport TestAbletonLink from \"../portable/visualizations/tests/TestAbletonLink\";\nimport TestAudioAndAbletonLink from \"../portable/visualizations/tests/TestAudioAndAbletonLink\";\nimport TestAudioPulseVisualization from \"../portable/visualizations/tests/TestAudioPulseVisualization\";\nimport TestAudioWaveformVisualization from \"../portable/visualizations/tests/TestAudioWaveformVisualization\";\nimport TestControllerDialVisualization from \"../portable/visualizations/tests/TestControllerDialVisualization\";\nimport TestKeyFadeVisualization from \"../portable/visualizations/tests/TestKeyFadeVisualization\";\nimport TestKeyVisualization from \"../portable/visualizations/tests/TestKeyVisualization\";\nimport TestLevelsVisualization from \"../portable/visualizations/tests/TestLevelsVisualization\";\nimport TestMappedCanvasVisualization from \"../portable/visualizations/tests/TestMappedCanvasVisualization\";\nimport TestMappedVideoVisualization from \"../portable/visualizations/tests/TestMappedVideoVisualization\";\nimport TestPitchVisualization from \"../portable/visualizations/tests/TestPitchVisualization\";\nimport TestSignalsVisualization from \"../portable/visualizations/tests/TestSignalsVisualization\";\nimport TestStripAddressVisualization from \"../portable/visualizations/tests/TestStripAddressVisualization\";\nimport TestTimeseriesDataVisualization from \"../portable/visualizations/tests/TestTimeseriesDataVisualization\";\nimport TestVisualizerExtraDisplayVisualization from \"../portable/visualizations/tests/TestVisualizerExtraDisplayVisualization\";\nimport TestWingTrianglesVisualization from \"../portable/visualizations/tests/TestWingTrianglesVisualization\";\n\nconst registryBuilder = new VisualizationRegistryBuilder();\n\nregistryBuilder.add(\"burrow\", \"BeatRain\", BeatRainVisualization);\nregistryBuilder.add(\"burrow\", \"ExpandingDashes\", ExpandingDashesVisualization);\nregistryBuilder.add(\"burrow\", \"FourierTwinkle\", FourierTwinkleVisualization);\nregistryBuilder.add(\"burrow\", \"PulsingRain\", PulsingRainVisualization);\nregistryBuilder.add(\"burrow\", \"SparklesAndFlashes\", SparklesAndFlashesVisualization);\nregistryBuilder.add(\"burrow\", \"Splotches\", SplotchesVisualization);\nregistryBuilder.add(\"burrow\", \"SpreadShootersAudio\", SpreadShootersAudioVisualization);\nregistryBuilder.add(\"burrow/midi\", \"CenterSpread\", CenterSpreadVisualization);\nregistryBuilder.add(\"burrow/midi\", \"GlowWave\", GlowWaveVisualization);\nregistryBuilder.add(\"patterns\", \"PatternClock\", PatternClockVisualization);\nregistryBuilder.add(\"patterns\", \"PatternDot\", PatternDotVisualization);\nregistryBuilder.add(\"patterns\", \"PatternFlag\", PatternFlagVisualization);\nregistryBuilder.add(\"patterns\", \"PatternMarquee\", PatternMarqueeVisualization);\nregistryBuilder.add(\"patterns\", \"PatternMarquee2\", PatternMarquee2Visualization);\nregistryBuilder.add(\"patterns\", \"PatternOwlEyes\", PatternOwlEyesVisualization);\nregistryBuilder.add(\"patterns\", \"PatternParticleFire\", PatternParticleFireVisualization);\nregistryBuilder.add(\"patterns\", \"PatternRain2\", PatternRain2Visualization);\nregistryBuilder.add(\"patterns\", \"PatternRainbow\", PatternRainbowVisualization);\nregistryBuilder.add(\"patterns\", \"PatternSparkles\", PatternSparklesVisualization);\nregistryBuilder.add(\"patterns\", \"PatternWingFlap\", PatternWingFlapVisualization);\nregistryBuilder.add(\"patterns\", \"PatternZaps\", PatternZapsVisualization);\nregistryBuilder.add(\"patterns\", \"PatternZoom\", PatternZoomVisualization);\nregistryBuilder.add(\"playlists\", \"BurrowPlaylist\", BurrowPlaylistVisualization);\nregistryBuilder.add(\"playlists\", \"TestPlaylist\", TestPlaylistVisualization);\nregistryBuilder.add(\"tests\", \"ScopeFFT\", ScopeFFTVisualization);\nregistryBuilder.add(\"tests\", \"ScopeWaveform\", ScopeWaveformVisualization);\nregistryBuilder.add(\"tests\", \"TestAbletonLink\", TestAbletonLink);\nregistryBuilder.add(\"tests\", \"TestAudioAndAbletonLink\", TestAudioAndAbletonLink);\nregistryBuilder.add(\"tests\", \"TestAudioPulse\", TestAudioPulseVisualization);\nregistryBuilder.add(\"tests\", \"TestAudioWaveform\", TestAudioWaveformVisualization);\nregistryBuilder.add(\"tests\", \"TestControllerDial\", TestControllerDialVisualization);\nregistryBuilder.add(\"tests\", \"TestKey\", TestKeyVisualization);\nregistryBuilder.add(\"tests\", \"TestKeyFade\", TestKeyFadeVisualization);\nregistryBuilder.add(\"tests\", \"TestLevels\", TestLevelsVisualization);\nregistryBuilder.add(\"tests\", \"TestMappedCanvas\", TestMappedCanvasVisualization);\nregistryBuilder.add(\"tests\", \"TestMappedVideo\", TestMappedVideoVisualization);\nregistryBuilder.add(\"tests\", \"TestPitch\", TestPitchVisualization);\nregistryBuilder.add(\"tests\", \"TestSignals\", TestSignalsVisualization);\nregistryBuilder.add(\"tests\", \"TestStripAddress\", TestStripAddressVisualization);\nregistryBuilder.add(\"tests\", \"TestTimeseriesData\", TestTimeseriesDataVisualization);\nregistryBuilder.add(\"tests\", \"TestVisualizerExtraDisplay\", TestVisualizerExtraDisplayVisualization);\nregistryBuilder.add(\"tests\", \"TestWingTriangles\", TestWingTrianglesVisualization);\n\nexport const registry = registryBuilder.build();\n","import { removeFirst } from \"../util/Utils\";\n\nexport interface InputDeviceInfo {\n  id: string;\n  name: string;\n}\n\nexport type EventType = \"deviceListChanged\";\n\nexport default class AudioIn {\n  private inputDevicesInternal: InputDeviceInfo[] = [];\n  private deviceListChangedListeners: Array<(this: this) => void> = [];\n  private currentDeviceId: string | null = null;\n  private currentAudioContext: AudioContext | null = null;\n  private currentAudioSource: AudioNode | null = null;\n  private readonly onAudioSourceChanged: (\n    audioSource: AudioNode | null\n  ) => void;\n\n  constructor(onAudioSourceChanged: (audioSource: AudioNode | null) => void) {\n    this.onAudioSourceChanged = onAudioSourceChanged;\n    this.doAsyncInit();\n  }\n\n  private async doAsyncInit() {\n    if (navigator.mediaDevices !== undefined) {\n      await navigator.mediaDevices.getUserMedia({ audio: true });\n      await navigator.mediaDevices.enumerateDevices().then(this.setDevices);\n    }\n  }\n\n  public get inputDevices() {\n    return this.inputDevicesInternal;\n  }\n\n  public inputDeviceById(id: string | null): InputDeviceInfo | null {\n    if (id === null) {\n      return null;\n    }\n\n    const i = this.inputDevicesInternal.findIndex(v => v.id === id);\n    return i === -1 ? null : this.inputDevicesInternal[i];\n  }\n\n  public isValidId = (id: string | null) => {\n    if (id === null) {\n      return true;\n    } else {\n      return this.inputDevices.find(d => d.id === id) !== undefined;\n    }\n  };\n\n  public get defaultDeviceId(): string | null {\n    const defaultDevice = this.inputDevicesInternal.find(\n      d => d.name === \"Soundflower (2ch)\"\n    );\n    if (defaultDevice === undefined) {\n      return null;\n    } else {\n      return defaultDevice.id;\n    }\n  }\n\n  public setCurrentDeviceId(deviceId: string | null) {\n    if (deviceId !== this.currentDeviceId) {\n      this.currentDeviceId = deviceId;\n      this.setCurrentAudioSource(null, null);\n      if (deviceId !== null) {\n        const audioConstraints = {\n          deviceId,\n          autoGainControl: false,\n          echoCancellation: false,\n          noiseSuppression: false,\n          sampleRate: 44100\n        };\n        navigator.mediaDevices\n          .getUserMedia({ audio: audioConstraints })\n          .then(stream => {\n            // make sure this is still the stream I was trying to load\n            if (deviceId === this.currentDeviceId) {\n              const audioContext = new AudioContext();\n              const audioSource = audioContext.createMediaStreamSource(stream);\n\n              const splitter = audioContext.createChannelSplitter();\n              audioSource.connect(splitter);\n\n              const gain = audioContext.createGain();\n              gain.channelCount = 1;\n              gain.gain.value = 4;\n              splitter.connect(gain, 0, 0);\n\n              this.setCurrentAudioSource(audioContext, gain);\n              // audioSource.connect(audioContext.destination);\n            }\n          });\n      }\n    }\n  }\n\n  private setCurrentAudioSource(\n    newAudioContext: AudioContext | null,\n    newAudioSource: AudioNode | null\n  ) {\n    if (newAudioContext !== this.currentAudioContext) {\n      if (this.currentAudioContext !== null) {\n        this.currentAudioContext.close();\n      }\n\n      this.currentAudioContext = newAudioContext;\n    }\n\n    if (newAudioSource !== this.currentAudioSource) {\n      if (this.currentAudioSource !== null) {\n        this.currentAudioSource.disconnect();\n      }\n\n      this.currentAudioSource = newAudioSource;\n      this.onAudioSourceChanged(newAudioSource);\n    }\n  }\n\n  private setDevices = async (devices: MediaDeviceInfo[]) => {\n    this.inputDevicesInternal = devices\n      .filter(d => d.kind === \"audioinput\")\n      .map(d => ({\n        id: d.deviceId,\n        name: d.label || d.deviceId\n      }));\n    this.deviceListChangedListeners.forEach(listener => listener.call(this));\n  };\n\n  public addEventListener(\n    eventType: EventType,\n    listener: (this: this) => void\n  ) {\n    if (!this.deviceListChangedListeners.includes(listener)) {\n      this.deviceListChangedListeners.push(listener);\n    }\n  }\n\n  public removeEventListener(\n    eventType: EventType,\n    listener: (this: this) => void\n  ) {\n    removeFirst(this.deviceListChangedListeners, listener);\n  }\n}\n","import BeatController from \"../portable/base/BeatController\";\n\nconst URL = \"ws://localhost:17001\";\nconst RECONNECT_TIME_MS = 3000;\n\nexport default class AbletonLinkConnect implements BeatController {\n  private static instance: Implementation;\n\n  constructor() {\n    if (AbletonLinkConnect.instance == null) {\n      AbletonLinkConnect.instance = new Implementation();\n    }\n  }\n\n  public hz() {\n    return AbletonLinkConnect.instance.getHz();\n  }\n\n  public beatNumber() {\n    return AbletonLinkConnect.instance.beatNumber();\n  }\n\n  public timeSinceLastBeat() {\n    return AbletonLinkConnect.instance.timeSinceLastBeat();\n  }\n\n  public progressToNextBeat() {\n    return AbletonLinkConnect.instance.progressToNextBeat();\n  }\n\n  public onTap() {\n    AbletonLinkConnect.instance.requestStatus();\n  }\n}\n\nclass Implementation {\n  private ws: WebSocket | null = null;\n  private reconnectTimeout: NodeJS.Timeout | null = null;\n  private hz: number = 120;\n  private aBeatTime: number = 0;\n  private lastBeatSync: number = 0;\n\n  constructor() {\n    this.tryConnectNow();\n    setInterval(() => {\n      this.protectedSend(\"status\");\n    }, 2000);\n  }\n\n  private tryConnectNow = () => {\n    if (this.reconnectTimeout !== null) {\n      clearTimeout(this.reconnectTimeout);\n      this.reconnectTimeout = null;\n    }\n\n    if (this.ws == null) {\n      this.ws = new WebSocket(URL);\n      this.ws.onopen = this.onWebSocketOpen;\n      this.ws.onclose = this.onWebSocketClose;\n      this.ws.onmessage = this.onLinkMessage;\n    }\n  };\n\n  private tryConnectSoon() {\n    if (this.reconnectTimeout === null) {\n      this.reconnectTimeout = setTimeout(this.tryConnectNow, RECONNECT_TIME_MS);\n    }\n  }\n\n  private onWebSocketOpen = () => {\n    console.log(\"ableton link websocket open\");\n    this.protectedSend(\"enable-start-stop-sync\");\n  };\n\n  private onWebSocketClose = (ev: CloseEvent) => {\n    console.log(\"ableton link websocket closed because \" + ev.code);\n    if (ev.target === this.ws) {\n      this.ws = null;\n      this.tryConnectSoon();\n    }\n  };\n\n  private protectedSend = (msg: string) => {\n    if (this.ws != null && this.ws.readyState === WebSocket.OPEN) {\n      this.ws.send(encodeString(msg));\n    }\n  };\n\n  private onLinkMessage = (ev: MessageEvent) => {\n    if (ev.target === this.ws) {\n      const blob = ev.data as Blob;\n      const reader = new FileReader();\n      reader.onload = () => {\n        const text = reader.result as string;\n        const lines = text.split(\"\\n\");\n        // looking for lines that look like this\n        // status { :peers 0 :bpm 120.000000 :start 73743731220 :beat 597.737570 }\n        for (const l of lines) {\n          const match = l.match(\n            /status { :peers ([0-9]+) :bpm ([0-9.]+) :start ([0-9.]+) :beat ([0-9.]+)/\n          );\n          if (match == null) {\n            continue;\n          }\n          this.lastBeatSync = this.beatNumber(); // record the current beat number\n          this.hz = parseFloat(match[2]) / 60;\n          let beat = parseFloat(match[4]);\n          beat -= Math.floor(beat);\n          this.aBeatTime = nowInSeconds() - beat / this.hz;\n        }\n      };\n      reader.readAsText(blob);\n    }\n  };\n\n  public getHz() {\n    return this.hz;\n  }\n\n  public timeSinceLastBeat() {\n    const lag = nowInSeconds() - this.aBeatTime;\n    const period = 1 / this.hz;\n    const beats = Math.floor(lag / period);\n    const offset = lag - beats * period;\n    return offset;\n  }\n\n  public progressToNextBeat() {\n    const lag = nowInSeconds() - this.aBeatTime;\n    const period = 1 / this.hz;\n    const beats = lag / period;\n    return beats - Math.floor(beats);\n  }\n\n  public beatNumber() {\n    const lag = nowInSeconds() - this.aBeatTime;\n    const period = 1 / this.hz;\n    const beats = Math.floor(lag / period);\n    return beats + this.lastBeatSync;\n  }\n\n  public requestStatus() {\n    this.protectedSend(\"status\");\n  }\n}\n\nfunction nowInSeconds() {\n  return Date.now() / 1000;\n}\n\nfunction encodeString(str: string) {\n  const enc = new TextEncoder();\n  return enc.encode(str);\n}\n","import BeatController from \"../portable/base/BeatController\";\n\nconst DEFAULT_BPM = 120;\n\n// used to figure out when two taps are close enough together\n// to define a rate, vs being unrelated\nconst MIN_BPM = 40;\n\nexport default class ManualBeatController implements BeatController {\n  private firstBeatStartTime: number = performance.now();\n  private beatLengthMillis: number = 60000 / DEFAULT_BPM;\n  private prevPressTime: number | null = null;\n  private tapsInSequence: number = 0;\n\n  public onTap() {\n    const now = performance.now();\n    if (\n      this.prevPressTime !== null &&\n      now - this.prevPressTime < 60000 / MIN_BPM\n    ) {\n      this.tapsInSequence += 1;\n      this.beatLengthMillis = now - this.prevPressTime;\n      this.firstBeatStartTime =\n        now - this.beatLengthMillis * (this.tapsInSequence - 1);\n    } else {\n      this.tapsInSequence = 1;\n      this.firstBeatStartTime = now;\n    }\n    this.prevPressTime = now;\n  }\n\n  public hz(): number {\n    return 1000 / this.beatLengthMillis;\n  }\n\n  public beatNumber(): number {\n    const now = performance.now();\n    return Math.floor((now - this.firstBeatStartTime) / this.beatLengthMillis);\n  }\n\n  public timeSinceLastBeat(): number {\n    const now = performance.now();\n    return ((now - this.firstBeatStartTime) % this.beatLengthMillis) / 1000;\n  }\n\n  public progressToNextBeat(): number {\n    return (this.timeSinceLastBeat() / this.beatLengthMillis) * 1000;\n  }\n}\n","import * as React from \"react\";\n\nimport styles from \"./BeatControlView.module.scss\";\nimport BeatController from \"./portable/base/BeatController\";\nimport * as Colors from \"./portable/base/Colors\";\n\ninterface Props {\n  beatController: BeatController;\n}\n\nexport default class BeatControlView extends React.Component<Props, {}> {\n  public componentWillUnmont() {\n    if (super.componentWillUnmount) {\n      super.componentWillUnmount();\n    }\n    this.isAlive = false;\n  }\n\n  public render() {\n    return <div className={styles.root}>{this.renderButton()}</div>;\n  }\n\n  private renderButton() {\n    return (\n      <div\n        className={styles.button}\n        onMouseDown={this.onMouseDown}\n        ref={this.setButtonRef}\n      >\n        <div ref={this.setLabelRef} />\n        <div ref={this.setLabel2Ref} />\n      </div>\n    );\n  }\n\n  private onMouseDown = () => {\n    if (this.props.beatController) {\n      this.props.beatController.onTap();\n    }\n    this.setState({\n      bpm: this.props.beatController.hz() * 60\n    });\n  };\n\n  private buttonRef: HTMLDivElement | null = null;\n  private setButtonRef = (newRef: HTMLDivElement | null) => {\n    const first = this.buttonRef === null && newRef !== null;\n    this.buttonRef = newRef;\n    if (first) {\n      this.animate();\n    }\n  };\n\n  private labelRef: HTMLDivElement | null = null;\n  private setLabelRef = (newRef: HTMLDivElement | null) => {\n    this.labelRef = newRef;\n  };\n\n  private label2Ref: HTMLDivElement | null = null;\n  private setLabel2Ref = (newRef: HTMLDivElement | null) => {\n    this.label2Ref = newRef;\n  };\n\n  private isAlive = true;\n  private animate = () => {\n    if (this.isAlive) {\n      requestAnimationFrame(this.animate);\n    }\n\n    if (this.buttonRef !== null) {\n      const beatPhase = this.props.beatController.progressToNextBeat();\n      this.buttonRef.style.backgroundColor = Colors.cssColor(\n        Colors.hsv(0, 1, 1 - beatPhase)\n      );\n    }\n\n    if (this.labelRef !== null) {\n      const bpm = this.props.beatController.hz() * 60;\n      this.labelRef.innerText = `${Math.round(bpm)}`;\n    }\n\n    if (this.label2Ref !== null) {\n      const beatNum = (this.props.beatController.beatNumber() % 4) + 1;\n      this.label2Ref.innerText = `${beatNum}`;\n    }\n  };\n}\n","import \"./ControlsView.scss\";\n\nimport * as React from \"react\";\n\nimport ControllerState from \"./portable/base/ControllerState\";\nimport { bracket01 } from \"./util/Utils\";\n\ninterface Props {\n  controllerState: ControllerState;\n}\n\ninterface MyButtonProps {\n  index: number;\n  value: boolean;\n  setButtonValue: (index: number, value: boolean) => void;\n}\n\nclass MyButton extends React.PureComponent<MyButtonProps, {}> {\n  public componentWillUnmount() {\n    if (super.componentWillUnmount) {\n      super.componentWillUnmount();\n    }\n    this.removeListeners();\n  }\n\n  public render() {\n    return (\n      <div\n        className={`ControlsView-button ${this.props.value ? \"pressed\" : \"\"}`}\n        onMouseDown={this.onMouseDown}\n      >\n        {this.props.index + 1}\n      </div>\n    );\n  }\n\n  private onMouseDown = () => {\n    this.props.setButtonValue(this.props.index, true);\n    document.addEventListener(\"mouseup\", this.onMouseUp);\n  };\n\n  private onMouseUp = () => {\n    this.props.setButtonValue(this.props.index, false);\n    this.removeListeners();\n  };\n\n  private removeListeners = () => {\n    document.removeEventListener(\"mouseup\", this.onMouseUp);\n  };\n}\n\ninterface MyDialProps {\n  index: number;\n  value: number;\n  setDialValue: (index: number, value: number) => void;\n}\n\ninterface MyDialState {\n  isDragging: boolean;\n}\n\nclass MyDial extends React.PureComponent<MyDialProps, MyDialState> {\n  public state: MyDialState = { isDragging: false };\n\n  private startDragValue = 0;\n  private startDragX = 0;\n\n  public componentWillUnmount() {\n    if (super.componentWillUnmount) {\n      super.componentWillUnmount();\n    }\n    this.removeListeners();\n  }\n\n  public render() {\n    return (\n      <div\n        className={[\n          \"ControlsView-dial\",\n          this.state.isDragging ? \"dragging\" : \"\"\n        ].join(\" \")}\n        onMouseDown={this.onMouseDown}\n      >\n        <span\n          className=\"ControlsView-dialIndicator\"\n          style={{\n            transform: `translateX(-50%) rotate(${\n              -135 + 270 * this.props.value\n            }deg)`\n          }}\n        />\n        <span className=\"ControlsView-dialLabel\">{this.props.index + 1}</span>\n      </div>\n    );\n  }\n\n  private onMouseDown = (event: React.MouseEvent<any>) => {\n    this.startDragValue = this.props.value;\n    this.startDragX = event.pageX;\n    this.setState({ isDragging: true });\n    document.addEventListener(\"mousemove\", this.onMouseMove as any);\n    document.addEventListener(\"mouseup\", this.onMouseUp);\n  };\n\n  private onMouseUp = () => {\n    this.setState({ isDragging: false });\n    this.removeListeners();\n  };\n\n  private onMouseMove = (event: React.MouseEvent<any>) => {\n    this.props.setDialValue(\n      this.props.index,\n      bracket01(this.startDragValue + (event.pageX - this.startDragX) / 100)\n    );\n  };\n\n  private removeListeners = () => {\n    document.removeEventListener(\"mousemove\", this.onMouseMove as any);\n    document.removeEventListener(\"mouseup\", this.onMouseUp);\n  };\n}\n\nexport default class ControlsView extends React.Component<Props, {}> {\n  public render() {\n    return (\n      <div className=\"ControlsView\">\n        <div className=\"ControlsView-controls\">\n          {this.renderButtons()}\n          {this.renderDials()}\n        </div>\n      </div>\n    );\n  }\n\n  private renderButtons() {\n    return this.render4by2({\n      values: this.props.controllerState.buttonStates,\n      renderFunc: (value, i) => (\n        <MyButton\n          key={`button${i}`}\n          index={i}\n          value={value}\n          setButtonValue={this.setButtonValue}\n        />\n      ),\n      flipped: true\n    });\n  }\n\n  private renderDials() {\n    return this.render4by2({\n      values: this.props.controllerState.dialValues,\n      renderFunc: (value, i) => (\n        <MyDial\n          key={`dial${i}`}\n          index={i}\n          value={value}\n          setDialValue={this.setDialValue}\n        />\n      )\n    });\n  }\n\n  private render4by2<T>(attrs: {\n    className?: string;\n    values: T[];\n    renderFunc: (value: T, idx: number) => any;\n    flipped?: boolean;\n  }) {\n    if (attrs.values.length !== 8) {\n      throw new Error(\"expected 8 values\");\n    }\n\n    return (\n      <div className={`ControlsView-controlsCluster ${attrs.className || \"\"}`}>\n        {(attrs.flipped ? [1, 0] : [0, 1]).map(rowIdx => {\n          return (\n            <div key={`row${rowIdx}`} className=\"ControlsView-controlsRow\">\n              {[0, 1, 2, 3].map(offset => {\n                const n = rowIdx * 4 + offset;\n                return attrs.renderFunc(attrs.values[n], n);\n              })}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n\n  private stateChangeTimeout: NodeJS.Timeout | null = null;\n\n  public onStateChange() {\n    if (this.stateChangeTimeout === null) {\n      this.stateChangeTimeout = setTimeout(() => {\n        this.stateChangeTimeout = null;\n        this.forceUpdate();\n      }, 1000 / 60);\n    }\n  }\n\n  private setButtonValue = (index: number, value: boolean) => {\n    this.props.controllerState.setButtonState(index, value);\n    this.forceUpdate();\n  };\n\n  private setDialValue = (index: number, value: number) => {\n    this.props.controllerState.dialValues[index] = value;\n    this.forceUpdate();\n  };\n}\n","const URL = \"ws://localhost:7890\";\n\nconst RECONNECT_TIME_MS = 3000;\n\nexport default class FadecandyClient {\n  private ws: WebSocket | null = null;\n  private reconnectTimeout: NodeJS.Timeout | null = null;\n\n  constructor() {\n    this.tryConnectNow();\n  }\n\n  private tryConnectNow = () => {\n    if (this.reconnectTimeout !== null) {\n      clearTimeout(this.reconnectTimeout);\n      this.reconnectTimeout = null;\n    }\n\n    if (this.ws === null) {\n      this.ws = new WebSocket(URL);\n      this.ws.onopen = this.onWebSocketOpen;\n      this.ws.onclose = this.onWebSocketClose;\n    }\n  };\n\n  private tryConnectSoon() {\n    if (this.reconnectTimeout === null) {\n      this.reconnectTimeout = setTimeout(this.tryConnectNow, RECONNECT_TIME_MS);\n    }\n  }\n\n  public sendData(data: Buffer) {\n    if (this.ws !== null && this.ws.readyState === WebSocket.OPEN) {\n      this.ws.send(data);\n    }\n  }\n\n  private onWebSocketOpen = () => {\n    // console.log(\"fadecandy websocket opened\");\n  };\n\n  private onWebSocketClose = (ev: CloseEvent) => {\n    // console.log(\"fadecandy websocket closed\");\n    if (ev.target === this.ws) {\n      this.ws = null;\n      this.tryConnectSoon();\n    }\n  };\n}\n","import * as Utils from \"../util/Utils\";\nimport PianoEvent, { Key } from \"./base/PianoEvent\";\nimport PianoState from \"./base/PianoState\";\n\nconst MIDI_KEY_OFFSET = -21;\nconst MIDI_MAX_VELOCITY = 127;\n\nexport function pianoEventFromMidiData(data: number[]): PianoEvent | null {\n  if (data.length < 1) {\n    return null;\n  }\n\n  switch (data[0]) {\n    case 0x80:\n    case 0x90:\n      if (data.length < 2) {\n        return null;\n      } else {\n        const key = data[1] + MIDI_KEY_OFFSET;\n        if (key < 0 || key >= NUM_KEYS) {\n          return null;\n        } else {\n          const velocity = data.length >= 3 ? data[2] / MIDI_MAX_VELOCITY : 1;\n          const isKeyPress = data[0] === 0x90 && velocity > 0;\n          return {\n            type: isKeyPress ? \"keyPressed\" : \"keyReleased\",\n            key: data[1] + MIDI_KEY_OFFSET,\n            velocity: velocity\n          };\n        }\n      }\n\n    default:\n      return null;\n  }\n}\n\nexport function resetAllKeysMidiDatas(): number[][] {\n  const output: number[][] = [];\n\n  for (let i = 0; i < 88; ++i) {\n    const midiKey = i - MIDI_KEY_OFFSET;\n    output.push([0x80, midiKey, 0]);\n  }\n\n  return output;\n}\n\nexport function describePianoEvent(event: PianoEvent): string {\n  const parts = Object.keys(event).map(key => {\n    const value = event[key];\n    switch (key) {\n      case \"type\":\n        return `${value}`;\n      case \"velocity\":\n        return `v=${Utils.floatToString(value, 2)}`;\n      default:\n        return `${key[0]}=${JSON.stringify(value)}`;\n    }\n  });\n\n  return parts.join(\" \");\n}\n\nconst NUM_KEYS = 88;\n\nexport class VisualizationStateHelper extends PianoState {\n  public startFrame() {\n    this.changedKeys = [];\n  }\n\n  public endFrame() {\n    this.changedKeys.sort();\n  }\n\n  public applyEvent(event: PianoEvent) {\n    switch (event.type) {\n      case \"keyPressed\":\n      case \"keyReleased\":\n        this.applyPressOrReleaseEvent(\n          /*isPress=*/ event.type === \"keyPressed\",\n          event.key,\n          event.velocity\n        );\n        break;\n\n      default:\n        // unrecognized event; throw?\n        break;\n    }\n  }\n\n  private applyPressOrReleaseEvent(\n    isPress: boolean,\n    key: Key,\n    velocity: number\n  ) {\n    if (this.keys[key] !== isPress) {\n      this.keys[key] = isPress;\n      this.keyVelocities[key] = velocity;\n      if (!this.changedKeys.includes(key)) {\n        this.changedKeys.push(key);\n      }\n    }\n  }\n}\n","const NUM_KEYS = 88;\n\nexport default class PianoState {\n  // 88 booleans; true = pressed, false = released\n  public keys: boolean[];\n\n  // velocity (0-1) of most recent key event (press OR release)\n  public keyVelocities: number[];\n\n  // sorted indexes of keys changed since last frame\n  public changedKeys: number[];\n\n  public constructor() {\n    this.keys = new Array<boolean>(NUM_KEYS).fill(false);\n    this.keyVelocities = new Array<number>(NUM_KEYS).fill(0);\n    this.changedKeys = [];\n  }\n\n  public reset() {\n    this.keys.fill(false);\n    this.keyVelocities.fill(0);\n    this.changedKeys = [];\n  }\n}\n","import PianoEvent from \"../portable/base/PianoEvent\";\nimport * as PianoHelpers from \"../portable/PianoHelpers\";\n\n// tslint:disable no-bitwise\n\n// TODO clean up redundancy between this and PianoEvent\n\nfunction toHex(n: number): string {\n  const s = n.toString(16);\n  return (s.length === 1 ? \"0\" : \"\") + s;\n}\n\nfunction describeStatusByte(n: number): string | null {\n  switch (n >> 4) {\n    case 0x8: // note off\n      return `NOTE_OFF(${n & 0xf})`;\n\n    case 0x9: // note on\n      return `NOTE_ON(${n & 0xf})`;\n\n    default:\n      return null;\n  }\n}\n\nexport default class MidiEvent {\n  public readonly data: number[];\n  public readonly isNoteworthy: boolean;\n  public readonly pianoEvent: PianoEvent | null;\n  private readonly statusDescription: string | null;\n  public readonly suppressDisplay: boolean;\n\n  constructor(data: number[] | Uint8Array, suppressDisplay?: true) {\n    if (data instanceof Uint8Array) {\n      this.data = Array.from(data);\n    } else {\n      this.data = [...data];\n    }\n    this.statusDescription =\n      this.data.length === 0 ? null : describeStatusByte(this.data[0]);\n    this.isNoteworthy = this.statusDescription !== null;\n    this.pianoEvent = PianoHelpers.pianoEventFromMidiData(this.data);\n    this.suppressDisplay = suppressDisplay || false;\n  }\n\n  public toString() {\n    let parts: string[];\n\n    if (this.pianoEvent === null) {\n      parts = [\"raw:\", ...this.data.map(toHex)];\n      if (this.statusDescription !== null) {\n        parts[0] = this.statusDescription;\n      }\n    } else {\n      parts = [PianoHelpers.describePianoEvent(this.pianoEvent)];\n    }\n    return parts.join(\" \");\n  }\n}\n","import MidiEvent from \"./MidiEvent\";\n\nexport default interface MidiEventListener {\n  onMidiEvent: (event: MidiEvent, emitter: MidiEventEmitter) => void;\n}\n\nexport class MidiEventEmitter {\n  private listeners: MidiEventListener[] = [];\n\n  public addListener(listener: MidiEventListener) {\n    if (!this.listeners.includes(listener)) {\n      this.listeners.push(listener);\n    }\n  }\n\n  public removeListener(listener: MidiEventListener) {\n    this.listeners = this.listeners.filter(x => x !== listener);\n  }\n\n  public fire(event: MidiEvent) {\n    this.listeners.forEach(listener => listener.onMidiEvent(event, this));\n  }\n}\n\ninterface TimestampAndMidiEvent {\n  timestamp: number;\n  event: MidiEvent;\n}\n\nexport class QueuedMidiEventEmitter extends MidiEventEmitter {\n  private pendingEvents: TimestampAndMidiEvent[] = [];\n  private nextTimeout: NodeJS.Timeout | null = null;\n  private latestTimestamp: number = 0;\n\n  public terminate() {\n    if (this.nextTimeout !== null) {\n      clearTimeout(this.nextTimeout);\n      this.nextTimeout = null;\n    }\n  }\n\n  public fireLater(event: MidiEvent, timestamp: number) {\n    if (timestamp < this.latestTimestamp) {\n      throw new Error(\"got events out of chronological order\");\n    }\n    this.pendingEvents.push({\n      timestamp: timestamp,\n      event: event\n    });\n    this.scheduleDequeueIfNeeded();\n  }\n\n  private scheduleDequeueIfNeeded() {\n    if (this.nextTimeout === null && this.pendingEvents.length > 0) {\n      const nextTimestamp = this.pendingEvents[0].timestamp;\n      if (nextTimestamp === undefined) {\n        // shouldn't happen because the loop above should eat all the undefineds\n        throw new Error(\"this shouldn't happen\");\n      }\n\n      const now = performance.now();\n      const delay = Math.max(0, nextTimestamp - now);\n      this.nextTimeout = setTimeout(this.dequeueEvents, delay);\n    }\n  }\n\n  private dequeueEvents = () => {\n    const now = performance.now();\n\n    // show all the events that have happened by now\n    while (this.pendingEvents.length > 0) {\n      const head = this.pendingEvents[0];\n      if (head.timestamp !== undefined && head.timestamp > now) {\n        break;\n      }\n      this.pendingEvents.shift();\n      this.fire(head.event);\n    }\n\n    this.nextTimeout = null;\n    this.scheduleDequeueIfNeeded();\n  };\n\n  public reset() {\n    this.pendingEvents = [];\n    if (this.nextTimeout) {\n      clearTimeout(this.nextTimeout);\n      this.nextTimeout = null;\n    }\n    this.latestTimestamp = 0;\n  }\n}\n","import _ from \"lodash\";\n\nexport function cx(\n  ...args: ReadonlyArray<\n    string | null | undefined | Record<string, boolean | undefined>\n  >\n) {\n  const results: string[] = [];\n  for (const arg of args) {\n    if (typeof arg === \"string\") {\n      results.push(arg);\n    } else if (arg !== null && arg !== undefined) {\n      for (const entry in arg) {\n        if (arg[entry]) {\n          results.push(entry);\n        }\n      }\n    }\n  }\n  return results.join(\" \");\n}\n\ntype CMArg<CS extends Record<string, string>> =\n  | keyof CS\n  | Partial<Record<keyof CS, boolean>>;\n\nexport function cm<CS extends Record<string, string>>(\n  classes: CS,\n  ...args: ReadonlyArray<CMArg<CS>>\n): string {\n  const resultParts: string[] = [];\n  for (const arg of args) {\n    if (typeof arg === \"string\") {\n      resultParts.push(classes[arg]);\n    } else {\n      _.forEach(arg as Partial<Record<keyof CS, boolean>>, (value, key) => {\n        if (value) {\n          resultParts.push(classes[key]);\n        }\n      });\n    }\n  }\n  return resultParts.join(\" \");\n}\n","import * as React from \"react\";\n\nimport MidiEvent from \"./piano/MidiEvent\";\nimport MidiEventListener, { MidiEventEmitter } from \"./piano/MidiEventListener\";\nimport styles from \"./PianoView.module.scss\";\nimport { cm } from \"./util/CSSUtils\";\nimport { fillArray } from \"./util/Utils\";\n\nconst NUM_KEYS = 88;\n\nfunction isBlackKey(n: number): boolean {\n  switch (n % 12) {\n    case 1:\n    case 4:\n    case 6:\n    case 9:\n    case 11:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nconst NUM_WHITE_KEYS = (() => {\n  let n = 0;\n  for (let i = 0; i < NUM_KEYS; ++i) {\n    if (!isBlackKey(i)) {\n      n++;\n    }\n  }\n  return n;\n})();\n\nconst WHITE_KEY_WIDTH_PCT = 100 / NUM_WHITE_KEYS;\nconst WHITE_KEY_WIDTH_PCT_STR = `${WHITE_KEY_WIDTH_PCT}%`;\nconst BLACK_KEY_WIDTH_PCT = WHITE_KEY_WIDTH_PCT * 0.6;\nconst BLACK_KEY_WIDTH_PCT_STR = `${BLACK_KEY_WIDTH_PCT}%`;\n\ninterface KeyProps {\n  offset: number;\n  isBlack: boolean;\n}\n\ninterface KeyState {\n  isPressed: boolean;\n}\n\nclass PianoKey extends React.PureComponent<KeyProps, KeyState> {\n  public state: KeyState = { isPressed: false };\n\n  public render() {\n    const { isBlack, offset } = this.props;\n    const { isPressed } = this.state;\n    return (\n      <div\n        className={cm(styles, isBlack ? \"blackKey\" : \"whiteKey\", {\n          pressed: isPressed\n        })}\n        style={{\n          width: isBlack ? BLACK_KEY_WIDTH_PCT_STR : WHITE_KEY_WIDTH_PCT_STR,\n          left: isBlack\n            ? `${\n                (offset + 1) * WHITE_KEY_WIDTH_PCT - 0.5 * BLACK_KEY_WIDTH_PCT\n              }%`\n            : `${offset * WHITE_KEY_WIDTH_PCT}%`\n        }}\n      />\n    );\n  }\n\n  public setIsPressed(isPressed: boolean) {\n    this.setState({ isPressed });\n  }\n}\n\ninterface Props {\n  midiEventEmitter: MidiEventEmitter;\n}\n\nexport default class PianoView\n  extends React.PureComponent<Props>\n  implements MidiEventListener\n{\n  private registeredMidiEventEmitter: MidiEventEmitter | null = null;\n\n  private readonly keyRefs = fillArray(NUM_KEYS, () =>\n    React.createRef<PianoKey>()\n  );\n\n  public render() {\n    this.refreshMidiEventEmitter();\n    // console.log(\"rendering piano\");\n    const whiteKeys: JSX.Element[] = [];\n    const blackKeys: JSX.Element[] = [];\n    let offset = -1;\n    for (let n = 0; n < NUM_KEYS; ++n) {\n      const isBlack = isBlackKey(n);\n      if (!isBlack) {\n        offset++;\n      }\n      (isBlack ? blackKeys : whiteKeys).push(\n        <PianoKey\n          key={n}\n          offset={offset}\n          isBlack={isBlack}\n          ref={this.keyRefs[n]}\n        />\n      );\n    }\n\n    return (\n      <div className={styles.root}>\n        <div className={styles.piano}>\n          {whiteKeys}\n          {blackKeys}\n        </div>\n      </div>\n    );\n  }\n\n  public componentWillUnmount() {\n    this.unregisterMidiEventEmitter();\n    super.componentWillUnmount?.();\n  }\n\n  private setKeyPressed(n: number, isPressed: boolean) {\n    if (n < 0 || n >= NUM_KEYS) {\n      console.log(\"got out-of-range note\", n);\n      return;\n    }\n\n    const ref = this.keyRefs[n];\n    ref.current?.setIsPressed(isPressed);\n  }\n\n  public reset() {\n    this.keyRefs.forEach(ref => ref.current?.setIsPressed(false));\n  }\n\n  public onMidiEvent(event: MidiEvent) {\n    const pianoEvent = event.pianoEvent;\n    if (pianoEvent !== null) {\n      switch (pianoEvent.type) {\n        case \"keyPressed\":\n          this.setKeyPressed(pianoEvent.key, /*isPressed=*/ true);\n          break;\n\n        case \"keyReleased\":\n          this.setKeyPressed(pianoEvent.key, /*isPressed=*/ false);\n          break;\n\n        default:\n          break;\n      }\n    }\n  }\n\n  private refreshMidiEventEmitter() {\n    if (this.props.midiEventEmitter === this.registeredMidiEventEmitter) {\n      return;\n    }\n\n    this.unregisterMidiEventEmitter();\n    this.props.midiEventEmitter.addListener(this);\n    this.registeredMidiEventEmitter = this.props.midiEventEmitter;\n  }\n\n  private unregisterMidiEventEmitter() {\n    if (this.registeredMidiEventEmitter !== null) {\n      this.registeredMidiEventEmitter.removeListener(this);\n      this.registeredMidiEventEmitter = null;\n    }\n  }\n}\n","import MidiEvent from \"../../piano/MidiEvent\";\nimport { removeAll } from \"../../util/Utils\";\n\ntype ArrayOf8<T> = [T, T, T, T, T, T, T, T];\n\nfunction arrayOf8Values<T>(value: T): ArrayOf8<T> {\n  return new Array<T>(8).fill(value) as ArrayOf8<T>;\n}\n\nexport default class ControllerState {\n  public readonly buttonStates: ArrayOf8<boolean>;\n  public readonly pressesSinceLastFrame: number[];\n  public readonly releasesSinceLastFrame: number[];\n  public readonly dialValues: ArrayOf8<number>; // 0 to 1, inclusive\n\n  constructor() {\n    this.buttonStates = arrayOf8Values(false);\n    this.dialValues = arrayOf8Values(0);\n    this.pressesSinceLastFrame = [];\n    this.releasesSinceLastFrame = [];\n\n    // default the last dial to 1 since it's used as global brightness\n    // TODO maybe make this a sticky setting, since IRL full brightness might be a lot\n    this.dialValues[7] = 1;\n\n    this.reset();\n  }\n\n  public startFrame() {\n    removeAll(this.pressesSinceLastFrame);\n    removeAll(this.releasesSinceLastFrame);\n  }\n\n  public reset() {\n    const oldDerez = this.dialValues[6];\n    const oldBrightness = this.dialValues[7];\n\n    this.dialValues.fill(0);\n\n    // don't let a new visualization's derez be 1\n    this.dialValues[6] = Math.min(0.95, oldDerez);\n\n    // don't let a new visualization's brightness be 0\n    this.dialValues[7] = Math.max(0.05, oldBrightness);\n  }\n\n  public handleEvent(event: MidiEvent) {\n    if (event.data.length !== 3) {\n      return;\n    }\n\n    const statusByte = event.data[0];\n    switch (statusByte) {\n      case 0x8a: // button\n      case 0x9a:\n        const isPress = statusByte === 0x9a;\n        const buttonIndex = event.data[1] - 0x24;\n        this.setButtonState(buttonIndex, isPress);\n        break;\n\n      case 0xb0: // dial\n        const dialIndex = event.data[1] - 1;\n        const valueNormalized = event.data[2] / 0x7f;\n        if (dialIndex >= 0 && dialIndex < 8) {\n          this.dialValues[dialIndex] = valueNormalized;\n        }\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  public setButtonState(index: number, value: boolean) {\n    if (index >= 0 && index < this.buttonStates.length) {\n      this.buttonStates[index] = value;\n      (value ? this.pressesSinceLastFrame : this.releasesSinceLastFrame).push(\n        index\n      );\n    }\n  }\n}\n","import \"./RightSidebar.scss\";\n\nimport * as React from \"react\";\n\nimport * as AudioIn from \"./audioIn/AudioIn\";\nimport { MidiEventEmitter } from \"./piano/MidiEventListener\";\nimport { identity, valueOrDefault } from \"./util/Utils\";\n\nexport interface Actions {\n  setPianoMidiInput: (newValue: WebMidi.MIDIInput | null) => void;\n  setPianoMidiThru: (newValue: WebMidi.MIDIOutput | null) => void;\n  setControllerMidiInput: (newValue: WebMidi.MIDIInput | null) => void;\n  setBeatControllerType: (newValue: BeatControllerType) => void;\n  setSelectedSceneName: (newValue: string) => void;\n  setSelectedVisualizationGroupName: (newValue: string) => void;\n  setSelectedVisualizationName: (newValue: string) => void;\n  setAudioInput: (newValue: AudioIn.InputDeviceInfo | null) => void;\n}\n\nexport type BeatControllerType = \"manual\" | \"ableton\";\n\ninterface Props {\n  actions: Actions;\n  sceneNames: ReadonlyArray<string>;\n  selectedSceneName: string;\n  visualizationGroupNames: ReadonlyArray<string>;\n  selectedVisualizationGroupName: string;\n  visualizationNames: ReadonlyArray<string>;\n  selectedVisualizationName: string;\n  midiInputs: WebMidi.MIDIInput[];\n  selectedPianoMidiInput: WebMidi.MIDIInput | null;\n  selectedControllerMidiInput: WebMidi.MIDIInput | null;\n  midiOutputs: WebMidi.MIDIOutput[];\n  selectedPianoMidiThru: WebMidi.MIDIOutput | null;\n  midiEventEmitters: MidiEventEmitter[];\n  audioInputs: AudioIn.InputDeviceInfo[] | undefined;\n  selectedAudioInput: AudioIn.InputDeviceInfo | null;\n  selectedBeatControllerType: BeatControllerType;\n}\n\nexport default class RightSidebar extends React.PureComponent<Props, {}> {\n  public render() {\n    return (\n      <div className=\"RightSidebar\">\n        <div className=\"RightSidebar-optionsGroup\">\n          {this.renderSceneSelector()}\n          <p />\n          {this.renderVisualizationGroupSelector()}\n          {this.renderVisualizationSelector()}\n          <p />\n          {this.renderAudioInputDevices()}\n          {this.renderPianoMidiInputDevices()}\n          {this.renderPianoMidiThruDevices()}\n          {this.renderControllerMidiDevices()}\n          {this.renderBeatControllerDevices()}\n          <p />\n        </div>\n        <div className=\"RightSidebar-appVersion\">\n          v{process.env.REACT_APP_VERSION}\n        </div>\n      </div>\n    );\n  }\n\n  private renderSceneSelector() {\n    return this.renderDropDownOption({\n      label: \"Scene\",\n      currentOption: this.props.selectedSceneName,\n      options: this.props.sceneNames,\n      optionToValueFunc: identity,\n      onChange: this.props.actions.setSelectedSceneName\n    });\n  }\n\n  private renderVisualizationGroupSelector() {\n    return this.renderDropDownOption({\n      label: \"Vis Group\",\n      currentOption: this.props.selectedVisualizationGroupName,\n      options: this.props.visualizationGroupNames,\n      optionToValueFunc: identity,\n      onChange: this.props.actions.setSelectedVisualizationGroupName\n    });\n  }\n\n  private renderVisualizationSelector() {\n    return this.renderDropDownOption({\n      label: \"Visualization\",\n      currentOption: this.props.selectedVisualizationName,\n      options: this.props.visualizationNames,\n      optionToValueFunc: identity,\n      onChange: this.props.actions.setSelectedVisualizationName\n    });\n  }\n\n  private renderAudioInputDevices() {\n    const { audioInputs } = this.props;\n\n    if (audioInputs === undefined) {\n      return \"(initializing audio in...)\";\n    }\n\n    return this.renderDropDownOption({\n      label: \"Audio in\",\n      currentOption: this.props.selectedAudioInput,\n      options: [null, ...audioInputs],\n      optionToValueFunc: opt => (opt === null ? \"\" : opt.id),\n      optionToLabelFunc: opt => (opt === null ? \"<none>\" : opt.name),\n      onChange: this.props.actions.setAudioInput\n    });\n  }\n\n  private renderPianoMidiInputDevices() {\n    return this.renderMidiDropDownOption({\n      label: \"Piano MIDI in\",\n      currentOption: this.props.selectedPianoMidiInput,\n      options: this.props.midiInputs,\n      onChange: this.props.actions.setPianoMidiInput\n    });\n  }\n\n  private renderPianoMidiThruDevices() {\n    return this.renderMidiDropDownOption({\n      label: \"Piano MIDI thru\",\n      currentOption: this.props.selectedPianoMidiThru,\n      options: this.props.midiOutputs,\n      onChange: this.props.actions.setPianoMidiThru\n    });\n  }\n\n  private renderControllerMidiDevices() {\n    return this.renderMidiDropDownOption({\n      label: \"Ctrl MIDI in\",\n      currentOption: this.props.selectedControllerMidiInput,\n      options: this.props.midiInputs,\n      onChange: this.props.actions.setControllerMidiInput\n    });\n  }\n\n  private renderBeatControllerDevices() {\n    const { selectedBeatControllerType } = this.props;\n\n    const options: BeatControllerType[] = [\"manual\", \"ableton\"];\n\n    return this.renderDropDownOption({\n      label: \"Beat ctrl\",\n      currentOption: selectedBeatControllerType,\n      options,\n      optionToValueFunc: identity,\n      onChange: this.props.actions.setBeatControllerType\n    });\n  }\n\n  private renderMidiDropDownOption<\n    T extends WebMidi.MIDIInput | WebMidi.MIDIOutput\n  >(attrs: {\n    label: string;\n    currentOption: T | null;\n    options: T[];\n    onChange: (newOption: T | null) => void;\n  }) {\n    return this.renderDropDownOption<T | null>({\n      label: attrs.label,\n      currentOption: attrs.currentOption,\n      options: [null, ...attrs.options],\n      optionToValueFunc: opt => (opt === null ? \"\" : opt.id),\n      optionToLabelFunc: opt =>\n        opt === null ? \"<none>\" : valueOrDefault(opt.name, opt.id),\n      onChange: attrs.onChange\n    });\n  }\n\n  private renderDropDownOption<T>(attrs: {\n    label: string;\n    currentOption: T;\n    options: readonly T[];\n    optionToValueFunc: (option: T) => string;\n    optionToLabelFunc?: (option: T) => string;\n    onChange: (newOption: T) => void;\n  }) {\n    const { currentOption, options, optionToLabelFunc, optionToValueFunc } =\n      attrs;\n\n    const optionValues = options.map(optionToValueFunc);\n    const optionLabels = optionToLabelFunc\n      ? options.map(optionToLabelFunc)\n      : optionValues;\n    const currentValue = optionToValueFunc(currentOption);\n\n    const wrappedOnChange = (event: React.ChangeEvent<any>) => {\n      const i = optionValues.indexOf(event.target.value);\n      if (i === -1) {\n        throw new Error(\"invalid value\");\n      }\n      attrs.onChange(options[i]);\n    };\n\n    return (\n      <div className=\"RightSidebar-dropDownOption\">\n        <span className=\"RightSidebar-dropDownOptionLabel\">\n          {attrs.label}:{\" \"}\n        </span>\n        <div className=\"RightSidebar-dropDownOptionSelectContainer\">\n          <select\n            className=\"RightSidebar-dropDownOptionSelect\"\n            value={currentValue}\n            onChange={wrappedOnChange}\n            tabIndex={-1}\n          >\n            {optionValues.map((value, i) => (\n              <option key={value} value={value}>\n                {optionLabels[i]}\n              </option>\n            ))}\n          </select>\n        </div>\n      </div>\n    );\n  }\n}\n","import \"./SimulationViewport.scss\";\n\nimport * as Three from \"three\";\nimport { Vector2, sRGBEncoding } from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { EffectComposer } from \"three/examples/jsm/postprocessing/EffectComposer\";\nimport { RenderPass } from \"three/examples/jsm/postprocessing/RenderPass\";\nimport { UnrealBloomPass } from \"three/examples/jsm/postprocessing/UnrealBloomPass\";\n\nimport * as Colors from \"../portable/base/Colors\";\nimport { SendableLedStrip } from \"../portable/SendableLedStrip\";\nimport Scene from \"../scenes/Scene\";\nimport VisualizationRunner from \"../VisualizationRunner\";\n\nconst CAMERA_FOV_DEG = 50;\nconst CAMERA_NEAR_DISTANCE = 0.1;\nconst CAMERA_FAR_DISTANCE = 1000;\n\nconst BLOOM_STRENGTH = 1;\nconst BLOOM_RADIUS = 0.1;\nconst BLOOM_THRESHOLD = 0.1;\n\nfunction initializeScene() {\n  const renderScene = new Three.Scene();\n  // renderScene.background = new Three.Color(.1, .1, .1);\n\n  // renderScene.add(new Three.AmbientLight(0x333333));\n\n  let light = new Three.DirectionalLight(0x111111);\n  light.position.set(-100, 100, 100);\n  light.castShadow = false;\n  light.receiveShadow = false;\n  renderScene.add(light);\n\n  light = new Three.DirectionalLight(0x030303);\n  light.position.set(100, 100, -100);\n  light.castShadow = false;\n  light.receiveShadow = false;\n  renderScene.add(light);\n\n  return renderScene;\n}\n\nclass LedMesh {\n  private static readonly MATERIAL = new Three.MeshBasicMaterial({\n    side: Three.DoubleSide\n  });\n\n  private readonly material: typeof LedMesh.MATERIAL;\n\n  constructor(\n    renderScene: Three.Scene,\n    geometry: Three.PlaneBufferGeometry,\n    position: Three.Vector3\n  ) {\n    this.material = LedMesh.MATERIAL.clone();\n    const mesh = new Three.Mesh(geometry, this.material);\n    mesh.position.copy(position);\n    mesh.castShadow = false;\n    mesh.receiveShadow = false;\n    renderScene.add(mesh);\n    this.removeFromScene = () => {\n      renderScene.remove(mesh);\n    };\n  }\n\n  public setColor(color: Colors.Color) {\n    this.material.color.set(color);\n  }\n\n  public readonly removeFromScene: () => void;\n}\n\nclass LedMeshFactory {\n  private readonly renderScene: Three.Scene;\n  private readonly ledGeometry: Three.PlaneBufferGeometry;\n\n  constructor(renderScene: Three.Scene, ledRadius: number) {\n    this.renderScene = renderScene;\n    this.ledGeometry = new Three.PlaneBufferGeometry(\n      ledRadius * 2,\n      ledRadius * 2\n    );\n  }\n\n  public createAt(position: Three.Vector3): LedMesh {\n    return new LedMesh(this.renderScene, this.ledGeometry, position);\n  }\n}\n\nclass LedSceneStrip implements SendableLedStrip {\n  public readonly size: number;\n  private readonly ledMeshes: LedMesh[];\n  private readonly onSend: () => void;\n\n  constructor(ledMeshes: LedMesh[], onSend: () => void) {\n    this.size = ledMeshes.length;\n    this.ledMeshes = ledMeshes;\n    this.onSend = onSend;\n    this.reset();\n  }\n\n  public setColor(n: number, color: Colors.Color) {\n    if (n >= 0 && n < this.ledMeshes.length) {\n      this.ledMeshes[n].setColor(color);\n    }\n  }\n\n  public setRange(startIndex: number, numLeds: number, color: Colors.Color) {\n    if (startIndex < 0) {\n      numLeds += startIndex;\n      startIndex = 0;\n    }\n\n    numLeds = Math.min(numLeds, this.size - startIndex);\n\n    if (numLeds > 0) {\n      for (let i = startIndex; i < startIndex + numLeds; ++i) {\n        this.ledMeshes[i].setColor(color);\n      }\n    }\n  }\n\n  public reset(color?: Colors.Color): void {\n    this.setRange(0, this.size, color || Colors.BLACK);\n  }\n\n  public send() {\n    this.onSend();\n  }\n\n  public readonly averageSendTime = 0;\n}\n\nclass LedScene {\n  public readonly scene: Scene;\n  public readonly ledStrip: SendableLedStrip;\n  private ledMeshes: LedMesh[] = [];\n\n  constructor(scene: Scene, renderScene: Three.Scene, doRender: () => void) {\n    const factory = new LedMeshFactory(renderScene, scene.ledRadius);\n\n    this.scene = scene;\n\n    for (const led of scene.ledMetadatas) {\n      this.ledMeshes.push(factory.createAt(led.position));\n    }\n\n    this.ledStrip = new LedSceneStrip(this.ledMeshes, doRender);\n  }\n\n  public remove() {\n    this.ledMeshes.forEach(m => m.removeFromScene());\n  }\n}\n\nexport default class SimulationRenderer {\n  private readonly renderer: Three.WebGLRenderer;\n  private readonly composer: EffectComposer;\n  private readonly renderPass: RenderPass;\n  private readonly bloomPass: UnrealBloomPass;\n  private readonly camera: Three.PerspectiveCamera;\n  private readonly controls: OrbitControls;\n\n  #scene?: Scene;\n  #visualizationRunner?: VisualizationRunner;\n  #container: HTMLDivElement | null = null;\n  #active = true;\n\n  private renderScene: Three.Scene;\n  private ledScene?: LedScene;\n\n  public frameDidRender?: (renderMillis: number) => void;\n\n  public enableBloom = true;\n\n  public constructor() {\n    this.renderer = new Three.WebGLRenderer({\n      antialias: true,\n      preserveDrawingBuffer: false\n    });\n    this.renderer.outputEncoding = sRGBEncoding;\n\n    this.camera = new Three.PerspectiveCamera(\n      CAMERA_FOV_DEG,\n      /* aspect will get set in updateSizes */ 1,\n      CAMERA_NEAR_DISTANCE,\n      CAMERA_FAR_DISTANCE\n    );\n\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n\n    this.renderScene = initializeScene();\n\n    this.composer = new EffectComposer(this.renderer);\n    this.renderPass = new RenderPass(this.renderScene, this.camera);\n    this.bloomPass = new UnrealBloomPass(\n      new Vector2(),\n      BLOOM_STRENGTH,\n      BLOOM_RADIUS,\n      BLOOM_THRESHOLD\n    );\n    this.composer.addPass(this.renderPass);\n    this.composer.addPass(this.bloomPass);\n  }\n\n  public set container(container: HTMLDivElement | null) {\n    const oldContainer = this.#container;\n\n    if (container === oldContainer) {\n      // no change\n      return;\n    }\n\n    if (oldContainer !== null) {\n      oldContainer.removeChild(this.renderer.domElement);\n    }\n\n    if (container !== null) {\n      container.appendChild(this.renderer.domElement);\n      this.controls.domElement = container;\n    } else {\n      this.controls.domElement = this.renderer.domElement;\n    }\n    this.controls.update();\n\n    this.#container = container;\n\n    if (container !== null) {\n      this.updateSizes();\n    }\n  }\n\n  public readonly doRender = () => {\n    // render 3d scene\n    const startTime = performance.now();\n    if (this.#active) {\n      // this.renderer.render(this.state.renderScene, this.state.camera);\n      if (this.enableBloom) {\n        this.composer.render();\n      } else {\n        this.renderer.render(this.renderScene, this.camera);\n      }\n    }\n    const renderMillis = performance.now() - startTime;\n\n    this.frameDidRender?.(renderMillis);\n  };\n\n  public set scene(newScene: Scene) {\n    if (newScene === this.#scene) {\n      return;\n    }\n\n    this.#scene = newScene;\n\n    if (this.ledScene !== undefined) {\n      this.ledScene.remove();\n      this.ledScene = undefined;\n    }\n\n    const newRenderScene = initializeScene();\n    this.renderScene = newRenderScene;\n\n    if (this.renderPass !== undefined) {\n      this.renderPass.scene = this.renderScene;\n    }\n\n    newScene.loadModel().then(model => {\n      if (this.renderScene === newRenderScene) {\n        this.renderScene.add(model);\n      }\n    });\n\n    this.ledScene = new LedScene(newScene, this.renderScene, this.doRender);\n\n    // point at target\n    this.camera.position.copy(newScene.cameraStartPosition);\n    this.controls.target = newScene.cameraTarget;\n    this.controls.update();\n\n    if (this.#visualizationRunner) {\n      this.#visualizationRunner.simulationLedStrip = this.ledScene.ledStrip;\n    }\n  }\n\n  public set visualizationRunner(newVisualizationRunner: VisualizationRunner) {\n    if (newVisualizationRunner === this.#visualizationRunner) {\n      return;\n    }\n\n    if (this.#visualizationRunner) {\n      this.#visualizationRunner.simulationLedStrip = undefined;\n      this.#visualizationRunner = undefined;\n    }\n\n    this.#visualizationRunner = newVisualizationRunner;\n\n    if (this.ledScene) {\n      this.#visualizationRunner.simulationLedStrip = this.ledScene.ledStrip;\n    }\n  }\n\n  public destroy() {\n    if (\n      this.ledScene &&\n      this.#visualizationRunner &&\n      this.#visualizationRunner.simulationLedStrip === this.ledScene.ledStrip\n    ) {\n      this.#visualizationRunner.simulationLedStrip = undefined;\n    }\n\n    if (this.ledScene) {\n      this.ledScene.remove();\n      this.ledScene = undefined;\n    }\n\n    this.container = null;\n  }\n\n  public set active(value: boolean) {\n    this.#active = value;\n  }\n\n  public readonly updateSizes = () => {\n    const container = this.#container;\n    if (container === null) {\n      return;\n    }\n\n    const width = container.clientWidth;\n    const height = container.clientHeight;\n    const pixelRatio = window.devicePixelRatio || 1;\n\n    const speedupFactor = 0;\n    const effectivePixelRatio = pixelRatio / (1 + speedupFactor);\n\n    const { camera, bloomPass, /* renderPass, */ composer } = this;\n    camera.aspect = width / height;\n    camera.updateProjectionMatrix();\n    this.renderer.setSize(width, height);\n    this.renderer.setPixelRatio(effectivePixelRatio);\n\n    // composer.reset();\n    composer.setSize(width, height);\n    composer.setPixelRatio(effectivePixelRatio);\n    bloomPass.setSize(\n      width * effectivePixelRatio,\n      height * effectivePixelRatio\n    );\n\n    this.controls.update();\n  };\n}\n","import \"./SimulationViewport.scss\";\n\nimport * as React from \"react\";\n\nimport Scene from \"../scenes/Scene\";\nimport VisualizationRunner from \"../VisualizationRunner\";\nimport SimulationRenderer from \"./SimulationRenderer\";\n\ninterface Props {\n  scene: Scene;\n  visualizationRunner: VisualizationRunner;\n  frameDidRender: (renderMillis: number) => void;\n  enableBloom?: boolean;\n}\n\nexport default class SimulationViewport extends React.Component<Props> {\n  private readonly simulationRenderer = new SimulationRenderer();\n\n  public componentDidMount() {\n    super.componentDidMount?.();\n\n    window.addEventListener(\"resize\", this.updateSizes);\n    window.addEventListener(\"blur\", this.onWindowBlur);\n    window.addEventListener(\"focus\", this.onWindowFocus);\n  }\n\n  public componentWillUnmount() {\n    this.simulationRenderer.destroy();\n\n    window.removeEventListener(\"resize\", this.updateSizes);\n    window.removeEventListener(\"blur\", this.onWindowBlur);\n    window.removeEventListener(\"focus\", this.onWindowFocus);\n\n    super.componentWillUnmount?.();\n  }\n\n  public render() {\n    const { props, simulationRenderer } = this;\n\n    simulationRenderer.scene = props.scene;\n    simulationRenderer.visualizationRunner = props.visualizationRunner;\n    simulationRenderer.frameDidRender = props.frameDidRender;\n    simulationRenderer.enableBloom = props.enableBloom ?? false;\n\n    return <div className=\"SimulationViewport\" ref={this.setContainer} />;\n  }\n\n  private readonly setContainer = (container: HTMLDivElement | null) => {\n    this.simulationRenderer.container = container;\n  };\n\n  private updateSizes = () => this.simulationRenderer.updateSizes();\n  private onWindowBlur = () => (this.simulationRenderer.active = false);\n  private onWindowFocus = () => (this.simulationRenderer.active = true);\n}\n","import { BeatControllerType } from \"../RightSidebar\";\n\nconst LOCAL_STORAGE_PREFIX = \"simulatorSettings:\";\n\nexport interface Settings {\n  sceneName: string;\n  visualizationGroupName: string;\n  visualizationName: string;\n  audioInSourceId: string | null;\n  midiInputId: string | null;\n  midiControllerInputId: string | null;\n  midiOutputId: string | null;\n  simulationEnabled: boolean;\n  beatControllerType: BeatControllerType;\n}\n\nexport function get<K extends keyof Settings>(attrs: {\n  key: K;\n  defaultValue: Settings[K];\n  validateFunc?: (value: Settings[K]) => boolean;\n}): Settings[K] {\n  const json = window.localStorage.getItem(LOCAL_STORAGE_PREFIX + attrs.key) as\n    | string\n    | null;\n  const value = json === null ? undefined : JSON.parse(json);\n  if (\n    value === undefined ||\n    (attrs.validateFunc !== undefined && !attrs.validateFunc(value))\n  ) {\n    return attrs.defaultValue;\n  } else {\n    return value;\n  }\n}\n\nexport function set<K extends keyof Settings>(\n  key: K,\n  value: Settings[K]\n): void {\n  window.localStorage.setItem(\n    LOCAL_STORAGE_PREFIX + key,\n    JSON.stringify(value)\n  );\n}\n","import \"./TimeseriesView.scss\";\n\nimport * as React from \"react\";\n\nimport * as Colors from \"../portable/base/Colors\";\nimport * as TimeseriesData from \"../portable/base/TimeseriesData\";\n\ninterface Props {\n  height: number;\n}\n\nconst POINT_VALUE_HEIGHT = 2;\n\n// TODO could make this draw all the pixels and then scale so we don't miss values that get painted over\nclass HeatmapDrawHelper {\n  public drawHeatmapColumn(\n    targetContext: CanvasRenderingContext2D,\n    heatmap: TimeseriesData.HeatmapDef\n  ) {\n    const targetCanvas = targetContext.canvas;\n    const dy = targetCanvas.height / heatmap.values.length;\n    const baseColor = heatmap.baseColor;\n    heatmap.values.forEach((v, i) => {\n      targetContext.fillStyle = Colors.cssColor(Colors.multiply(baseColor, v));\n      targetContext.fillRect(\n        targetCanvas.width - 1,\n        (heatmap.values.length - 1 - i) * dy,\n        1,\n        dy\n      );\n    });\n  }\n}\n\nexport default class TimeseriesView extends React.PureComponent<Props, {}> {\n  private canvas: HTMLCanvasElement | null = null;\n  private canvasContext: CanvasRenderingContext2D | null = null;\n\n  private heatmapDrawHelper = new HeatmapDrawHelper();\n\n  public render() {\n    return (\n      <canvas\n        className=\"TimeseriesView\"\n        ref={this.setRef}\n        height={`${this.props.height}px`}\n        width=\"500px\"\n      />\n    );\n  }\n\n  private setRef = (canvas: HTMLCanvasElement | null) => {\n    this.canvas = canvas;\n\n    if (canvas === null) {\n      this.canvasContext = null;\n    } else {\n      const ctx = canvas.getContext(\"2d\");\n      if (ctx === null) {\n        throw new Error(\"couldn't get canvas context\");\n      }\n      this.canvasContext = ctx;\n    }\n  };\n\n  public displayData(\n    points: TimeseriesData.PointDef[],\n    heatmap?: TimeseriesData.HeatmapDef\n  ) {\n    const canvas = this.canvas;\n    const ctx = this.canvasContext;\n    if (canvas === null || ctx === null) {\n      return;\n    }\n\n    // shift everything left 1px\n    const imageData = ctx.getImageData(1, 0, canvas.width - 1, canvas.height);\n    ctx.putImageData(imageData, 0, 0);\n\n    if (heatmap !== undefined && heatmap.values.length > 0) {\n      this.heatmapDrawHelper.drawHeatmapColumn(ctx, heatmap);\n    } else {\n      ctx.fillStyle = \"black\";\n      ctx.fillRect(canvas.width - 1, 0, 1, canvas.height);\n    }\n\n    for (let i = points.length - 1; i >= 0; --i) {\n      const p = points[i];\n      if (!isNaN(p.value)) {\n        ctx.fillStyle = Colors.cssColor(p.color);\n        ctx.fillRect(\n          canvas.width - 1,\n          (1 - p.value) * (canvas.height - POINT_VALUE_HEIGHT),\n          1,\n          POINT_VALUE_HEIGHT\n        );\n      }\n    }\n  }\n}\n","import \"./VisualizerExtraDisplayContainer.scss\";\n\nimport * as React from \"react\";\n\ninterface Props {\n  element: HTMLElement;\n}\n\ninterface State {\n  currentElement: HTMLElement | null;\n  currentRef: HTMLDivElement | null;\n}\n\nexport default class VisualizerExtraDisplayContainer extends React.PureComponent<\n  Props,\n  State\n> {\n  public state: State = {\n    currentElement: null,\n    currentRef: null\n  };\n\n  public static getDerivedStateFromProps(\n    nextProps: Readonly<Props>,\n    prevState: State\n  ): Partial<State> {\n    const ref = prevState.currentRef;\n    if (ref !== null) {\n      if (nextProps.element !== prevState.currentElement) {\n        if (prevState.currentElement !== null) {\n          ref.removeChild(prevState.currentElement);\n        }\n        ref.appendChild(nextProps.element);\n      }\n    }\n\n    return {\n      currentElement: nextProps.element\n    };\n  }\n\n  public render() {\n    return (\n      <div className=\"VisualizerExtraDisplayContainer\" ref={this.setRef} />\n    );\n  }\n\n  private setRef = (newRef: HTMLDivElement | null) => {\n    if (this.state.currentRef !== null && this.state.currentElement !== null) {\n      this.state.currentRef.removeChild(this.state.currentElement);\n    }\n    if (newRef !== null && this.state.currentElement !== null) {\n      newRef.appendChild(this.props.element);\n    }\n    this.setState({ currentRef: newRef });\n  };\n}\n","import \"./TimingStatsView.scss\";\n\nimport * as React from \"react\";\n\nconst UPDATE_FREQ_MILLIS = 1000;\nconst TARGET_FPS = 60;\nconst TARGET_MILLIS = 1000 / TARGET_FPS;\n\ninterface Props {\n  getTimings: () => {\n    visualizationMillis: number;\n    fadeCandyMillis: number;\n    renderMillis: number;\n    framesRenderedSinceLastCall: number;\n  };\n  message2?: () => string;\n}\n\ninterface State {\n  message: string;\n}\n\nexport default class TimingStatsView extends React.Component<Props, State> {\n  public state: State = { message: \"\" };\n\n  private lastUpdateTime?: number;\n  private updateInterval?: NodeJS.Timeout;\n\n  public componentDidMount() {\n    super.componentDidMount?.();\n\n    this.updateInterval = setInterval(this.update, UPDATE_FREQ_MILLIS);\n    this.update();\n  }\n\n  public componentWillUnmount() {\n    if (super.componentWillUnmount) {\n      super.componentWillUnmount();\n    }\n\n    if (this.updateInterval) {\n      clearInterval(this.updateInterval);\n      this.updateInterval = undefined;\n    }\n  }\n\n  public render() {\n    const message2: string =\n      this.props.message2 === undefined ? \"\" : this.props.message2();\n\n    return (\n      <div className=\"TimingStatsView\">\n        {this.state.message}\n        {message2 === \"\" ? null : <div>{message2}</div>}\n      </div>\n    );\n  }\n\n  private update = () => {\n    const timings = this.props.getTimings();\n\n    const now = performance.now();\n    const timeElapsed = this.lastUpdateTime ? now - this.lastUpdateTime : 0;\n    const fps = (timings.framesRenderedSinceLastCall / timeElapsed) * 1000;\n\n    const vLoad = timings.visualizationMillis / TARGET_MILLIS;\n    const fLoad = timings.fadeCandyMillis / TARGET_MILLIS;\n    const rLoad = timings.renderMillis / TARGET_MILLIS;\n    const load = vLoad + fLoad + rLoad;\n\n    this.setState({\n      message: [\n        `${Math.round(fps)} fps`,\n        `v=${Math.round(vLoad * 100)}%`,\n        `f=${Math.round(fLoad * 100)}%`,\n        `r=${Math.round(rLoad * 100)}%`,\n        `t=${Math.round(load * 100)}%`\n      ].join(\" / \")\n    });\n    this.lastUpdateTime = now;\n  };\n}\n","import FadecandyLedSender from \"./hardware/FadecandyLedSender\";\nimport BeatController from \"./portable/base/BeatController\";\nimport * as Colors from \"./portable/base/Colors\";\nimport ControllerState from \"./portable/base/ControllerState\";\nimport FixedArray from \"./portable/base/FixedArray\";\nimport PianoEvent from \"./portable/base/PianoEvent\";\nimport * as Visualization from \"./portable/base/Visualization\";\nimport * as PianoHelpers from \"./portable/PianoHelpers\";\nimport { SendableLedStrip } from \"./portable/SendableLedStrip\";\nimport { VisualizationRegistry } from \"./portable/VisualizationRegistry\";\nimport { SignalsHelper } from \"./portable/visualizationUtils/SignalsHelper\";\nimport Scene from \"./scenes/Scene\";\nimport { MovingAverageHelper, bracket, valueOrDefault } from \"./util/Utils\";\n\nclass MyFrameContext implements Visualization.FrameContext {\n  public elapsedMillis: number;\n  public elapsedSeconds: number;\n  public pianoState: PianoHelpers.VisualizationStateHelper;\n  public frameHeatmapValues: number[] | undefined;\n  public beatController: BeatController;\n\n  constructor() {\n    const UNSET = \"<unset>\" as any;\n    this.elapsedMillis = UNSET;\n    this.elapsedSeconds = UNSET;\n    this.beatController = UNSET;\n    this.pianoState = new PianoHelpers.VisualizationStateHelper();\n  }\n\n  public setFrameHeatmapValues(values: number[]) {\n    if (this.frameHeatmapValues === undefined) {\n      this.frameHeatmapValues = values;\n    } else {\n      throw new Error(\"frame heatmap values set multiple times\");\n    }\n  }\n\n  public startFrame() {\n    this.pianoState.startFrame();\n  }\n\n  public endFrame(elapsedSeconds: number, beatController: BeatController) {\n    this.elapsedMillis = elapsedSeconds * 1000;\n    this.elapsedSeconds = elapsedSeconds;\n    this.pianoState.endFrame();\n    this.frameHeatmapValues = undefined;\n    this.beatController = beatController;\n  }\n\n  public applyPianoEvent(event: PianoEvent) {\n    this.pianoState.applyEvent(event);\n  }\n}\n\nconst DEFAULT_COLOR_ORDER = [\n  Colors.WHITE,\n  Colors.BLUE,\n  Colors.RED,\n  Colors.YELLOW,\n  Colors.GREEN,\n  Colors.ORANGE,\n  Colors.CYAN,\n  Colors.PURPLE,\n  Colors.CHARTREUSE\n];\n\nclass TimeSeriesHelper {\n  private usedColors: Colors.Color[] = [];\n  public data: Visualization.TimeSeriesValue[] = [];\n\n  public createTimeSeries = (attrs?: { color?: Colors.Color }) => {\n    attrs = attrs || {};\n\n    let color: Colors.Color;\n    if (attrs.color === undefined) {\n      color = this.nextDefaultColor();\n    } else {\n      color = attrs.color;\n    }\n    this.usedColors.push(color);\n\n    const data = new Visualization.TimeSeriesValue(color);\n    this.data.push(data);\n\n    return data;\n  };\n\n  private nextDefaultColor(): Colors.Color {\n    const color = DEFAULT_COLOR_ORDER.find(c => !this.usedColors.includes(c));\n    if (color === undefined) {\n      throw new Error(\"all default colors were used\");\n    }\n    return color;\n  }\n\n  public reset() {\n    this.usedColors = [];\n    this.data = [];\n  }\n}\n\nclass MyDialControl implements Visualization.DialControl {\n  private readonly controllerState: ControllerState;\n  private readonly index: number;\n  private readonly minValue: number;\n  private readonly maxValue: number;\n\n  constructor(attrs: {\n    controllerState: ControllerState;\n    dialNumber: number;\n    minValue: number;\n    maxValue: number;\n  }) {\n    const { dialNumber, controllerState } = attrs;\n    this.controllerState = controllerState;\n    this.index = dialNumber - 1;\n    if (\n      this.index < 0 ||\n      this.index >= this.controllerState.dialValues.length\n    ) {\n      throw new Error(\"invalid dial number: \" + attrs.dialNumber);\n    }\n    this.minValue = attrs.minValue;\n    this.maxValue = attrs.maxValue;\n  }\n\n  public get value() {\n    return (\n      this.controllerState.dialValues[this.index] *\n        (this.maxValue - this.minValue) +\n      this.minValue\n    );\n  }\n\n  public set value(value: number) {\n    value = bracket(this.minValue, this.maxValue, value);\n    this.controllerState.dialValues[this.index] =\n      (value - this.minValue) / (this.maxValue - this.minValue);\n  }\n}\n\nclass MyButtonControl implements Visualization.ButtonControl {\n  private readonly controllerState: ControllerState;\n  private readonly index: number;\n\n  constructor(attrs: {\n    controllerState: ControllerState;\n    buttonNumber: number;\n  }) {\n    const { buttonNumber, controllerState } = attrs;\n    this.controllerState = controllerState;\n    this.index = buttonNumber - 1;\n    if (\n      this.index < 0 ||\n      this.index >= this.controllerState.buttonStates.length\n    ) {\n      throw new Error(\"invalid button number: \" + attrs.buttonNumber);\n    }\n  }\n\n  public get value() {\n    return this.controllerState.buttonStates[this.index];\n  }\n\n  public get pressedSinceLastFrame() {\n    if (this.controllerState.pressesSinceLastFrame.length > 0) {\n      console.log(this.controllerState.pressesSinceLastFrame);\n    }\n    return this.controllerState.pressesSinceLastFrame.includes(this.index);\n  }\n\n  public get releasedSinceLastFrame() {\n    return this.controllerState.releasesSinceLastFrame.includes(this.index);\n  }\n}\n\nconst ASSIGNABLE_DIAL_NUMBERS = [1, 2, 3, 4, 5, 6, 7];\nconst ASSIGNABLE_BUTTON_NUMBERS = [1, 2, 3, 4, 5, 6, 7, 8];\n\nclass ControllerStateHelper {\n  private readonly controllerState: ControllerState;\n  private readonly forceUpdateUI: () => void;\n  private usedDialNumbers: number[];\n  private usedButtonNumbers: number[];\n\n  constructor(controllerState: ControllerState, forceUpdateUI: () => void) {\n    this.controllerState = controllerState;\n    this.usedButtonNumbers = [];\n    this.usedDialNumbers = [];\n    this.forceUpdateUI = forceUpdateUI;\n  }\n\n  public reset() {\n    this.usedButtonNumbers = [];\n    this.usedDialNumbers = [];\n  }\n\n  public createDialControl = (attrs?: {\n    dialNumber?: number;\n    initialValue?: number;\n    minValue?: number;\n    maxValue?: number;\n  }): Visualization.DialControl => {\n    attrs = attrs || {};\n\n    let dialNumber: number;\n    if (attrs.dialNumber === undefined) {\n      dialNumber = this.nextDialNumber();\n    } else {\n      dialNumber = attrs.dialNumber;\n    }\n    this.usedDialNumbers.push(dialNumber);\n\n    const minValue = valueOrDefault(attrs.minValue, 0);\n    const maxValue = valueOrDefault(attrs.maxValue, 1);\n    if (maxValue <= minValue) {\n      throw new Error(\"dial minValue must be less than maxValue\");\n    }\n\n    const helper = new MyDialControl({\n      controllerState: this.controllerState,\n      dialNumber: dialNumber,\n      minValue: minValue,\n      maxValue: maxValue\n    });\n\n    helper.value = valueOrDefault(attrs.initialValue, minValue);\n\n    this.forceUpdateUI();\n\n    return helper;\n  };\n\n  private nextDialNumber(): number {\n    const dialNumber = ASSIGNABLE_DIAL_NUMBERS.find(\n      n => !this.usedDialNumbers.includes(n)\n    );\n    if (dialNumber === undefined) {\n      throw new Error(\"all dials were used\");\n    }\n    return dialNumber;\n  }\n\n  public createButtonControl = (attrs?: {\n    buttonNumber?: number;\n  }): Visualization.ButtonControl => {\n    attrs = attrs || {};\n\n    let buttonNumber: number;\n    if (attrs.buttonNumber === undefined) {\n      buttonNumber = this.nextButtonNumber();\n    } else {\n      buttonNumber = attrs.buttonNumber;\n    }\n    this.usedButtonNumbers.push(buttonNumber);\n\n    return new MyButtonControl({\n      controllerState: this.controllerState,\n      buttonNumber: buttonNumber\n    });\n  };\n\n  private nextButtonNumber(): number {\n    const buttonNumber = ASSIGNABLE_BUTTON_NUMBERS.find(\n      n => !this.usedButtonNumbers.includes(n)\n    );\n    if (buttonNumber === undefined) {\n      throw new Error(\"all buttons were used\");\n    }\n    return buttonNumber;\n  }\n}\n\nexport default class VisualizationRunner {\n  public readonly visualization: Visualization.default;\n  private readonly timingHelper: MovingAverageHelper;\n  private lastRenderTime: number = 0;\n  public hardwareLedSender?: FadecandyLedSender;\n  public simulationLedStrip?: SendableLedStrip;\n  private adjustedLeds: FixedArray<Colors.Color>;\n  private readonly frameContext: MyFrameContext;\n  private readonly timeSeriesHelper: TimeSeriesHelper;\n  private readonly brightnessDial: Visualization.DialControl;\n  private readonly derezDial: Visualization.DialControl;\n  private readonly controllerState: ControllerState;\n  private readonly signalsHelper: SignalsHelper;\n\n  constructor(attrs: {\n    visualizationRegistry: VisualizationRegistry;\n    visualizationName: string;\n    scene: Scene;\n    audioSource: AudioNode;\n    setVisualizerExtraDisplay: (element: HTMLElement | null) => void;\n    controllerState: ControllerState;\n    forceUpdateUI: () => void;\n  }) {\n    this.timeSeriesHelper = new TimeSeriesHelper();\n    this.controllerState = attrs.controllerState;\n    const controllerStateHelper = new ControllerStateHelper(\n      attrs.controllerState,\n      attrs.forceUpdateUI\n    );\n    this.brightnessDial = controllerStateHelper.createDialControl({\n      dialNumber: 8,\n      initialValue: attrs.controllerState.dialValues[7]\n    });\n    this.derezDial = controllerStateHelper.createDialControl({\n      dialNumber: 7,\n      initialValue: attrs.controllerState.dialValues[6]\n    });\n    this.signalsHelper = new SignalsHelper(attrs.audioSource);\n    const visualizationConfig: Visualization.Config = {\n      scene: attrs.scene,\n      audioSource: attrs.audioSource,\n      signals: this.signalsHelper,\n      setExtraDisplay: attrs.setVisualizerExtraDisplay,\n      createTimeSeries: this.timeSeriesHelper.createTimeSeries,\n      createButtonControl: controllerStateHelper.createButtonControl,\n      createDialControl: controllerStateHelper.createDialControl,\n      createEasyTimeSeriesSet: () => {\n        return {\n          white: this.timeSeriesHelper.createTimeSeries({\n            color: Colors.WHITE\n          }),\n          blue: this.timeSeriesHelper.createTimeSeries({ color: Colors.BLUE }),\n          red: this.timeSeriesHelper.createTimeSeries({ color: Colors.RED }),\n          yellow: this.timeSeriesHelper.createTimeSeries({\n            color: Colors.YELLOW\n          }),\n          green: this.timeSeriesHelper.createTimeSeries({\n            color: Colors.GREEN\n          }),\n          orange: this.timeSeriesHelper.createTimeSeries({\n            color: Colors.ORANGE\n          })\n        };\n      },\n      reset: () => {\n        this.timeSeriesHelper.reset();\n        controllerStateHelper.reset();\n        this.controllerState.reset();\n        attrs.setVisualizerExtraDisplay(null);\n      }\n    };\n    this.visualization = attrs.visualizationRegistry.createVisualization(\n      attrs.visualizationName,\n      visualizationConfig\n    );\n    this.timingHelper = new MovingAverageHelper(20);\n    this.adjustedLeds = this.visualization.ledColors.map(_ => Colors.BLACK);\n    this.frameContext = new MyFrameContext();\n  }\n\n  public renderFrame(beatController: BeatController) {\n    const startTime = performance.now();\n    if (this.lastRenderTime === 0) {\n      this.lastRenderTime = startTime - 1000 / 60;\n    }\n\n    // collect state\n    const elapsedSeconds = (startTime - this.lastRenderTime) / 1000;\n    this.frameContext.endFrame(elapsedSeconds, beatController);\n\n    // render into the LED strip\n    this.signalsHelper.update(elapsedSeconds * 1000, beatController);\n    this.visualization.render(this.frameContext);\n    const frameHeatmapValues = this.frameContext.frameHeatmapValues || [];\n\n    this.controllerState.startFrame();\n    this.frameContext.startFrame();\n    this.lastRenderTime = startTime;\n\n    // timing\n    const visTimeMillis = performance.now() - startTime;\n    this.timingHelper.addValue(visTimeMillis);\n\n    // send\n    this.sendToStrips(this.brightnessDial.value, this.derezDial.value);\n\n    return {\n      frameHeatmapValues: frameHeatmapValues,\n      frameTimeseriesPoints: this.timeSeriesHelper.data\n    };\n  }\n\n  public onPianoEvent(event: PianoEvent) {\n    this.frameContext.applyPianoEvent(event);\n  }\n\n  public get averageRenderTime() {\n    return this.timingHelper.movingAverage;\n  }\n\n  private sendToStrips(multiplier: number, derez: number) {\n    this.visualization.ledColors.forEach((color, i) => {\n      if (Math.random() > derez) {\n        this.adjustedLeds.set(i, Colors.multiply(color, multiplier));\n      }\n    });\n\n    if (this.simulationLedStrip !== undefined) {\n      const strip = this.simulationLedStrip;\n      this.adjustedLeds.forEach((color, i) => strip.setColor(i, color));\n      strip.send();\n    }\n\n    if (this.hardwareLedSender !== undefined) {\n      this.hardwareLedSender.send(this.adjustedLeds);\n    }\n  }\n}\n","import \"./LedStudioRoot.scss\";\n\nimport * as React from \"react\";\n\nimport * as AudioIn from \"./audioIn/AudioIn\";\nimport AbletonLinkConnect from \"./beat/AbletonLinkConnect\";\nimport ManualBeatController from \"./beat/ManualBeatController\";\nimport BeatControlView from \"./BeatControlView\";\nimport ControlsView from \"./ControlsView\";\nimport FadecandyClient from \"./hardware/FadecandyClient\";\nimport FadecandyLedSender from \"./hardware/FadecandyLedSender\";\nimport MidiEvent from \"./piano/MidiEvent\";\nimport MidiEventListener, {\n  MidiEventEmitter,\n  QueuedMidiEventEmitter\n} from \"./piano/MidiEventListener\";\nimport PianoView from \"./PianoView\";\nimport BeatController from \"./portable/base/BeatController\";\nimport * as Colors from \"./portable/base/Colors\";\nimport ControllerState from \"./portable/base/ControllerState\";\nimport * as PianoHelpers from \"./portable/PianoHelpers\";\nimport { VisualizationRegistry } from \"./portable/VisualizationRegistry\";\nimport RightSidebarComponent, * as RightSidebar from \"./RightSidebar\";\nimport Scene from \"./scenes/Scene\";\nimport SimulationViewport from \"./simulator/SimulationViewport\";\nimport * as SimulatorStickySettings from \"./simulator/SimulatorStickySettings\";\nimport TimeseriesView from \"./simulator/TimeseriesView\";\nimport VisualizerExtraDisplayContainer from \"./simulator/VisualizerExtraDisplayContainer\";\nimport TimingStatsView from \"./TimingStatsView\";\nimport {\n  MovingAverageHelper,\n  first,\n  firstKey,\n  valueOrThrow\n} from \"./util/Utils\";\nimport VisualizationRunner from \"./VisualizationRunner\";\n\ntype MidiState =\n  | {\n      status: \"initializing\";\n    }\n  | {\n      status: \"loaded\";\n      webMidi: WebMidi.MIDIAccess;\n    }\n  | {\n      status: \"failed\";\n      midiFailureReason: any;\n    };\n\nconst TARGET_FPS = 60;\nconst TARGET_FRAME_MILLIS = 1000 / TARGET_FPS;\n\ninterface Props {\n  scenes: Map<string, Scene>;\n  visualizations: VisualizationRegistry;\n}\n\ninterface InnerProps extends Props {\n  sceneNames: string[];\n}\n\ninterface State {\n  scene: Scene;\n  visualizationGroupName: string;\n  visualizationName: string;\n  visualizationRunner: VisualizationRunner;\n  midiState: Readonly<MidiState>;\n  midiInput: WebMidi.MIDIInput | null;\n  midiControllerInput: WebMidi.MIDIInput | null;\n  midiOutput: WebMidi.MIDIOutput | null;\n  midiInputs: WebMidi.MIDIInput[];\n  midiOutputs: WebMidi.MIDIOutput[];\n  audioInputs: AudioIn.InputDeviceInfo[] | undefined;\n  selectedAudioInput: AudioIn.InputDeviceInfo | null;\n  audioSource: AudioNode | null;\n  visualizerExtraDisplay: HTMLElement | null;\n  simulationEnabled: boolean;\n  beatController: BeatController;\n}\n\ntype AllActions = RightSidebar.Actions;\n\nfunction tryGetById<T extends { id: string }>(\n  objs: ReadonlyArray<T>,\n  id: string | null\n): T | null | undefined {\n  if (id === null) {\n    return null;\n  }\n\n  return objs.find(obj => obj.id === id);\n}\n\nfunction createIsValidIdFunc<T extends { id: string }>(objs: ReadonlyArray<T>) {\n  return (id: string | null | boolean) =>\n    typeof id === \"string\" && tryGetById(objs, id) !== undefined;\n}\n\nfunction getById<T extends { id: string }>(\n  objs: ReadonlyArray<T>,\n  id: string | null\n): T | null {\n  const obj = tryGetById(objs, id);\n  if (obj === undefined) {\n    throw new Error(`can't find by id: ${id}`);\n  }\n  return obj;\n}\n\nfunction getByStickyIdKeyOrFirst<T extends { id: string }>(\n  objs: ReadonlyArray<T>,\n  key: keyof SimulatorStickySettings.Settings\n): T | null {\n  const idOrNull = SimulatorStickySettings.get({\n    key: key,\n    defaultValue: objs.length === 0 ? null : objs[0].id,\n    validateFunc: createIsValidIdFunc(objs)\n  });\n\n  if (typeof idOrNull !== \"string\") {\n    return null;\n  }\n\n  return getById(objs, idOrNull);\n}\n\nfunction createDummyAudioNode() {\n  const ctx = new AudioContext();\n  return ctx.createGain();\n}\n\nclass LedStudioRoot extends React.Component<InnerProps, State> {\n  private readonly midiEventEmitter = new QueuedMidiEventEmitter();\n  private readonly midiControllerEventEmitter = new MidiEventEmitter();\n  private readonly fadecandyClient = new FadecandyClient();\n  public readonly audioIn = new AudioIn.default(\n    (newAudioSource: AudioNode | null) => {\n      this.configureVisualization(\n        this.state.visualizationName,\n        this.state.scene,\n        newAudioSource\n      );\n    }\n  );\n  private readonly controllerState = new ControllerState();\n\n  private _isMounted = false;\n\n  public componentDidMount() {\n    super.componentDidMount?.();\n\n    if (super.componentWillMount) {\n      super.componentWillMount();\n    }\n\n    this.audioIn.addEventListener(\n      \"deviceListChanged\",\n      this.updateAudioInDevices\n    );\n\n    if (navigator.requestMIDIAccess) {\n      navigator\n        .requestMIDIAccess()\n        .then(webMidi => {\n          this.setState({\n            midiState: {\n              status: \"loaded\",\n              webMidi: webMidi\n            }\n          });\n\n          const inputs = Array.from(webMidi.inputs.values());\n          const defaultInput = getByStickyIdKeyOrFirst(inputs, \"midiInputId\");\n          this.setMidiInput(defaultInput);\n          const defaultControllerInput = getByStickyIdKeyOrFirst(\n            inputs,\n            \"midiControllerInputId\"\n          );\n          this.setMidiControllerInput(defaultControllerInput);\n\n          const outputs = Array.from(webMidi.outputs.values());\n          const defaultOutput = getByStickyIdKeyOrFirst(\n            outputs,\n            \"midiOutputId\"\n          );\n          this.setMidiOutput(defaultOutput);\n\n          this.updateMidiDevices();\n\n          webMidi.addEventListener(\"statechange\", this.updateMidiDevices);\n        })\n        .catch(reason => {\n          console.log(\"exception requesting MIDI access\", reason);\n          this.setState({\n            midiState: {\n              status: \"failed\",\n              midiFailureReason: reason\n            }\n          });\n        });\n    } else {\n      this.setState({\n        midiState: {\n          status: \"failed\",\n          midiFailureReason: \"MIDI access not supported on this browser\"\n        }\n      });\n    }\n\n    this.midiEventEmitter.addListener(this.myMidiListener);\n\n    this.startAnimation();\n\n    this._isMounted = true;\n  }\n\n  public componentWillUnmount() {\n    this._isMounted = false;\n\n    this.stopAnimation();\n\n    const { midiState } = this.state;\n    if (midiState.status === \"loaded\") {\n      midiState.webMidi.removeEventListener(\n        \"statechange\",\n        this.updateMidiDevices\n      );\n    }\n    this.midiEventEmitter.removeListener(this.myMidiListener);\n\n    this.audioIn.removeEventListener(\n      \"deviceListChanged\",\n      this.updateAudioInDevices\n    );\n\n    super.componentWillUnmount?.();\n  }\n\n  public render() {\n    return (\n      <div className=\"LedStudioRoot\">\n        <div className=\"LedStudioRoot-viewportGroup\">\n          <div className=\"LedStudioRoot-viewportContainer\">\n            {this.state.simulationEnabled ? (\n              <SimulationViewport\n                scene={this.state.scene}\n                visualizationRunner={this.state.visualizationRunner}\n                frameDidRender={this.simulationFrameDidRender}\n                enableBloom={true}\n              />\n            ) : null}\n            {this.state.visualizerExtraDisplay === null ? null : (\n              <VisualizerExtraDisplayContainer\n                element={this.state.visualizerExtraDisplay}\n              />\n            )}\n            {this.renderSimulationToggleSwitch()}\n            <TimingStatsView\n              getTimings={this.getTimings}\n              message2={this.getMessage2}\n            />\n          </div>\n          <div className=\"LedStudioRoot-audioInViewContainer\">\n            <TimeseriesView ref={this.setTimeseriesViewRef} height={64} />\n          </div>\n          <div className=\"LedStudioRoot-controllerStateContainer\">\n            <PianoView midiEventEmitter={this.midiEventEmitter} />\n            <ControlsView\n              controllerState={this.controllerState}\n              ref={this.setControlsViewRef}\n            />\n            <BeatControlView beatController={this.state.beatController} />\n          </div>\n        </div>\n        <div className=\"LedStudioRoot-sidebarContainer\">\n          {this.renderSidebarContents()}\n        </div>\n      </div>\n    );\n  }\n\n  private renderSimulationToggleSwitch() {\n    return (\n      <div\n        className={\n          \"LedStudioRoot-simulationToggleSwitch\" +\n          (this.state.simulationEnabled ? \" enabled\" : \"\")\n        }\n        onClick={this.handleClickSimulationToggleSwitch}\n      >\n        {this.state.simulationEnabled\n          ? \"Disable simulation\"\n          : \"Simulation is disabled — click here to enable\"}\n      </div>\n    );\n  }\n\n  private handleClickSimulationToggleSwitch = () => {\n    const newValue = !this.state.simulationEnabled;\n    SimulatorStickySettings.set(\"simulationEnabled\", newValue);\n    this.setState({ simulationEnabled: newValue });\n  };\n\n  private renderSidebarContents() {\n    switch (this.state.midiState.status) {\n      case \"initializing\":\n        return \"Initializing...\";\n\n      case \"loaded\":\n        const beatControllerType =\n          this.state.beatController instanceof ManualBeatController\n            ? \"manual\"\n            : \"ableton\";\n        const { visualizationGroupName } = this.state;\n        return (\n          <RightSidebarComponent\n            actions={this.actionManager}\n            sceneNames={this.props.sceneNames}\n            selectedSceneName={this.state.scene.name}\n            visualizationGroupNames={this.props.visualizations.groupNames}\n            selectedVisualizationGroupName={visualizationGroupName}\n            visualizationNames={this.props.visualizations.visualizationNamesInGroup(\n              visualizationGroupName\n            )}\n            selectedVisualizationName={this.state.visualizationName}\n            midiInputs={this.state.midiInputs}\n            selectedPianoMidiInput={this.state.midiInput}\n            selectedControllerMidiInput={this.state.midiControllerInput}\n            midiOutputs={this.state.midiOutputs}\n            selectedPianoMidiThru={this.state.midiOutput}\n            midiEventEmitters={[\n              this.midiEventEmitter,\n              this.midiControllerEventEmitter\n            ]}\n            audioInputs={this.state.audioInputs}\n            selectedAudioInput={this.state.selectedAudioInput}\n            selectedBeatControllerType={beatControllerType}\n          />\n        );\n\n      case \"failed\":\n        return `error: ${this.state.midiState.midiFailureReason}`;\n    }\n  }\n\n  private getMessage2 = () => this.state.scene.displayMessage;\n\n  private setMidiInput = (newValue: WebMidi.MIDIInput | null) => {\n    if (newValue !== this.state.midiInput) {\n      if (this.state.midiInput) {\n        this.state.midiInput.removeEventListener(\n          \"midimessage\",\n          this.onMidiInputMessage as EventListener\n        );\n        this.resetAllKeys();\n      }\n      if (newValue) {\n        newValue.addEventListener(\"midimessage\", this.onMidiInputMessage);\n      }\n      this.setState({ midiInput: newValue });\n      SimulatorStickySettings.set(\n        \"midiInputId\",\n        newValue === null ? null : newValue.id\n      );\n    }\n  };\n\n  private setMidiControllerInput = (newValue: WebMidi.MIDIInput | null) => {\n    if (newValue !== this.state.midiControllerInput) {\n      if (this.state.midiControllerInput) {\n        this.state.midiControllerInput.removeEventListener(\n          \"midimessage\",\n          this.onMidiControllerInputMessage as EventListener\n        );\n        this.resetAllKeys();\n      }\n      if (newValue) {\n        newValue.addEventListener(\n          \"midimessage\",\n          this.onMidiControllerInputMessage\n        );\n      }\n      this.setState({\n        midiControllerInput: newValue\n      });\n      SimulatorStickySettings.set(\n        \"midiControllerInputId\",\n        newValue === null ? null : newValue.id\n      );\n    }\n  };\n\n  private setMidiOutput = (newValue: WebMidi.MIDIOutput | null) => {\n    if (newValue !== this.state.midiOutput) {\n      this.setState({ midiOutput: newValue });\n      SimulatorStickySettings.set(\n        \"midiOutputId\",\n        newValue === null ? null : newValue.id\n      );\n    }\n  };\n\n  private updateMidiDevices = () => {\n    const { midiInput, midiOutput, midiState, midiControllerInput } =\n      this.state;\n    if (midiState.status !== \"loaded\") {\n      return;\n    }\n\n    const { webMidi } = midiState;\n    if (midiInput !== null) {\n      this.setMidiInput(webMidi.inputs.get(midiInput.id) || null);\n    }\n    if (midiControllerInput !== null) {\n      this.setMidiControllerInput(\n        webMidi.inputs.get(midiControllerInput.id) || null\n      );\n    }\n    if (midiOutput !== null) {\n      this.setMidiOutput(webMidi.outputs.get(midiOutput.id) || null);\n    }\n\n    this.setState({\n      midiInputs: Array.from(webMidi.inputs.values()),\n      midiOutputs: Array.from(webMidi.outputs.values())\n    });\n  };\n\n  private createBeatControllerType = (\n    newValue: RightSidebar.BeatControllerType\n  ): BeatController => {\n    switch (newValue) {\n      case \"manual\":\n        return new ManualBeatController();\n\n      case \"ableton\":\n        return new AbletonLinkConnect();\n\n      default:\n        throw new Error(`unsupported beat controller type: ${newValue}`);\n    }\n  };\n\n  private configureVisualization(\n    visualizationName: string,\n    scene: Scene,\n    audioSource: AudioNode | null,\n    doNotSetState?: boolean\n  ) {\n    let isInConfigure = true;\n    let newVisualizerExtraDisplay: HTMLElement | null = null;\n    const setVisualizerExtraDisplay = (element: HTMLElement | null) => {\n      if (isInConfigure) {\n        newVisualizerExtraDisplay = element;\n      } else {\n        this.setState({ visualizerExtraDisplay: element });\n      }\n    };\n    this.controllerState.reset();\n    const runner = new VisualizationRunner({\n      visualizationRegistry: this.props.visualizations,\n      visualizationName,\n      scene,\n      audioSource: audioSource || createDummyAudioNode(),\n      setVisualizerExtraDisplay,\n      controllerState: this.controllerState,\n      forceUpdateUI: () => {\n        if (this._isMounted) {\n          this.forceUpdate();\n        }\n      }\n    });\n    runner.hardwareLedSender = new FadecandyLedSender(\n      this.fadecandyClient,\n      scene.ledMetadatas\n    );\n    const values = {\n      visualizationRunner: runner,\n      visualizationName: visualizationName,\n      scene: scene,\n      audioSource: audioSource,\n      visualizerExtraDisplay: newVisualizerExtraDisplay\n    };\n    isInConfigure = false;\n    if (!doNotSetState) {\n      this.setState(values);\n    }\n    return values;\n  }\n\n  private setSelectedVisualizationName = (newValue: string) => {\n    if (this.state.visualizationName !== newValue) {\n      this.configureVisualization(\n        newValue,\n        this.state.scene,\n        this.state.audioSource\n      );\n      SimulatorStickySettings.set(\"visualizationName\", newValue);\n    }\n  };\n\n  private actionManager: AllActions = {\n    setPianoMidiInput: this.setMidiInput,\n    setControllerMidiInput: this.setMidiControllerInput,\n    setPianoMidiThru: this.setMidiOutput,\n    setSelectedSceneName: (name: string) => {\n      if (name !== this.state.scene.name) {\n        const scene = valueOrThrow(this.props.scenes.get(name));\n        this.configureVisualization(\n          this.state.visualizationName,\n          scene,\n          this.state.audioSource\n        );\n        SimulatorStickySettings.set(\"sceneName\", name);\n      }\n    },\n    setSelectedVisualizationGroupName: (newValue: string) => {\n      if (this.state.visualizationGroupName !== newValue) {\n        this.setState({ visualizationGroupName: newValue });\n        const visualizationName = first(\n          this.props.visualizations.visualizationNamesInGroup(newValue)\n        );\n        this.setSelectedVisualizationName(visualizationName);\n        SimulatorStickySettings.set(\"visualizationGroupName\", newValue);\n      }\n    },\n    setSelectedVisualizationName: this.setSelectedVisualizationName,\n    setAudioInput: (newValue: AudioIn.InputDeviceInfo | null) => {\n      this.setState({ selectedAudioInput: newValue });\n      const newId = newValue === null ? null : newValue.id;\n      this.audioIn.setCurrentDeviceId(newId);\n      SimulatorStickySettings.set(\"audioInSourceId\", newId);\n    },\n    setBeatControllerType: (newValue: RightSidebar.BeatControllerType) => {\n      this.setState({\n        beatController: this.createBeatControllerType(newValue)\n      });\n      SimulatorStickySettings.set(\"beatControllerType\", newValue);\n    }\n  };\n\n  private onMidiInputMessage = (message: WebMidi.MIDIMessageEvent) => {\n    const event = new MidiEvent(message.data);\n    this.midiEventEmitter.fire(event);\n\n    if (\n      this.state.midiOutput !== null &&\n      this.state.midiInput !== null &&\n      this.state.midiOutput.name !== this.state.midiInput.name\n    ) {\n      this.state.midiOutput.send(message.data);\n    }\n  };\n\n  private onMidiControllerInputMessage = (\n    message: WebMidi.MIDIMessageEvent\n  ) => {\n    const event = new MidiEvent(message.data);\n    this.midiControllerEventEmitter.fire(event);\n    this.controllerState.handleEvent(event);\n    this.updateControlsView();\n  };\n\n  private resetAllKeys = () => {\n    this.midiEventEmitter.reset();\n    PianoHelpers.resetAllKeysMidiDatas().forEach(data => {\n      this.midiEventEmitter.fire(\n        new MidiEvent(data, /*suppressDisplay=*/ true)\n      );\n    });\n  };\n\n  private myMidiListener: MidiEventListener = {\n    onMidiEvent: (event: MidiEvent) => {\n      const pianoEvent = event.pianoEvent;\n      if (pianoEvent !== null) {\n        this.state.visualizationRunner.onPianoEvent(pianoEvent);\n      }\n    }\n  };\n\n  private animating = false;\n  private startAnimation() {\n    if (!this.animating) {\n      this.animating = true;\n      this.scheduleNextAnimationFrame();\n    }\n  }\n  private stopAnimation() {\n    this.animating = false;\n  }\n\n  private prevAnimationStartTimeTarget = 0;\n  private nextAnimationTimeout?: NodeJS.Timeout;\n\n  private scheduleNextAnimationFrame = () => {\n    if (this.nextAnimationTimeout !== undefined) {\n      clearTimeout(this.nextAnimationTimeout);\n      this.nextAnimationTimeout = undefined;\n    }\n\n    const now = performance.now();\n    const nextAnimationStartTime = Math.max(\n      now,\n      this.prevAnimationStartTimeTarget + TARGET_FRAME_MILLIS\n    );\n    this.nextAnimationTimeout = setTimeout(\n      this.animate,\n      nextAnimationStartTime - now\n    );\n    this.prevAnimationStartTimeTarget = nextAnimationStartTime;\n  };\n\n  private animate = () => {\n    if (this.animating) {\n      this.scheduleNextAnimationFrame();\n\n      const { frameHeatmapValues, frameTimeseriesPoints } =\n        this.state.visualizationRunner.renderFrame(this.state.beatController);\n      ++this.framesRenderedSinceLastTimingsCall;\n\n      if (this.timeseriesViewRef) {\n        this.timeseriesViewRef.displayData(frameTimeseriesPoints, {\n          baseColor: Colors.RED,\n          values: frameHeatmapValues\n        });\n      }\n    }\n  };\n\n  private getTimings = () => {\n    const fadecandyLedSender = this.state.visualizationRunner.hardwareLedSender;\n    const result = {\n      visualizationMillis: this.state.visualizationRunner.averageRenderTime,\n      fadeCandyMillis:\n        fadecandyLedSender === undefined\n          ? 0\n          : fadecandyLedSender.averageSendTime,\n      renderMillis: this.state.simulationEnabled\n        ? this.renderTimingHelper.movingAverage\n        : 0,\n      framesRenderedSinceLastCall: this.framesRenderedSinceLastTimingsCall\n    };\n    this.framesRenderedSinceLastTimingsCall = 0;\n    return result;\n  };\n\n  private readonly renderTimingHelper: MovingAverageHelper =\n    new MovingAverageHelper(20);\n  private framesRenderedSinceLastTimingsCall = 0;\n\n  private simulationFrameDidRender = (renderMillis: number) => {\n    this.renderTimingHelper.addValue(renderMillis);\n  };\n\n  private updateAudioInDevices = () => {\n    const isInitialization = this.state.audioInputs === undefined;\n    this.setState({\n      audioInputs: this.audioIn.inputDevices\n    });\n\n    if (isInitialization) {\n      this.actionManager.setAudioInput(this.initialAudioInDevice());\n    }\n  };\n\n  private timeseriesViewRef: TimeseriesView | undefined = undefined;\n  private setTimeseriesViewRef = (newRef: TimeseriesView) =>\n    (this.timeseriesViewRef = newRef);\n\n  private controlsViewRef: ControlsView | null = null;\n  private setControlsViewRef = (newRef: ControlsView | null) =>\n    (this.controlsViewRef = newRef);\n  private updateControlsView = () => {\n    if (this.controlsViewRef !== null) {\n      this.controlsViewRef.onStateChange();\n    }\n  };\n\n  private initialVisualizationGroupName(): string {\n    return SimulatorStickySettings.get({\n      key: \"visualizationGroupName\",\n      defaultValue: first(this.props.visualizations.groupNames),\n      validateFunc: v => this.props.visualizations.groupNames.includes(v)\n    });\n  }\n\n  private initialVisualizationName(): string {\n    const groupName = this.initialVisualizationGroupName();\n    const defaultVisualizationName = first(\n      this.props.visualizations.visualizationNamesInGroup(groupName)\n    );\n\n    return SimulatorStickySettings.get({\n      key: \"visualizationName\",\n      defaultValue: defaultVisualizationName,\n      validateFunc: v =>\n        this.props.visualizations\n          .visualizationNamesInGroup(groupName)\n          .includes(v)\n    });\n  }\n\n  private initialScene(): Scene {\n    const name = SimulatorStickySettings.get({\n      key: \"sceneName\",\n      defaultValue: firstKey(this.props.scenes),\n      validateFunc: (v: string) => this.props.scenes.has(v)\n    });\n    return valueOrThrow(this.props.scenes.get(name));\n  }\n\n  private initialAudioInDevice(): AudioIn.InputDeviceInfo | null {\n    const id = SimulatorStickySettings.get({\n      key: \"audioInSourceId\",\n      defaultValue: this.audioIn.defaultDeviceId,\n      validateFunc: this.audioIn.isValidId\n    });\n    return this.audioIn.inputDeviceById(id);\n  }\n\n  private initialSimulationEnabled(): boolean {\n    if (window.location.search === \"?disableSimulation\") {\n      return false;\n    } else {\n      return SimulatorStickySettings.get({\n        key: \"simulationEnabled\",\n        defaultValue: true\n      });\n    }\n  }\n\n  private initialBeatController(): BeatController {\n    const type = SimulatorStickySettings.get({\n      key: \"beatControllerType\",\n      defaultValue: \"manual\"\n    });\n    return this.createBeatControllerType(type);\n  }\n\n  public state = ((): State => {\n    const scene = this.initialScene();\n    const visualizationGroupName = this.initialVisualizationGroupName();\n    return {\n      visualizationGroupName,\n      ...this.configureVisualization(\n        this.initialVisualizationName(),\n        scene,\n        /*audioSource=*/ null,\n        /*doNotSetState=*/ true\n      ),\n      midiState: {\n        status: \"initializing\"\n      },\n      midiInput: null,\n      midiControllerInput: null,\n      midiOutput: null,\n      midiInputs: [],\n      midiOutputs: [],\n      audioInputs: undefined,\n      selectedAudioInput: null,\n      audioSource: null,\n      simulationEnabled: this.initialSimulationEnabled(),\n      beatController: this.initialBeatController()\n    };\n  })();\n}\n\nexport default class LedStudioRootWrapper extends React.PureComponent<\n  Props,\n  {}\n> {\n  private counter = 0;\n\n  public render() {\n    const key = `instance${this.counter++}`;\n\n    if (this.counter > 1) {\n      // this isn't actually a horrible situation, but I don't expect it to happen\n      throw new Error(`LedStudioRoot has rendered ${this.counter} times`);\n    }\n\n    return React.createElement(LedStudioRoot, {\n      ...this.props,\n      sceneNames: Array.from(this.props.scenes.keys()),\n      key\n    });\n  }\n}\n","export const METER = 1;\nexport const CENTIMETER = METER / 100;\n\nexport const INCH = CENTIMETER * 2.54;\nexport const FOOT = INCH * 12;\n","import { Vector2, Vector3 } from \"three\";\n\nexport function map2dTo3d(attrs: {\n  points: Vector2[];\n  bottomLeft: Vector3;\n  rightDirection: Vector3;\n  upDirection: Vector3;\n}): Vector3[] {\n  const rightDelta = attrs.rightDirection.clone().normalize();\n  const upDelta = attrs.upDirection.clone().normalize();\n\n  // make sure up and right are right angles to one another otherwise things don't make sense\n  const angle = (rightDelta.angleTo(upDelta) * 180) / Math.PI;\n  if (Math.abs(90 - Math.abs(angle)) > 0.1) {\n    throw new Error(\n      \"right and up don't make sense with relative angle of: \" + angle\n    );\n  }\n\n  return attrs.points.map(point => {\n    const point3d = attrs.bottomLeft.clone();\n    point3d.addScaledVector(rightDelta, point.x);\n    point3d.addScaledVector(upDelta, point.y);\n    return point3d;\n  });\n}\n\nexport interface Vector {\n  clone: () => this;\n  add: (other: this) => this;\n  sub: (other: this) => this;\n  length: () => number;\n  normalize: () => this;\n  multiplyScalar: (v: number) => this;\n}\n\nexport function nPointsInDirection<V extends Vector>(attrs: {\n  firstPoint: V;\n  step: V;\n  numPoints: number;\n}): V[] {\n  const output: V[] = [];\n  const nextPoint: V = attrs.firstPoint.clone();\n  for (let i = 0; i < attrs.numPoints; ++i) {\n    output.push(nextPoint.clone());\n    nextPoint.add(attrs.step);\n  }\n  return output;\n}\n\nexport function pointsFromTo<V extends Vector>(attrs: {\n  start: V;\n  end: V;\n  spacing: number;\n  skipFirst?: number;\n  shortenBy?: number;\n}): V[] {\n  const delta = attrs.end.clone().sub(attrs.start);\n  const distance = Math.max(\n    0,\n    delta.length() - (attrs.shortenBy || 0) - (attrs.skipFirst || 0)\n  );\n  const step = delta.clone().normalize().multiplyScalar(attrs.spacing);\n\n  const start = attrs.start.clone().add(\n    delta\n      .clone()\n      .normalize()\n      .multiplyScalar(attrs.skipFirst || 0)\n  );\n  const numPoints = 1 + Math.floor(distance / attrs.spacing);\n  return nPointsInDirection({\n    firstPoint: start,\n    step,\n    numPoints\n  });\n}\n","import { Vector2, Vector3 } from \"three\";\nimport * as Three from \"three\";\n\nimport { ExtraObjectFunc } from \"./Scene\";\n\n// makes a triangle from a vertical piece and two arms.\n// vertical piece starts at (0,0) and goes up (+y)\n// top and bottom sides point to the right (+x)\n// vertex order is [(0,0), (0,`verticalLength`), (<other vertex>)]\nexport function triangleFromLengths(attrs: {\n  verticalLength: number;\n  topSideLength: number;\n  bottomSideLength: number;\n  flipX?: boolean;\n}): [Vector2, Vector2, Vector2] {\n  const v = attrs.verticalLength;\n  const t = attrs.topSideLength;\n  const b = attrs.bottomSideLength;\n\n  const a = (b * b - t * t - v * v) / (2 * v);\n  const w = Math.sqrt(t * t - a * a);\n\n  return [\n    new Vector2(0, 0),\n    new Vector2(0, v),\n    new Vector2((attrs.flipX ? -1 : 1) * w, v + a)\n  ];\n}\n\nexport function boundingBox2D(points: Vector2[]): [Vector2, Vector2] {\n  if (points.length < 1) {\n    throw new Error(\"no points\");\n  }\n\n  const min = points[0].clone();\n  const max = points[0].clone();\n\n  points.forEach(p => {\n    if (p.x < min.x) {\n      min.x = p.x;\n    }\n    if (p.y < min.y) {\n      min.y = p.y;\n    }\n    if (p.x > max.x) {\n      max.x = p.x;\n    }\n    if (p.y > max.y) {\n      max.y = p.y;\n    }\n  });\n\n  return [min, max];\n}\n\nexport function width2D(points: Vector2[]): number {\n  const bounds = boundingBox2D(points);\n  return bounds[1].x - bounds[0].x;\n}\n\nconst EXTRA_OBJECT_MATERIAL_DEFAULT = () => {\n  return new Three.MeshLambertMaterial({\n    color: 0x111111\n  });\n};\n\n// creates a box with the bottom centered at (0,0,0)\nexport function boxHelper(attrs: {\n  width: number;\n  height: number;\n  depth: number;\n  translateBy?: Vector3;\n  material?: Three.Material;\n}): ExtraObjectFunc {\n  return () => {\n    const geometry = new Three.BoxGeometry(\n      attrs.width,\n      attrs.height,\n      attrs.depth\n    );\n    geometry.translate(0, attrs.height / 2, 0);\n    if (attrs.translateBy) {\n      geometry.translate(\n        attrs.translateBy.x,\n        attrs.translateBy.y,\n        attrs.translateBy.z\n      );\n    }\n\n    const material = attrs.material || EXTRA_OBJECT_MATERIAL_DEFAULT();\n    const mesh = new Three.Mesh(geometry, material);\n    return mesh;\n  };\n}\n","import { FOOT, INCH } from \"src/util/Units\";\nimport * as Three from \"three\";\nimport { Vector3 } from \"three\";\n\nimport { boxHelper } from \"./SceneUtils\";\n\nconst EXTRA_OBJECT_MATERIAL_GREEN = () => {\n  return new Three.MeshBasicMaterial({\n    color: 0x000100,\n    transparent: true,\n    // opacity: 0.2,\n    side: Three.DoubleSide\n  });\n};\n\n// table (https://www.target.com/p/6-folding-banquet-table-off-white-plastic-dev-group/-/A-14324329)\nfunction banquetTable(attrs: {\n  translateBy: Vector3;\n  riserHeight?: number;\n  rotateY?: number;\n}) {\n  const tableWidth = 6 * FOOT;\n  const tableDepth = 30 * INCH;\n  const tableThickness = 2 * INCH;\n  const legHeight = 27.25 * INCH;\n  const legInset = 6 * INCH;\n\n  const object = new Three.Object3D();\n  object.add(\n    boxHelper({\n      width: tableWidth,\n      height: tableThickness,\n      depth: tableDepth,\n      translateBy: new Vector3(0, legHeight, 0)\n    })()\n  );\n\n  const { riserHeight } = attrs;\n\n  const leg = boxHelper({\n    width: 1 * INCH,\n    height: legHeight,\n    depth: 1 * INCH\n  })();\n  [\n    [-1, -1],\n    [-1, 1],\n    [1, 1],\n    [1, -1]\n  ].forEach(([x, z]) => {\n    const thisLeg = leg.clone();\n    const legX = x * (tableWidth * 0.5 - legInset);\n    const legZ = z * (tableDepth * 0.5 - legInset);\n    thisLeg.position.copy(new Vector3(legX, 0, legZ));\n    object.add(thisLeg);\n\n    if (riserHeight) {\n      const riser = boxHelper({\n        width: 6 * INCH,\n        depth: 6 * INCH,\n        height: riserHeight,\n        translateBy: new Vector3(legX, -1 * riserHeight, legZ)\n      })();\n      object.add(riser);\n    }\n  });\n\n  if (attrs.rotateY) {\n    object.rotateY(attrs.rotateY);\n  }\n\n  if (riserHeight) {\n    object.children.forEach(c => c.translateY(riserHeight));\n  }\n\n  object.position.add(attrs.translateBy);\n\n  return object;\n}\n\n// center is middle of front row of tables\nfunction djTables(attrs: { translateBy: Vector3 }) {\n  const scene = new Three.Object3D();\n\n  scene.add(\n    banquetTable({\n      translateBy: new Vector3(-3.05 * FOOT, 0, 0)\n    })\n  );\n\n  scene.add(\n    banquetTable({\n      translateBy: new Vector3(3.05 * FOOT, 0, 0)\n    })\n  );\n\n  scene.add(\n    banquetTable({\n      riserHeight: 6 * INCH,\n      translateBy: new Vector3(-3.05 * FOOT, 0, 0.7)\n    })\n  );\n\n  scene.add(\n    banquetTable({\n      riserHeight: 6 * INCH,\n      translateBy: new Vector3(3.05 * FOOT, 0, 0.7)\n    })\n  );\n\n  scene.add(\n    banquetTable({\n      rotateY: Math.PI / 2,\n      riserHeight: 6 * INCH,\n      translateBy: new Vector3(7.45 * FOOT, 0, 1.25)\n    })\n  );\n\n  scene.add(\n    banquetTable({\n      rotateY: Math.PI / 2,\n      riserHeight: 3 * INCH,\n      translateBy: new Vector3(-7.45 * FOOT, 0, 1.25)\n    })\n  );\n\n  scene.position.add(attrs.translateBy);\n\n  return scene;\n}\n\nexport function createBurrowVenue(attrs: {\n  keyboardInFront: boolean;\n  hideKeyboard?: boolean;\n}) {\n  const tablesTranslateZ = attrs.keyboardInFront ? 1.5 : -1;\n  const keyboardTranslateZ =\n    tablesTranslateZ + (attrs.keyboardInFront ? -1.5 : 1.35);\n  const shoulderHeight = 57 * INCH;\n\n  return {\n    model: attrs.hideKeyboard\n      ? undefined\n      : {\n          url: \"./keyboard.gltf\",\n          scale: new Vector3(0.1, 0.1, 0.12),\n          translateBy: new Vector3(0, 0, keyboardTranslateZ)\n        },\n    extraObjects: [\n      // piano size\n      // boxHelper({\n      //   width: 1.336,\n      //   height: 0.145,\n      //   depth: 0.376,\n      //   translateBy: new Vector3(0, 0.63, 0)\n      // })\n      () => djTables({ translateBy: new Vector3(0, 0, tablesTranslateZ) }),\n      boxHelper({\n        width: 20 * INCH,\n        height: shoulderHeight,\n        depth: 10 * INCH,\n        translateBy: new Vector3(0, 0, keyboardTranslateZ + 0.5),\n        material: EXTRA_OBJECT_MATERIAL_GREEN()\n      }),\n      boxHelper({\n        width: 10 * INCH,\n        height: 12 * INCH,\n        depth: 10 * INCH,\n        translateBy: new Vector3(\n          0,\n          shoulderHeight + 1 * INCH,\n          keyboardTranslateZ + 0.5\n        ),\n        material: EXTRA_OBJECT_MATERIAL_GREEN()\n      })\n    ]\n  };\n}\n","import { promisify } from \"util\";\n\nimport * as Three from \"three\";\nimport { Vector3 } from \"three\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\n\nimport PortableLedMetadata from \"../portable/base/LedMetadata\";\n\nexport interface SceneLedMetadata extends PortableLedMetadata {\n  position: Three.Vector3;\n}\n\nconst FLOOR_SIZE_DEFAULT = 10;\nconst FLOOR_MATERIAL = new Three.MeshLambertMaterial({\n  color: 0x090909\n});\n\nexport type ExtraObjectFunc = () => Three.Object3D;\n\nexport interface ModelDef {\n  url: string;\n  scale?: Vector3;\n  translateBy?: Vector3;\n}\n\nexport interface CameraDef {\n  target?: Vector3;\n  startPosition?: Vector3;\n}\n\nexport interface SceneDef {\n  name: string;\n  initialDisplayValues?: { [k: string]: string | number };\n  camera?: CameraDef;\n  model?: ModelDef;\n  floorSizeOverride?: number;\n  extraObjects?: ExtraObjectFunc[];\n  leds: SceneLedMetadata[];\n  ledRadius: number;\n  voronoiMaxDimension: number;\n}\n\nexport default class Scene {\n  private readonly def: SceneDef;\n  private lazyModelPromise?: Promise<Three.Object3D>;\n  private displayValues: { [k: string]: string | number } | undefined;\n  private cachedDisplayMessage: string | undefined;\n\n  public readonly ledRadius: number;\n  public readonly ledMetadatas: SceneLedMetadata[];\n\n  constructor(def: SceneDef) {\n    this.def = def;\n    this.ledMetadatas = this.def.leds;\n    this.setDisplayValue(\"#leds\", this.def.leds.length);\n    this.ledRadius = def.ledRadius;\n  }\n\n  public get name() {\n    return this.def.name;\n  }\n\n  public toString() {\n    return `<scene:${this.name}>`;\n  }\n\n  public async loadModel(): Promise<Three.Object3D> {\n    if (this.lazyModelPromise === undefined) {\n      this.lazyModelPromise = promisify<Three.Object3D>(callback => {\n        const modelDef = this.def.model;\n        if (modelDef === undefined) {\n          callback(null, new Three.Object3D());\n          return;\n        }\n\n        const loader = new GLTFLoader();\n        loader.load(\n          modelDef.url,\n          /*onLoad=*/ gltf => {\n            let model = gltf.scene;\n            if (modelDef.scale !== undefined) {\n              model = model.clone();\n              model.scale.copy(modelDef.scale);\n            }\n\n            const boundingBox = new Three.Box3().setFromObject(model);\n            const center = boundingBox.getCenter(new Three.Vector3());\n            const bottomY = boundingBox.min.y;\n            model.translateX(-center.x);\n            model.translateY(-bottomY);\n            model.translateZ(-center.z);\n            if (modelDef.translateBy) {\n              model.position.add(modelDef.translateBy);\n            }\n            callback(null, model);\n          },\n          /*onProgress=*/ undefined,\n          /*onError*/ error => {\n            callback(new Error(`gltf error: ${error}`), null as any);\n          }\n        );\n      })().then(scene => {\n        return this.addExtraObjects(scene);\n      });\n    }\n    return this.lazyModelPromise;\n  }\n\n  private addExtraObjects(model: Three.Object3D): Three.Scene {\n    const scene = new Three.Scene();\n\n    scene.add(model);\n\n    // floor\n    if (this.def.floorSizeOverride !== 0) {\n      const floorSize = this.def.floorSizeOverride || FLOOR_SIZE_DEFAULT;\n      const floorGeometry = new Three.PlaneGeometry(\n        floorSize,\n        floorSize\n      ).rotateX((-1 * Math.PI) / 2);\n      const floor = new Three.Mesh(floorGeometry, FLOOR_MATERIAL);\n\n      // lower it ever-so-slightly to avoid collision with any semi-transparent things on the floor\n      floor.translateY(-0.001);\n\n      scene.add(floor);\n    }\n\n    // add extra objects\n    (this.def.extraObjects || []).forEach(func => scene.add(func()));\n\n    return scene;\n  }\n\n  public get cameraTarget(): Vector3 {\n    if (this.def.camera !== undefined && this.def.camera.target !== undefined) {\n      return this.def.camera.target;\n    } else {\n      return new Vector3(0, 0, 0);\n    }\n  }\n\n  public get cameraStartPosition(): Vector3 {\n    if (\n      this.def.camera !== undefined &&\n      this.def.camera.startPosition !== undefined\n    ) {\n      return this.def.camera.startPosition.clone();\n    } else {\n      return new Vector3(0, 0, -10);\n    }\n  }\n\n  private initDisplayValuesIfNeeded(): { [k: string]: string | number } {\n    if (this.displayValues === undefined) {\n      if (this.def.initialDisplayValues) {\n        this.displayValues = this.def.initialDisplayValues;\n      } else {\n        this.displayValues = {};\n      }\n    }\n    return this.displayValues;\n  }\n\n  private setDisplayValue(key: string, value: string | number) {\n    this.initDisplayValuesIfNeeded()[key] = value;\n  }\n\n  public get displayMessage(): string {\n    if (this.cachedDisplayMessage === undefined) {\n      this.cachedDisplayMessage = Object.entries(\n        this.initDisplayValuesIfNeeded()\n      )\n        .map(entry => `${entry[0]}=${entry[1]}`)\n        .join(\" / \");\n    }\n    return this.cachedDisplayMessage;\n  }\n\n  public get voronoiMaxDimension() {\n    return this.def.voronoiMaxDimension;\n  }\n}\n","import { INCH, METER } from \"src/util/Units\";\nimport { fillArray, interleave } from \"src/util/Utils\";\nimport { Vector2, Vector3 } from \"three\";\n\nimport * as SimulationUtils from \"../simulator/SimulationUtils\";\nimport { createBurrowVenue } from \"./BurrowVenue\";\nimport Scene, { SceneLedMetadata } from \"./Scene\";\nimport { boxHelper } from \"./SceneUtils\";\n\nconst LED_SPACING = METER / 30;\nconst SMALL_TRIANGLE_LED_COUNTS = [23, 20, 22, 26];\nconst LARGE_TRIANGLE_LED_COUNTS = [46, 44, 44, 53];\n\n// measurements\nconst middleSpacing = 1.5 * INCH;\nconst interTriangleSpacing = 1.75 * INCH;\nconst startSpacing = 7.5 * INCH;\nconst smallDeltaX = 29 * INCH;\nconst smallDeltaY = 19.5 * INCH;\nconst largeDeltaX = 57 * INCH;\nconst largeDeltaY = 48.25 * INCH;\nconst bottomHeight = 35 * INCH;\n\nfunction createVenue() {\n  const postPositionX = smallDeltaX + 0.5 * interTriangleSpacing;\n\n  const venue = createBurrowVenue({\n    keyboardInFront: false,\n    hideKeyboard: true\n  });\n  venue.extraObjects.push(\n    boxHelper({\n      width: 4 * INCH,\n      height: 65 * INCH,\n      depth: 4 * INCH,\n      translateBy: new Vector3(postPositionX, 0, 1.32)\n    })\n  );\n  venue.extraObjects.push(\n    boxHelper({\n      width: 4 * INCH,\n      height: 65 * INCH,\n      depth: 4 * INCH,\n      translateBy: new Vector3(-1 * postPositionX, 0, 1.32)\n    })\n  );\n\n  return venue;\n}\n\nfunction makeRib(attrs: { start: Vector2; toward: Vector2; numLeds: number }) {\n  const end = attrs.toward\n    .clone()\n    .sub(attrs.start)\n    .normalize()\n    .multiplyScalar(LED_SPACING * (attrs.numLeds - 1 + 0.1))\n    .add(attrs.start);\n  return SimulationUtils.pointsFromTo({\n    start: attrs.start,\n    end: end,\n    spacing: LED_SPACING\n  });\n}\n\nexport function createTrianglePositions2d(\n  type: \"small\" | \"large\"\n): Vector2[][] {\n  const deltaX = type === \"small\" ? smallDeltaX : -1 * largeDeltaX;\n  const deltaY = type === \"small\" ? smallDeltaY : largeDeltaY;\n  const ledCounts =\n    type === \"small\" ? SMALL_TRIANGLE_LED_COUNTS : LARGE_TRIANGLE_LED_COUNTS;\n\n  return fillArray(4, i =>\n    makeRib({\n      start: new Vector2(0, (3 - i) * startSpacing),\n      toward: new Vector2(deltaX, deltaY),\n      numLeds: ledCounts[i]\n    })\n  );\n}\n\nfunction calculateLedPositions2d() {\n  const translateBy = (delta: Vector2) => (vs: Vector2[]) =>\n    vs.map(v => v.clone().add(delta));\n\n  const smallLeftRibs = createTrianglePositions2d(\"small\").map(\n    translateBy(new Vector2(-1 * (smallDeltaX + middleSpacing * 0.5)))\n  );\n\n  const largeLeftRibs = createTrianglePositions2d(\"large\").map(\n    translateBy(\n      new Vector2(\n        -1 * (smallDeltaX + interTriangleSpacing + middleSpacing * 0.5)\n      )\n    )\n  );\n\n  const allLeftRibs = interleave(smallLeftRibs, largeLeftRibs);\n\n  const flipX = (v: Vector2) => new Vector2(-1 * v.x, v.y);\n  const allRightRibs = allLeftRibs.map(rib => rib.map(flipX));\n\n  return [...allLeftRibs, ...allRightRibs];\n}\n\nexport default class BurrowRealWingsScene extends Scene {\n  public constructor(name: string) {\n    const positions2d = calculateLedPositions2d();\n    const ribLengths = positions2d.map(r => r.length);\n\n    const positions3d = positions2d.map(points2d =>\n      SimulationUtils.map2dTo3d({\n        points: points2d,\n        bottomLeft: new Vector3(0, bottomHeight, 1.25),\n        rightDirection: new Vector3(1, 0, 0),\n        upDirection: new Vector3(0, 1, 0)\n      })\n    );\n\n    const ledMetadatas: SceneLedMetadata[] = [];\n    positions3d.forEach((ribPositions, ribIndex) => {\n      const rowNum = Math.floor((ribIndex % 8) / 2);\n      ribPositions.forEach((p, ledIndex) => {\n        ledMetadatas.push({\n          position: p,\n          hardwareChannel: ribIndex + 1,\n          hardwareIndex: ledIndex,\n          rowHint: rowNum\n        });\n      });\n    });\n\n    super({\n      ...createVenue(),\n      name,\n      camera: {\n        startPosition: new Vector3(0, 1.4, -2.5),\n        target: new Vector3(0, 1.2, 0)\n      },\n      leds: ledMetadatas,\n      ledRadius: 0.007,\n      initialDisplayValues: {\n        l: JSON.stringify(ribLengths)\n      },\n      voronoiMaxDimension: 200\n    });\n  }\n}\n","import { FOOT, INCH } from \"src/util/Units\";\nimport { first, interleave, last } from \"src/util/Utils\";\nimport { DoubleSide, MeshBasicMaterial, Vector2, Vector3 } from \"three\";\n\nimport * as SimulationUtils from \"../simulator/SimulationUtils\";\nimport { createTrianglePositions2d } from \"./BurrowRealWingsScene\";\nimport Scene, { SceneLedMetadata } from \"./Scene\";\nimport { boxHelper } from \"./SceneUtils\";\n\n// measurements\nconst smallBottomHeight = 59 * INCH;\nconst smallSeparation = 2.25 * INCH;\nconst largeBottomHeight = 41.5 * INCH;\nconst largeSeparation = 4.25 * INCH;\n\nconst WALL_MATERIAL = () => {\n  return new MeshBasicMaterial({\n    color: 0x030303,\n    transparent: true,\n    // opacity: 0.2,\n    side: DoubleSide\n  });\n};\n\nfunction createVenue() {\n  return {\n    extraObjects: [\n      () =>\n        boxHelper({\n          width: 10 * FOOT,\n          height: 9 * FOOT,\n          depth: 6 * INCH,\n          translateBy: new Vector3(0, 0, 4.5 * FOOT),\n          material: WALL_MATERIAL()\n        })()\n    ]\n  };\n}\n\nfunction moveToPositionAndRotate(\n  leds: Vector2[][],\n  ribIndex: number,\n  useLastLed: boolean,\n  position: Vector2,\n  angleDegrees: number\n) {\n  const origin = new Vector2(0, 0);\n  const ledToMoveToOrigin = (useLastLed ? last : first)(leds[ribIndex]);\n  return leds.map(innerLeds =>\n    innerLeds.map(p =>\n      p\n        .clone()\n        .sub(ledToMoveToOrigin)\n        .rotateAround(origin, (angleDegrees / 180) * Math.PI)\n        .add(position)\n    )\n  );\n}\n\nfunction calculateLedPositions2d() {\n  const smallLeftRibs = moveToPositionAndRotate(\n    createTrianglePositions2d(\"small\"),\n    0,\n    /*useLastLed=*/ true,\n    new Vector2(smallSeparation / 2, smallBottomHeight),\n    -124.2\n  );\n\n  const largeLeftRibs = moveToPositionAndRotate(\n    createTrianglePositions2d(\"large\"),\n    3,\n    /*useLastLed=*/ false,\n    new Vector2(largeSeparation / 2, largeBottomHeight),\n    -90\n  );\n\n  const allLeftRibs = interleave(smallLeftRibs, largeLeftRibs);\n\n  const flipX = (v: Vector2) => new Vector2(-1 * v.x, v.y);\n  const allRightRibs = allLeftRibs.map(rib => rib.map(flipX));\n\n  return [...allLeftRibs, ...allRightRibs];\n}\n\nexport default class GarageRealWingsScene extends Scene {\n  public constructor(name: string) {\n    const positions2d = calculateLedPositions2d();\n    const ribLengths = positions2d.map(r => r.length);\n\n    const positions3d = positions2d.map(points2d =>\n      SimulationUtils.map2dTo3d({\n        points: points2d,\n        bottomLeft: new Vector3(0, 0, 1.25),\n        rightDirection: new Vector3(1, 0, 0),\n        upDirection: new Vector3(0, 1, 0)\n      })\n    );\n\n    const ledMetadatas: SceneLedMetadata[] = [];\n    positions3d.forEach((ribPositions, ribIndex) => {\n      const rowNum = Math.floor((ribIndex % 8) / 2);\n      ribPositions.forEach((p, ledIndex) => {\n        ledMetadatas.push({\n          position: p,\n          hardwareChannel: ribIndex + 1,\n          hardwareIndex: ledIndex,\n          rowHint: rowNum\n        });\n      });\n    });\n\n    super({\n      ...createVenue(),\n      name,\n      camera: {\n        startPosition: new Vector3(0, 1.4, -2.5),\n        target: new Vector3(0, 1.2, 0)\n      },\n      leds: ledMetadatas,\n      ledRadius: 0.007,\n      initialDisplayValues: {\n        l: JSON.stringify(ribLengths)\n      },\n      voronoiMaxDimension: 130\n    });\n  }\n}\n","import * as Three from \"three\";\nimport { Vector3 } from \"three\";\n\nimport { createBurrowVenue } from \"./BurrowVenue\";\nimport Scene, { SceneLedMetadata } from \"./Scene\";\n\nfunction makeLedSegments(\n  segments: Array<{\n    numLeds: number;\n    startPoint: Three.Vector3;\n    endPoint: Three.Vector3;\n    hardwareChannel: number;\n  }>,\n  firstRowHint?: number\n): SceneLedMetadata[] {\n  const rowHintOffset = firstRowHint || 0;\n  const ledMetadatas: SceneLedMetadata[] = [];\n  segments.forEach((segment, rowIndex) => {\n    const numLeds = segment.numLeds;\n    const step = segment.endPoint.clone();\n    step.sub(segment.startPoint);\n    step.divideScalar(segment.numLeds - 1);\n    for (let i = 0; i < numLeds; ++i) {\n      const position = step.clone();\n      position.multiplyScalar(i);\n      position.add(segment.startPoint);\n      const led: SceneLedMetadata = {\n        position: position,\n        hardwareChannel: segment.hardwareChannel,\n        hardwareIndex: i,\n        rowHint: rowHintOffset + rowIndex\n      };\n      ledMetadatas.push(led);\n    }\n  });\n  return ledMetadatas;\n}\n\nexport default class PianoThreeStripesScene extends Scene {\n  public constructor(name: string) {\n    super({\n      ...createBurrowVenue({ keyboardInFront: true }),\n      name,\n      camera: {\n        startPosition: new Vector3(0, 1.1, -1.5),\n        target: new Vector3(0, 0.5, 0)\n      },\n      leds: makeLedSegments([\n        {\n          numLeds: 88,\n          startPoint: new Three.Vector3(-0.6, 0.74, -0.163),\n          endPoint: new Three.Vector3(0.6, 0.74, -0.163),\n          hardwareChannel: 1\n        },\n        {\n          numLeds: 88,\n          startPoint: new Three.Vector3(-0.6, 0.725, -0.168),\n          endPoint: new Three.Vector3(0.6, 0.725, -0.168),\n          hardwareChannel: 2\n        },\n        {\n          numLeds: 88,\n          startPoint: new Three.Vector3(-0.6, 0.71, -0.173),\n          endPoint: new Three.Vector3(0.6, 0.71, -0.173),\n          hardwareChannel: 3\n        }\n      ]),\n      ledRadius: 0.0035,\n      voronoiMaxDimension: 150\n    });\n  }\n}\n","import BurrowRealWingsScene from \"./BurrowRealWingsScene\";\nimport GarageRealWingsScene from \"./GarageRealWingsScene\";\nimport PianoThreeStripesScene from \"./PianoThreeStripesScene\";\nimport Scene from \"./Scene\";\n\nexport const registry = new Map<string, Scene>();\n\nfunction registerScenes(defs: ReadonlyArray<Scene>) {\n  defs.forEach(scene => {\n    const name = scene.name;\n    if (registry.has(name)) {\n      throw new Error(`scene already registered with name: ${name}`);\n    }\n    registry.set(name, scene);\n  });\n}\n\nregisterScenes([\n  new PianoThreeStripesScene(\"keyboard:3stripes\"),\n  new BurrowRealWingsScene(\"burrow:wings30x4-real\"),\n  new GarageRealWingsScene(\"garage:wings30x4-real\")\n]);\n","import * as React from \"react\";\n\nimport * as Visualizations from \"./generated/Visualizations\";\nimport LedStudioRoot from \"./LedStudioRoot\";\nimport * as Scenes from \"./scenes/Scenes\";\n\nexport default class App extends React.PureComponent<{}, {}> {\n  public render() {\n    return (\n      <LedStudioRoot\n        scenes={Scenes.registry}\n        visualizations={Visualizations.registry}\n      />\n    );\n  }\n}\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === \"installed\") {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It\"s the perfect time to display a \"New content is\n                // available; please refresh.' message in your web app.\n                console.log(\"New content is available; please refresh.\");\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log(\"Content is cached for offline use.\");\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\")!.indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"./index.scss\";\n\n// import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport { unregister as unregisterServiceWorker } from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\") as HTMLElement);\nunregisterServiceWorker();\n","export function fillArray<T>(size: number, func: (index: number) => T): T[] {\n  const output = new Array<T>(size);\n  for (let i = 0; i < size; ++i) {\n    output[i] = func(i);\n  }\n  return output;\n}\n\nexport function updateValues<T>(arr: T[], func: (oldValue: T) => T) {\n  for (let i = 0; i < arr.length; ++i) {\n    arr[i] = func(arr[i]);\n  }\n}\n\nexport function floatToString(n: number, precision: number): string {\n  if (precision === 0) {\n    return `${Math.round(n)}`;\n  }\n  const roundAdjustment = Math.pow(10, precision);\n  n = Math.round(n * roundAdjustment) / roundAdjustment;\n\n  // tslint:disable-next-line: prefer-const\n  let [intPart, fracPart] = `${n}`.split(\".\");\n  if (fracPart === undefined) {\n    fracPart = \"\";\n  } else {\n    fracPart = fracPart.slice(0, precision);\n  }\n  while (fracPart.length < precision) {\n    fracPart += \"0\";\n  }\n  return `${intPart}.${fracPart}`;\n}\n\nexport function bracket(min: number, max: number, v: number) {\n  if (v < min) {\n    return min;\n  } else if (v > max) {\n    return max;\n  } else {\n    return v;\n  }\n}\n\nexport function createBracketFunc(\n  min: number,\n  max: number\n): (v: number) => number {\n  return (v: number) => bracket(min, max, v);\n}\n\nexport const bracket01 = createBracketFunc(0, 1);\n\nexport function ensureValidRange(\n  startIndex: number,\n  length: number,\n  validLength: number\n): [number, number] {\n  if (startIndex < 0) {\n    length += startIndex;\n    startIndex = 0;\n  }\n\n  length = Math.min(length, validLength - startIndex);\n\n  return [startIndex, length];\n}\n\nexport function pushAll<T>(arr: T[], items: T[]) {\n  items.forEach(item => arr.push(item));\n}\n\nexport function removeFirst<T>(arr: T[], item: T) {\n  for (let i = 0; i < arr.length; ++i) {\n    if (arr[i] === item) {\n      arr.splice(i, 1);\n      return;\n    }\n  }\n}\n\nexport function removeAll<T>(arr: T[]) {\n  arr.splice(0, arr.length);\n}\n\nexport function forEachReverse<T>(\n  arr: T[],\n  func: (value: T, index: number) => void\n) {\n  for (let i = arr.length - 1; i >= 0; --i) {\n    func(arr[i], i);\n  }\n}\n\nexport class MovingAverageHelper {\n  private values: number[];\n  private numValues: number = 0;\n  private sum: number = 0;\n  private nextIndex: number = 0;\n\n  constructor(size: number) {\n    this.values = new Array(size);\n  }\n\n  public get movingAverage() {\n    return this.sum / this.numValues;\n  }\n\n  public addValue(value: number) {\n    if (this.numValues === this.values.length) {\n      this.sum -= this.values[this.nextIndex];\n    } else {\n      this.numValues++;\n    }\n    this.values[this.nextIndex] = value;\n    this.sum += value;\n    this.nextIndex = (this.nextIndex + 1) % this.values.length;\n  }\n\n  public addTiming<T>(func: () => T): T {\n    const startTime = performance.now();\n    try {\n      return func();\n    } finally {\n      this.addValue(performance.now() - startTime);\n    }\n  }\n\n  public reset() {\n    this.sum = 0;\n    this.nextIndex = 0;\n    this.numValues = 0;\n  }\n}\n\nexport function roundPlaces(v: number, numPlaces: number) {\n  const factor = Math.pow(10, numPlaces);\n  return Math.round(v * factor) / factor;\n}\n\nexport function valueOrDefault<T>(\n  valueOrUndefined: T | undefined,\n  defaultValue: T\n): T {\n  return valueOrUndefined === undefined ? defaultValue : valueOrUndefined;\n}\n\nexport function valueOrThrow<T>(valueOrUndefined: T | undefined): T {\n  if (valueOrUndefined === undefined) {\n    throw new Error(\"no value\");\n  }\n  return valueOrUndefined;\n}\n\nexport function first<T>(iterator: Iterable<T>): T {\n  const it = iterator[Symbol.iterator]();\n  const n = it.next();\n  if (n.done) {\n    throw new Error(\"no value\");\n  }\n  return n.value;\n}\n\nexport function firstKey<T>(map: Map<T, any>): T {\n  return first(map.keys());\n}\n\nexport function identity<T>(v: T): T {\n  return v;\n}\n\nexport function getOrCreateMap<K1, K2, V>(\n  outerMap: Map<K1, Map<K2, V>>,\n  outerKey: K1\n): Map<K2, V> {\n  let innerMap = outerMap.get(outerKey);\n  if (innerMap === undefined) {\n    innerMap = new Map();\n    outerMap.set(outerKey, innerMap);\n  }\n  return innerMap;\n}\n\nexport function forEachValueInSortedKeyOrder<V>(\n  map: Map<string, V>,\n  func: (value: V) => void\n) {\n  Array.from(map.keys())\n    .sort()\n    .forEach(k => {\n      func(map.get(k) as V);\n    });\n}\n\nexport function memoize<T>(func: () => T): () => T {\n  let ran = false;\n  let result: any;\n\n  return () => {\n    if (!ran) {\n      result = func();\n      ran = true;\n    }\n    return result;\n  };\n}\n\ntype MemoizableValue = number | object;\nexport type MaybeMemoizedValue<T extends MemoizableValue> = T | (() => T);\n\nexport function resolveMMV<T extends MemoizableValue>(\n  v: MaybeMemoizedValue<T>\n): T {\n  if (typeof v === \"function\") {\n    return v();\n  } else {\n    return v;\n  }\n}\n\nexport function interleave<T>(a: T[], b: T[]): T[] {\n  if (a.length !== b.length) {\n    throw new Error(\"must be same length\");\n  }\n\n  const output: T[] = [];\n\n  a.forEach((ai, i) => {\n    output.push(ai);\n    output.push(b[i]);\n  });\n\n  return output;\n}\n\nexport function last<T>(arr: ReadonlyArray<T>): T {\n  if (arr.length === 0) {\n    throw new Error(\"no items\");\n  }\n  return arr[arr.length - 1];\n}\n"],"sourceRoot":""}